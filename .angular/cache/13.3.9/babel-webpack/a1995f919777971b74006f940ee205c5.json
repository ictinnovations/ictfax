{"ast":null,"code":"import { Headers } from '@angular/http';\nimport { Http, RequestOptions } from '@angular/http';\nimport { AppService } from '../../../app/app.service';\nimport 'rxjs/add/operator/toPromise';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"../../../app/app.service\";\nexport let IncomingNumberService = /*#__PURE__*/(() => {\n  class IncomingNumberService {\n    constructor(http, app_service) {\n      this.http = http;\n      this.app_service = app_service;\n    }\n\n    get_List(user_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const getUrl = `${this.app_service.apiUrlUsers}/${user_id}/accounts?type=did`;\n      return this.http.get(getUrl, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    get_Data(account_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const getApi = `${this.app_service.apiUrlAccounts}/${account_id}`;\n      return this.http.get(getApi, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    forward_did(incoming_number) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(incoming_number);\n      const url = `${this.app_service.apiUrlAccounts}/${incoming_number.account_id}/programs/${incoming_number.program_name}`;\n      return this.http.put(url, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    forwardtoext(incoming_number) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(incoming_number);\n      const url = `${this.app_service.apiUrlPrograms}/forward`;\n      return this.http.post(url, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    update_account(account) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(account);\n      const updateUrl = `${this.app_service.apiUrlAccounts}/${account.account_id}`;\n      return this.http.put(updateUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    handleError(error) {\n      console.error('An error occurred', error); // for demo purposes only\n\n      return Promise.reject(error.message || error);\n    }\n\n  }\n\n  IncomingNumberService.ɵfac = function IncomingNumberService_Factory(t) {\n    return new (t || IncomingNumberService)(i0.ɵɵinject(i1.Http), i0.ɵɵinject(i2.AppService));\n  };\n\n  IncomingNumberService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IncomingNumberService,\n    factory: IncomingNumberService.ɵfac\n  });\n  return IncomingNumberService;\n})();","map":null,"metadata":{},"sourceType":"module"}