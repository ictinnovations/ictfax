{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, Inject, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { AnimationDurations, AnimationCurves, mixinInitialized, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport * as i3 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst _c0 = [\"mat-sort-header\", \"\"];\n\nfunction MatSortHeader_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵlistener(\"@arrowPosition.start\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1._disableViewStateAnimation = true;\n    })(\"@arrowPosition.done\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3._disableViewStateAnimation = false;\n    });\n    i0.ɵɵelement(1, \"div\", 4);\n    i0.ɵɵelementStart(2, \"div\", 5);\n    i0.ɵɵelement(3, \"div\", 6)(4, \"div\", 7)(5, \"div\", 8);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@arrowOpacity\", ctx_r0._getArrowViewState())(\"@arrowPosition\", ctx_r0._getArrowViewState())(\"@allowChildren\", ctx_r0._getArrowDirectionState());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"@indicator\", ctx_r0._getArrowDirectionState());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"@leftPointer\", ctx_r0._getArrowDirectionState());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"@rightPointer\", ctx_r0._getArrowDirectionState());\n  }\n}\n\nconst _c1 = [\"*\"];\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * @docs-private\n */\n\nconst matSortAnimations = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [state('active-asc, asc', style({\n    transform: 'translateY(0px)'\n  })), // 10px is the height of the sort indicator, minus the width of the pointers\n  state('active-desc, desc', style({\n    transform: 'translateY(10px)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [state('active-asc, asc', style({\n    transform: 'rotate(-45deg)'\n  })), state('active-desc, desc', style({\n    transform: 'rotate(45deg)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [state('active-asc, asc', style({\n    transform: 'rotate(45deg)'\n  })), state('active-desc, desc', style({\n    transform: 'rotate(-45deg)'\n  })), transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [state('desc-to-active, asc-to-active, active', style({\n    opacity: 1\n  })), state('desc-to-hint, asc-to-hint, hint', style({\n    opacity: 0.54\n  })), state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({\n    opacity: 0\n  })), // Transition between all states except for immediate transitions\n  transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')), transition('* <=> *', animate(SORT_ANIMATION_TRANSITION))]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [// Hidden Above => Hint Center\n  transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(-25%)'\n  }), style({\n    transform: 'translateY(0)'\n  })]))), // Hint Center => Hidden Below\n  transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(0)'\n  }), style({\n    transform: 'translateY(25%)'\n  })]))), // Hidden Below => Hint Center\n  transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(25%)'\n  }), style({\n    transform: 'translateY(0)'\n  })]))), // Hint Center => Hidden Above\n  transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({\n    transform: 'translateY(0)'\n  }), style({\n    transform: 'translateY(-25%)'\n  })]))), state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({\n    transform: 'translateY(0)'\n  })), state('hint-to-desc, active-to-desc, desc', style({\n    transform: 'translateY(-25%)'\n  })), state('hint-to-asc, active-to-asc, asc', style({\n    transform: 'translateY(25%)'\n  }))]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [transition('* <=> *', [query('@*', animateChild(), {\n    optional: true\n  })])])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\n\nfunction getSortDuplicateSortableIdError(id) {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/** @docs-private */\n\n\nfunction getSortHeaderNotContainedWithinSortError() {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/** @docs-private */\n\n\nfunction getSortHeaderMissingIdError() {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/** @docs-private */\n\n\nfunction getSortInvalidDirectionError(direction) {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n\n\nclass MatSortHeaderIntl {\n  constructor() {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    this.changes = new Subject();\n  }\n\n}\n\nMatSortHeaderIntl.ɵfac = function MatSortHeaderIntl_Factory(t) {\n  return new (t || MatSortHeaderIntl)();\n};\n\nMatSortHeaderIntl.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MatSortHeaderIntl,\n  factory: MatSortHeaderIntl.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSortHeaderIntl, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/** @docs-private */\n\n\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n/** @docs-private */\n\n\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for `mat-sort`. */\n\nconst MAT_SORT_DEFAULT_OPTIONS = new InjectionToken('MAT_SORT_DEFAULT_OPTIONS'); // Boilerplate for applying mixins to MatSort.\n\n/** @docs-private */\n\nconst _MatSortBase = mixinInitialized(mixinDisabled(class {}));\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n\n\nclass MatSort extends _MatSortBase {\n  constructor(_defaultOptions) {\n    super();\n    this._defaultOptions = _defaultOptions;\n    /** Collection of all registered sortables that this directive manages. */\n\n    this.sortables = new Map();\n    /** Used to notify any child components listening to state changes. */\n\n    this._stateChanges = new Subject();\n    /**\n     * The direction to set when an MatSortable is initially sorted.\n     * May be overriden by the MatSortable's sort start.\n     */\n\n    this.start = 'asc';\n    this._direction = '';\n    /** Event emitted when the user changes either the active sort or sort direction. */\n\n    this.sortChange = new EventEmitter();\n  }\n  /** The sort direction of the currently active MatSortable. */\n\n\n  get direction() {\n    return this._direction;\n  }\n\n  set direction(direction) {\n    if (direction && direction !== 'asc' && direction !== 'desc' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getSortInvalidDirectionError(direction);\n    }\n\n    this._direction = direction;\n  }\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n\n\n  get disableClear() {\n    return this._disableClear;\n  }\n\n  set disableClear(v) {\n    this._disableClear = coerceBooleanProperty(v);\n  }\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n\n\n  register(sortable) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!sortable.id) {\n        throw getSortHeaderMissingIdError();\n      }\n\n      if (this.sortables.has(sortable.id)) {\n        throw getSortDuplicateSortableIdError(sortable.id);\n      }\n    }\n\n    this.sortables.set(sortable.id, sortable);\n  }\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n\n\n  deregister(sortable) {\n    this.sortables.delete(sortable.id);\n  }\n  /** Sets the active sort id and determines the new sort direction. */\n\n\n  sort(sortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({\n      active: this.active,\n      direction: this.direction\n    });\n  }\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n\n\n  getNextSortDirection(sortable) {\n    var _a, _b, _c;\n\n    if (!sortable) {\n      return '';\n    } // Get the sort direction cycle with the potential sortable overrides.\n\n\n    const disableClear = (_b = (_a = sortable === null || sortable === void 0 ? void 0 : sortable.disableClear) !== null && _a !== void 0 ? _a : this.disableClear) !== null && _b !== void 0 ? _b : !!((_c = this._defaultOptions) === null || _c === void 0 ? void 0 : _c.disableClear);\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear); // Get and return the next direction in the cycle\n\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n\n    if (nextDirectionIndex >= sortDirectionCycle.length) {\n      nextDirectionIndex = 0;\n    }\n\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n}\n\nMatSort.ɵfac = function MatSort_Factory(t) {\n  return new (t || MatSort)(i0.ɵɵdirectiveInject(MAT_SORT_DEFAULT_OPTIONS, 8));\n};\n\nMatSort.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatSort,\n  selectors: [[\"\", \"matSort\", \"\"]],\n  hostAttrs: [1, \"mat-sort\"],\n  inputs: {\n    disabled: [\"matSortDisabled\", \"disabled\"],\n    active: [\"matSortActive\", \"active\"],\n    start: [\"matSortStart\", \"start\"],\n    direction: [\"matSortDirection\", \"direction\"],\n    disableClear: [\"matSortDisableClear\", \"disableClear\"]\n  },\n  outputs: {\n    sortChange: \"matSortChange\"\n  },\n  exportAs: [\"matSort\"],\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSort, [{\n    type: Directive,\n    args: [{\n      selector: '[matSort]',\n      exportAs: 'matSort',\n      host: {\n        'class': 'mat-sort'\n      },\n      inputs: ['disabled: matSortDisabled']\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_SORT_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    active: [{\n      type: Input,\n      args: ['matSortActive']\n    }],\n    start: [{\n      type: Input,\n      args: ['matSortStart']\n    }],\n    direction: [{\n      type: Input,\n      args: ['matSortDirection']\n    }],\n    disableClear: [{\n      type: Input,\n      args: ['matSortDisableClear']\n    }],\n    sortChange: [{\n      type: Output,\n      args: ['matSortChange']\n    }]\n  });\n})();\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\n\n\nfunction getSortDirectionCycle(start, disableClear) {\n  let sortOrder = ['asc', 'desc'];\n\n  if (start == 'desc') {\n    sortOrder.reverse();\n  }\n\n  if (!disableClear) {\n    sortOrder.push('');\n  }\n\n  return sortOrder;\n} // Boilerplate for applying mixins to the sort header.\n\n/** @docs-private */\n\n\nconst _MatSortHeaderBase = mixinDisabled(class {});\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n\n\nclass MatSortHeader extends _MatSortHeaderBase {\n  constructor(\n  /**\n   * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\n   * @breaking-change 13.0.0\n   */\n  _intl, _changeDetectorRef, // `MatSort` is not optionally injected, but just asserted manually w/ better error.\n  // tslint:disable-next-line: lightweight-tokens\n  _sort, _columnDef, _focusMonitor, _elementRef,\n  /** @breaking-change 14.0.0 _ariaDescriber will be required. */\n  _ariaDescriber) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n    this._intl = _intl;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._sort = _sort;\n    this._columnDef = _columnDef;\n    this._focusMonitor = _focusMonitor;\n    this._elementRef = _elementRef;\n    this._ariaDescriber = _ariaDescriber;\n    /**\n     * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n     * provide an affordance that the header is sortable by showing on focus and hover.\n     */\n\n    this._showIndicatorHint = false;\n    /**\n     * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n     * position through the animation. If animations are currently disabled, the fromState is removed\n     * so that there is no animation displayed.\n     */\n\n    this._viewState = {};\n    /** The direction the arrow should be facing according to the current state. */\n\n    this._arrowDirection = '';\n    /**\n     * Whether the view state animation should show the transition between the `from` and `to` states.\n     */\n\n    this._disableViewStateAnimation = false;\n    /** Sets the position of the arrow that displays when sorted. */\n\n    this.arrowPosition = 'after'; // Default the action description to \"Sort\" because it's better than nothing.\n    // Without a description, the button's label comes from the sort header text content,\n    // which doesn't give any indication that it performs a sorting operation.\n\n    this._sortActionDescription = 'Sort';\n\n    if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._handleStateChanges();\n  }\n  /**\n   * Description applied to MatSortHeader's button element with aria-describedby. This text should\n   * describe the action that will occur when the user clicks the sort header.\n   */\n\n\n  get sortActionDescription() {\n    return this._sortActionDescription;\n  }\n\n  set sortActionDescription(value) {\n    this._updateSortActionDescription(value);\n  }\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n\n\n  get disableClear() {\n    return this._disableClear;\n  }\n\n  set disableClear(v) {\n    this._disableClear = coerceBooleanProperty(v);\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    } // Initialize the direction of the arrow and set the view state to be immediately that state.\n\n\n    this._updateArrowDirection();\n\n    this._setAnimationTransitionState({\n      toState: this._isSorted() ? 'active' : this._arrowDirection\n    });\n\n    this._sort.register(this);\n\n    this._sortButton = this._elementRef.nativeElement.querySelector('.mat-sort-header-container');\n\n    this._updateSortActionDescription(this._sortActionDescription);\n  }\n\n  ngAfterViewInit() {\n    // We use the focus monitor because we also want to style\n    // things differently based on the focus origin.\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n      const newState = !!origin;\n\n      if (newState !== this._showIndicatorHint) {\n        this._setIndicatorHintVisible(newState);\n\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n\n    this._sort.deregister(this);\n\n    this._rerenderSubscription.unsubscribe();\n  }\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n\n\n  _setIndicatorHintVisible(visible) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) {\n      return;\n    }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({\n          fromState: this._arrowDirection,\n          toState: 'hint'\n        });\n      } else {\n        this._setAnimationTransitionState({\n          fromState: 'hint',\n          toState: this._arrowDirection\n        });\n      }\n    }\n  }\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n\n\n  _setAnimationTransitionState(viewState) {\n    this._viewState = viewState || {}; // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n\n    if (this._disableViewStateAnimation) {\n      this._viewState = {\n        toState: viewState.toState\n      };\n    }\n  }\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n\n\n  _toggleOnInteraction() {\n    this._sort.sort(this); // Do not show the animation if the header was already shown in the right position.\n\n\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n  }\n\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  _handleKeydown(event) {\n    if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\n      event.preventDefault();\n\n      this._toggleOnInteraction();\n    }\n  }\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n\n\n  _isSorted() {\n    return this._sort.active == this.id && (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n\n\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n  /** Returns the arrow position state (opacity, translation). */\n\n\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n\n\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n\n\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) {\n      return 'none';\n    }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n  /** Whether the arrow inside the sort header should be rendered. */\n\n\n  _renderArrow() {\n    return !this._isDisabled() || this._isSorted();\n  }\n\n  _updateSortActionDescription(newDescription) {\n    var _a, _b; // We use AriaDescriber for the sort button instead of setting an `aria-label` because some\n    // screen readers (notably VoiceOver) will read both the column header *and* the button's label\n    // for every *cell* in the table, creating a lot of unnecessary noise.\n    // If _sortButton is undefined, the component hasn't been initialized yet so there's\n    // nothing to update in the DOM.\n\n\n    if (this._sortButton) {\n      // removeDescription will no-op if there is no existing message.\n      // TODO(jelbourn): remove optional chaining when AriaDescriber is required.\n      (_a = this._ariaDescriber) === null || _a === void 0 ? void 0 : _a.removeDescription(this._sortButton, this._sortActionDescription);\n      (_b = this._ariaDescriber) === null || _b === void 0 ? void 0 : _b.describe(this._sortButton, newDescription);\n    }\n\n    this._sortActionDescription = newDescription;\n  }\n  /** Handles changes in the sorting state. */\n\n\n  _handleStateChanges() {\n    this._rerenderSubscription = merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes).subscribe(() => {\n      if (this._isSorted()) {\n        this._updateArrowDirection(); // Do not show the animation if the header was already shown in the right position.\n\n\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n          this._disableViewStateAnimation = true;\n        }\n\n        this._setAnimationTransitionState({\n          fromState: this._arrowDirection,\n          toState: 'active'\n        });\n\n        this._showIndicatorHint = false;\n      } // If this header was recently active and now no longer sorted, animate away the arrow.\n\n\n      if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n        this._disableViewStateAnimation = false;\n\n        this._setAnimationTransitionState({\n          fromState: 'active',\n          toState: this._arrowDirection\n        });\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n\nMatSortHeader.ɵfac = function MatSortHeader_Factory(t) {\n  return new (t || MatSortHeader)(i0.ɵɵdirectiveInject(MatSortHeaderIntl), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MatSort, 8), i0.ɵɵdirectiveInject('MAT_SORT_HEADER_COLUMN_DEF', 8), i0.ɵɵdirectiveInject(i3.FocusMonitor), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.AriaDescriber, 8));\n};\n\nMatSortHeader.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatSortHeader,\n  selectors: [[\"\", \"mat-sort-header\", \"\"]],\n  hostAttrs: [1, \"mat-sort-header\"],\n  hostVars: 3,\n  hostBindings: function MatSortHeader_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatSortHeader_click_HostBindingHandler() {\n        return ctx._handleClick();\n      })(\"keydown\", function MatSortHeader_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"mouseenter\", function MatSortHeader_mouseenter_HostBindingHandler() {\n        return ctx._setIndicatorHintVisible(true);\n      })(\"mouseleave\", function MatSortHeader_mouseleave_HostBindingHandler() {\n        return ctx._setIndicatorHintVisible(false);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-sort\", ctx._getAriaSortAttribute());\n      i0.ɵɵclassProp(\"mat-sort-header-disabled\", ctx._isDisabled());\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    id: [\"mat-sort-header\", \"id\"],\n    arrowPosition: \"arrowPosition\",\n    start: \"start\",\n    sortActionDescription: \"sortActionDescription\",\n    disableClear: \"disableClear\"\n  },\n  exportAs: [\"matSortHeader\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  attrs: _c0,\n  ngContentSelectors: _c1,\n  decls: 4,\n  vars: 7,\n  consts: [[1, \"mat-sort-header-container\", \"mat-focus-indicator\"], [1, \"mat-sort-header-content\"], [\"class\", \"mat-sort-header-arrow\", 4, \"ngIf\"], [1, \"mat-sort-header-arrow\"], [1, \"mat-sort-header-stem\"], [1, \"mat-sort-header-indicator\"], [1, \"mat-sort-header-pointer-left\"], [1, \"mat-sort-header-pointer-right\"], [1, \"mat-sort-header-pointer-middle\"]],\n  template: function MatSortHeader_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, MatSortHeader_div_3_Template, 6, 6, \"div\", 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"mat-sort-header-sorted\", ctx._isSorted())(\"mat-sort-header-position-before\", ctx.arrowPosition == \"before\");\n      i0.ɵɵattribute(\"tabindex\", ctx._isDisabled() ? null : 0)(\"role\", ctx._isDisabled() ? null : \"button\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx._renderArrow());\n    }\n  },\n  directives: [i4.NgIf],\n  styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSortHeader, [{\n    type: Component,\n    args: [{\n      selector: '[mat-sort-header]',\n      exportAs: 'matSortHeader',\n      host: {\n        'class': 'mat-sort-header',\n        '(click)': '_handleClick()',\n        '(keydown)': '_handleKeydown($event)',\n        '(mouseenter)': '_setIndicatorHintVisible(true)',\n        '(mouseleave)': '_setIndicatorHintVisible(false)',\n        '[attr.aria-sort]': '_getAriaSortAttribute()',\n        '[class.mat-sort-header-disabled]': '_isDisabled()'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disabled'],\n      animations: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren],\n      template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     [attr.role]=\\\"_isDisabled() ? null : 'button'\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\",\n      styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatSortHeaderIntl\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: MatSort,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['MAT_SORT_HEADER_COLUMN_DEF']\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: i3.FocusMonitor\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i3.AriaDescriber,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, {\n    id: [{\n      type: Input,\n      args: ['mat-sort-header']\n    }],\n    arrowPosition: [{\n      type: Input\n    }],\n    start: [{\n      type: Input\n    }],\n    sortActionDescription: [{\n      type: Input\n    }],\n    disableClear: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatSortModule {}\n\nMatSortModule.ɵfac = function MatSortModule_Factory(t) {\n  return new (t || MatSortModule)();\n};\n\nMatSortModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatSortModule\n});\nMatSortModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n  imports: [[CommonModule, MatCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatSortModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule],\n      exports: [MatSort, MatSortHeader],\n      declarations: [MatSort, MatSortHeader],\n      providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_SORT_DEFAULT_OPTIONS, MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };","map":{"version":3,"sources":["D:/angular_update/ictfax/node_modules/@angular/material/fesm2015/sort.mjs"],"names":["i0","Injectable","Optional","SkipSelf","InjectionToken","EventEmitter","Directive","Inject","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","NgModule","coerceBooleanProperty","SPACE","ENTER","AnimationDurations","AnimationCurves","mixinInitialized","mixinDisabled","MatCommonModule","Subject","merge","trigger","state","style","transition","animate","keyframes","query","animateChild","i3","i4","CommonModule","SORT_ANIMATION_TRANSITION","ENTERING","STANDARD_CURVE","matSortAnimations","indicator","transform","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","allowChildren","optional","getSortDuplicateSortableIdError","id","Error","getSortHeaderNotContainedWithinSortError","getSortHeaderMissingIdError","getSortInvalidDirectionError","direction","MatSortHeaderIntl","constructor","changes","ɵfac","ɵprov","type","args","providedIn","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","parentIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_DEFAULT_OPTIONS","_MatSortBase","MatSort","_defaultOptions","sortables","Map","_stateChanges","start","_direction","sortChange","ngDevMode","disableClear","_disableClear","v","register","sortable","has","set","deregister","delete","sort","active","getNextSortDirection","emit","_a","_b","_c","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","length","ngOnInit","_markInitialized","ngOnChanges","next","ngOnDestroy","complete","ɵdir","selector","exportAs","host","inputs","undefined","decorators","sortOrder","reverse","push","_MatSortHeaderBase","MatSortHeader","_intl","_changeDetectorRef","_sort","_columnDef","_focusMonitor","_elementRef","_ariaDescriber","_showIndicatorHint","_viewState","_arrowDirection","_disableViewStateAnimation","_sortActionDescription","_handleStateChanges","sortActionDescription","value","_updateSortActionDescription","name","_updateArrowDirection","_setAnimationTransitionState","toState","_isSorted","_sortButton","nativeElement","querySelector","ngAfterViewInit","monitor","subscribe","origin","newState","_setIndicatorHintVisible","markForCheck","stopMonitoring","_rerenderSubscription","unsubscribe","visible","_isDisabled","fromState","viewState","_toggleOnInteraction","_handleClick","_handleKeydown","event","keyCode","preventDefault","_getArrowDirectionState","_getArrowViewState","disabled","_getAriaSortAttribute","_renderArrow","newDescription","removeDescription","describe","ChangeDetectorRef","FocusMonitor","ElementRef","AriaDescriber","ɵcmp","NgIf","encapsulation","None","changeDetection","OnPush","animations","template","styles","MatSortModule","ɵmod","ɵinj","imports","exports","declarations","providers"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, Inject, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { AnimationDurations, AnimationCurves, mixinInitialized, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport * as i3 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nconst matSortAnimations = {\n    /** Animation that moves the sort indicator. */\n    indicator: trigger('indicator', [\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n    leftPointer: trigger('leftPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n    rightPointer: trigger('rightPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /** Animation that controls the arrow opacity. */\n    arrowOpacity: trigger('arrowOpacity', [\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: 0.54 })),\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(-25%)' }), style({ transform: 'translateY(0)' })]))),\n        // Hint Center => Hidden Below\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(0)' }), style({ transform: 'translateY(25%)' })]))),\n        // Hidden Below => Hint Center\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(25%)' }), style({ transform: 'translateY(0)' })]))),\n        // Hint Center => Hidden Above\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(0)' }), style({ transform: 'translateY(-25%)' })]))),\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\n    ]),\n    /** Necessary trigger that calls animate on children animations. */\n    allowChildren: trigger('allowChildren', [\n        transition('* <=> *', [query('@*', animateChild(), { optional: true })]),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/** @docs-private */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/** @docs-private */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/** @docs-private */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nclass MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n    }\n}\nMatSortHeaderIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortHeaderIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMatSortHeaderIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortHeaderIntl, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortHeaderIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** @docs-private */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/** @docs-private */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-sort`. */\nconst MAT_SORT_DEFAULT_OPTIONS = new InjectionToken('MAT_SORT_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nconst _MatSortBase = mixinInitialized(mixinDisabled(class {\n}));\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nclass MatSort extends _MatSortBase {\n    constructor(_defaultOptions) {\n        super();\n        this._defaultOptions = _defaultOptions;\n        /** Collection of all registered sortables that this directive manages. */\n        this.sortables = new Map();\n        /** Used to notify any child components listening to state changes. */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /** Event emitted when the user changes either the active sort or sort direction. */\n        this.sortChange = new EventEmitter();\n    }\n    /** The sort direction of the currently active MatSortable. */\n    get direction() {\n        return this._direction;\n    }\n    set direction(direction) {\n        if (direction &&\n            direction !== 'asc' &&\n            direction !== 'desc' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     */\n    get disableClear() {\n        return this._disableClear;\n    }\n    set disableClear(v) {\n        this._disableClear = coerceBooleanProperty(v);\n    }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    register(sortable) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!sortable.id) {\n                throw getSortHeaderMissingIdError();\n            }\n            if (this.sortables.has(sortable.id)) {\n                throw getSortDuplicateSortableIdError(sortable.id);\n            }\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    getNextSortDirection(sortable) {\n        var _a, _b, _c;\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        const disableClear = (_b = (_a = sortable === null || sortable === void 0 ? void 0 : sortable.disableClear) !== null && _a !== void 0 ? _a : this.disableClear) !== null && _b !== void 0 ? _b : !!((_c = this._defaultOptions) === null || _c === void 0 ? void 0 : _c.disableClear);\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    ngOnInit() {\n        this._markInitialized();\n    }\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatSort.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSort, deps: [{ token: MAT_SORT_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatSort.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSort, selector: \"[matSort]\", inputs: { disabled: [\"matSortDisabled\", \"disabled\"], active: [\"matSortActive\", \"active\"], start: [\"matSortStart\", \"start\"], direction: [\"matSortDirection\", \"direction\"], disableClear: [\"matSortDisableClear\", \"disableClear\"] }, outputs: { sortChange: \"matSortChange\" }, host: { classAttribute: \"mat-sort\" }, exportAs: [\"matSort\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSort, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matSort]',\n                    exportAs: 'matSort',\n                    host: { 'class': 'mat-sort' },\n                    inputs: ['disabled: matSortDisabled'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_SORT_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { active: [{\n                type: Input,\n                args: ['matSortActive']\n            }], start: [{\n                type: Input,\n                args: ['matSortStart']\n            }], direction: [{\n                type: Input,\n                args: ['matSortDirection']\n            }], disableClear: [{\n                type: Input,\n                args: ['matSortDisableClear']\n            }], sortChange: [{\n                type: Output,\n                args: ['matSortChange']\n            }] } });\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start, disableClear) {\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nconst _MatSortHeaderBase = mixinDisabled(class {\n});\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderBase {\n    constructor(\n    /**\n     * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\n     * @breaking-change 13.0.0\n     */\n    _intl, _changeDetectorRef, \n    // `MatSort` is not optionally injected, but just asserted manually w/ better error.\n    // tslint:disable-next-line: lightweight-tokens\n    _sort, _columnDef, _focusMonitor, _elementRef, \n    /** @breaking-change 14.0.0 _ariaDescriber will be required. */\n    _ariaDescriber) {\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._sort = _sort;\n        this._columnDef = _columnDef;\n        this._focusMonitor = _focusMonitor;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        this._showIndicatorHint = false;\n        /**\n         * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n         * position through the animation. If animations are currently disabled, the fromState is removed\n         * so that there is no animation displayed.\n         */\n        this._viewState = {};\n        /** The direction the arrow should be facing according to the current state. */\n        this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        this._disableViewStateAnimation = false;\n        /** Sets the position of the arrow that displays when sorted. */\n        this.arrowPosition = 'after';\n        // Default the action description to \"Sort\" because it's better than nothing.\n        // Without a description, the button's label comes from the sort header text content,\n        // which doesn't give any indication that it performs a sorting operation.\n        this._sortActionDescription = 'Sort';\n        if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        this._handleStateChanges();\n    }\n    /**\n     * Description applied to MatSortHeader's button element with aria-describedby. This text should\n     * describe the action that will occur when the user clicks the sort header.\n     */\n    get sortActionDescription() {\n        return this._sortActionDescription;\n    }\n    set sortActionDescription(value) {\n        this._updateSortActionDescription(value);\n    }\n    /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n    get disableClear() {\n        return this._disableClear;\n    }\n    set disableClear(v) {\n        this._disableClear = coerceBooleanProperty(v);\n    }\n    ngOnInit() {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({\n            toState: this._isSorted() ? 'active' : this._arrowDirection,\n        });\n        this._sort.register(this);\n        this._sortButton = this._elementRef.nativeElement.querySelector('.mat-sort-header-container');\n        this._updateSortActionDescription(this._sortActionDescription);\n    }\n    ngAfterViewInit() {\n        // We use the focus monitor because we also want to style\n        // things differently based on the focus origin.\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n            const newState = !!origin;\n            if (newState !== this._showIndicatorHint) {\n                this._setIndicatorHintVisible(newState);\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    _setAnimationTransitionState(viewState) {\n        this._viewState = viewState || {};\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    }\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    _toggleOnInteraction() {\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n    }\n    _handleClick() {\n        if (!this._isDisabled()) {\n            this._sort.sort(this);\n        }\n    }\n    _handleKeydown(event) {\n        if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\n            event.preventDefault();\n            this._toggleOnInteraction();\n        }\n    }\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    _isSorted() {\n        return (this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc'));\n    }\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    _getArrowDirectionState() {\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /** Returns the arrow position state (opacity, translation). */\n    _getArrowViewState() {\n        const fromState = this._viewState.fromState;\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n    }\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n            return 'none';\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /** Whether the arrow inside the sort header should be rendered. */\n    _renderArrow() {\n        return !this._isDisabled() || this._isSorted();\n    }\n    _updateSortActionDescription(newDescription) {\n        var _a, _b;\n        // We use AriaDescriber for the sort button instead of setting an `aria-label` because some\n        // screen readers (notably VoiceOver) will read both the column header *and* the button's label\n        // for every *cell* in the table, creating a lot of unnecessary noise.\n        // If _sortButton is undefined, the component hasn't been initialized yet so there's\n        // nothing to update in the DOM.\n        if (this._sortButton) {\n            // removeDescription will no-op if there is no existing message.\n            // TODO(jelbourn): remove optional chaining when AriaDescriber is required.\n            (_a = this._ariaDescriber) === null || _a === void 0 ? void 0 : _a.removeDescription(this._sortButton, this._sortActionDescription);\n            (_b = this._ariaDescriber) === null || _b === void 0 ? void 0 : _b.describe(this._sortButton, newDescription);\n        }\n        this._sortActionDescription = newDescription;\n    }\n    /** Handles changes in the sorting state. */\n    _handleStateChanges() {\n        this._rerenderSubscription = merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes).subscribe(() => {\n            if (this._isSorted()) {\n                this._updateArrowDirection();\n                // Do not show the animation if the header was already shown in the right position.\n                if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n                    this._disableViewStateAnimation = true;\n                }\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'active' });\n                this._showIndicatorHint = false;\n            }\n            // If this header was recently active and now no longer sorted, animate away the arrow.\n            if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                this._disableViewStateAnimation = false;\n                this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n}\nMatSortHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortHeader, deps: [{ token: MatSortHeaderIntl }, { token: i0.ChangeDetectorRef }, { token: MatSort, optional: true }, { token: 'MAT_SORT_HEADER_COLUMN_DEF', optional: true }, { token: i3.FocusMonitor }, { token: i0.ElementRef }, { token: i3.AriaDescriber, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatSortHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSortHeader, selector: \"[mat-sort-header]\", inputs: { disabled: \"disabled\", id: [\"mat-sort-header\", \"id\"], arrowPosition: \"arrowPosition\", start: \"start\", sortActionDescription: \"sortActionDescription\", disableClear: \"disableClear\" }, host: { listeners: { \"click\": \"_handleClick()\", \"keydown\": \"_handleKeydown($event)\", \"mouseenter\": \"_setIndicatorHintVisible(true)\", \"mouseleave\": \"_setIndicatorHintVisible(false)\" }, properties: { \"attr.aria-sort\": \"_getAriaSortAttribute()\", \"class.mat-sort-header-disabled\": \"_isDisabled()\" }, classAttribute: \"mat-sort-header\" }, exportAs: [\"matSortHeader\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     [attr.role]=\\\"_isDisabled() ? null : 'button'\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"], directives: [{ type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        matSortAnimations.indicator,\n        matSortAnimations.leftPointer,\n        matSortAnimations.rightPointer,\n        matSortAnimations.arrowOpacity,\n        matSortAnimations.arrowPosition,\n        matSortAnimations.allowChildren,\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortHeader, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-sort-header]', exportAs: 'matSortHeader', host: {\n                        'class': 'mat-sort-header',\n                        '(click)': '_handleClick()',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(mouseenter)': '_setIndicatorHintVisible(true)',\n                        '(mouseleave)': '_setIndicatorHintVisible(false)',\n                        '[attr.aria-sort]': '_getAriaSortAttribute()',\n                        '[class.mat-sort-header-disabled]': '_isDisabled()',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disabled'], animations: [\n                        matSortAnimations.indicator,\n                        matSortAnimations.leftPointer,\n                        matSortAnimations.rightPointer,\n                        matSortAnimations.arrowOpacity,\n                        matSortAnimations.arrowPosition,\n                        matSortAnimations.allowChildren,\n                    ], template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     [attr.role]=\\\"_isDisabled() ? null : 'button'\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatSortHeaderIntl }, { type: i0.ChangeDetectorRef }, { type: MatSort, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: ['MAT_SORT_HEADER_COLUMN_DEF']\n                    }, {\n                        type: Optional\n                    }] }, { type: i3.FocusMonitor }, { type: i0.ElementRef }, { type: i3.AriaDescriber, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { id: [{\n                type: Input,\n                args: ['mat-sort-header']\n            }], arrowPosition: [{\n                type: Input\n            }], start: [{\n                type: Input\n            }], sortActionDescription: [{\n                type: Input\n            }], disableClear: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSortModule {\n}\nMatSortModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSortModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortModule, declarations: [MatSort, MatSortHeader], imports: [CommonModule, MatCommonModule], exports: [MatSort, MatSortHeader] });\nMatSortModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortModule, providers: [MAT_SORT_HEADER_INTL_PROVIDER], imports: [[CommonModule, MatCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule],\n                    exports: [MatSort, MatSortHeader],\n                    declarations: [MatSort, MatSortHeader],\n                    providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SORT_DEFAULT_OPTIONS, MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };\n"]},"metadata":{},"sourceType":"module"}