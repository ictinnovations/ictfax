{"ast":null,"code":"import { Headers } from '@angular/http';\nimport { Http, RequestOptions, ResponseContentType } from '@angular/http';\nimport { Document } from './document';\nimport { AppService } from '../../../../app/app.service';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/toPromise';\nimport { getFileNameFromResponseContentDisposition, saveFile } from '../../../file-download-helper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"../../../../app/app.service\";\nexport let DocumentService = /*#__PURE__*/(() => {\n  class DocumentService {\n    constructor(http, app_service) {\n      this.http = http;\n      this.app_service = app_service;\n      this.aDocument = [];\n      this.document_id = null;\n      this.document = new Document();\n      this.URL = `${this.app_service.apiUrlDocument}/${this.document_id}/media`;\n    }\n\n    get_DocumentList() {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      return this.http.get(this.app_service.apiUrlDocument, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    get_DocumentData(document_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const url5 = `${this.app_service.apiUrlDocument}/${document_id}`;\n      return this.http.get(url5, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    get_Documentdownload(document_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      options.responseType = ResponseContentType.Blob;\n      const url = `${this.app_service.apiUrlDocument}/${document_id}/media`;\n      this.http.get(url, options).subscribe(res => {\n        const fileName = getFileNameFromResponseContentDisposition(res);\n        saveFile(res.blob(), fileName);\n      }, error => {\n        this.app_service.downloadError(error);\n      });\n    }\n\n    add_Document(document) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(document);\n      const addDocumentUrl = `${this.app_service.apiUrlDocument}`;\n      return this.http.post(addDocumentUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    update_Document(document) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(document);\n      const updateDocumentUrl = `${this.app_service.apiUrlDocument}/${document.document_id}`;\n      return this.http.put(updateDocumentUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    upload_Document(document) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(document);\n      const uploadDocumentUrl = `${this.app_service.apiUrlDocument}/${document.document_id}/media`;\n      return this.http.put(uploadDocumentUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    delete_Document(document_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const deleteDocumentUrl = `${this.app_service.apiUrlDocument}/${document_id}`;\n      return this.http.delete(deleteDocumentUrl, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    handleError(error) {\n      console.error('An error occurred', error); // for demo purposes only\n\n      return Promise.reject(error.message || error);\n    }\n\n  }\n\n  DocumentService.ɵfac = function DocumentService_Factory(t) {\n    return new (t || DocumentService)(i0.ɵɵinject(i1.Http), i0.ɵɵinject(i2.AppService));\n  };\n\n  DocumentService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DocumentService,\n    factory: DocumentService.ɵfac\n  });\n  return DocumentService;\n})();","map":null,"metadata":{},"sourceType":"module"}