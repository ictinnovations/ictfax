{"ast":null,"code":"import { Headers } from '@angular/http';\nimport { Http, RequestOptions } from '@angular/http';\nimport { Extension } from './extension';\nimport { AppService } from '../../../app/app.service';\nimport 'rxjs/add/operator/toPromise';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"../../../app/app.service\";\nexport let ExtensionService = /*#__PURE__*/(() => {\n  class ExtensionService {\n    constructor(http, app_service) {\n      this.http = http;\n      this.app_service = app_service;\n      this.aExtension = [];\n      this.account_id = null;\n      this.extension = new Extension();\n    }\n\n    get_ExtensionList() {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const getUrl = `${this.app_service.apiUrlAccounts}?type=extension`;\n      return this.http.get(getUrl, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    get_ExtensionData(account_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const url5 = `${this.app_service.apiUrlAccounts}/${account_id}`;\n      return this.http.get(url5, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    add_Extension(account) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(account);\n      const addUrl = `${this.app_service.apiUrlAccounts}`;\n      return this.http.post(addUrl, body, options).toPromise().then(response => response.json()).catch(this.handleError);\n    }\n\n    update_Extension(account) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(account);\n      const updateUrl = `${this.app_service.apiUrlAccounts}/${account.account_id}`;\n      return this.http.put(updateUrl, body, options).toPromise().then(response => response.json()).catch(this.handleError);\n    }\n\n    delete_Extension(account_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const deleteUrl = `${this.app_service.apiUrlAccounts}/${account_id}`;\n      return this.http.delete(deleteUrl, options).toPromise().then(response => response.json()).catch(this.handleError);\n    }\n\n    get_Settings(account_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const url5 = `${this.app_service.apiUrlAccounts}/${account_id}/settings/emailtofax_coversheet`;\n      return this.http.get(url5, options).toPromise().then(response => response.json()).catch(err => this.handleError(err));\n    }\n\n    update_Settings(account_id, settings) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(settings);\n      const updateUrl = `${this.app_service.apiUrlAccounts}/${account_id}/settings/emailtofax_coversheet`;\n      return this.http.put(updateUrl, body, options).toPromise().then(response => response.json()).catch(this.handleError);\n    }\n\n    delete_Settings(account_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const deleteUrl = `${this.app_service.apiUrlAccounts}/${account_id}/settings/emailtofax_coversheet`;\n      return this.http.delete(deleteUrl, options).toPromise().then(response => response.json()).catch(err => this.handleError(err));\n    }\n\n    handleError(error) {\n      console.error('An error occurred', error); // for demo purposes only\n\n      return Promise.reject(error.message || error);\n    }\n\n  }\n\n  ExtensionService.ɵfac = function ExtensionService_Factory(t) {\n    return new (t || ExtensionService)(i0.ɵɵinject(i1.Http), i0.ɵɵinject(i2.AppService));\n  };\n\n  ExtensionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ExtensionService,\n    factory: ExtensionService.ɵfac\n  });\n  return ExtensionService;\n})();","map":null,"metadata":{},"sourceType":"module"}