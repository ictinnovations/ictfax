{"ast":null,"code":"import * as i1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i7 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Input, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i6 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i3 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport * as i5 from '@angular/cdk/bidi';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n/** Time in ms to throttle repositioning after scroll events. */\n\nconst _c0 = [\"tooltip\"];\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\n\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\n\nconst passiveListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\n\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\n\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\n\n\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition({\n    scrollThrottle: SCROLL_THROTTLE_MS\n  });\n}\n/** @docs-private */\n\n\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\n\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n\nclass _MatTooltipBase {\n  constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n    this._overlay = _overlay;\n    this._elementRef = _elementRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewContainerRef = _viewContainerRef;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    this._ariaDescriber = _ariaDescriber;\n    this._focusMonitor = _focusMonitor;\n    this._dir = _dir;\n    this._defaultOptions = _defaultOptions;\n    this._position = 'below';\n    this._disabled = false;\n    this._viewInitialized = false;\n    this._pointerExitEventsInitialized = false;\n    this._viewportMargin = 8;\n    this._cssClassPrefix = 'mat';\n    this._showDelay = this._defaultOptions.showDelay;\n    this._hideDelay = this._defaultOptions.hideDelay;\n    /**\n     * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n     * uses a long press gesture to show and hide, however it can conflict with the native browser\n     * gestures. To work around the conflict, Angular Material disables native gestures on the\n     * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n     * elements). The different values for this option configure the touch event handling as follows:\n     * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n     *   browser gestures on particular elements. In particular, it allows text selection on inputs\n     *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n     * - `on` - Enables touch gestures for all elements and disables native\n     *   browser gestures with no exceptions.\n     * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n     *   showing on touch devices.\n     */\n\n    this.touchGestures = 'auto';\n    this._message = '';\n    /** Manually-bound passive event listeners. */\n\n    this._passiveListeners = [];\n    /** Emits when the component is destroyed. */\n\n    this._destroyed = new Subject();\n    this._scrollStrategy = scrollStrategy;\n    this._document = _document;\n\n    if (_defaultOptions) {\n      if (_defaultOptions.position) {\n        this.position = _defaultOptions.position;\n      }\n\n      if (_defaultOptions.touchGestures) {\n        this.touchGestures = _defaultOptions.touchGestures;\n      }\n    }\n\n    _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      if (this._overlayRef) {\n        this._updatePosition(this._overlayRef);\n      }\n    });\n  }\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n\n\n  get position() {\n    return this._position;\n  }\n\n  set position(value) {\n    var _a;\n\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition(this._overlayRef);\n\n        (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n  /** Disables the display of the tooltip. */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value); // If tooltip is disabled, hide immediately.\n\n    if (this._disabled) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n    }\n  }\n  /** The default delay in ms before showing the tooltip after show is called */\n\n\n  get showDelay() {\n    return this._showDelay;\n  }\n\n  set showDelay(value) {\n    this._showDelay = coerceNumberProperty(value);\n  }\n  /** The default delay in ms before hiding the tooltip after hide is called */\n\n\n  get hideDelay() {\n    return this._hideDelay;\n  }\n\n  set hideDelay(value) {\n    this._hideDelay = coerceNumberProperty(value);\n\n    if (this._tooltipInstance) {\n      this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n    }\n  }\n  /** The message to be displayed in the tooltip */\n\n\n  get message() {\n    return this._message;\n  }\n\n  set message(value) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip'); // If the message is not a string (e.g. number), convert it to a string and trim it.\n    // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n    // away the string-conversion: https://github.com/angular/components/issues/20684\n\n\n    this._message = value != null ? String(value).trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._setupPointerEnterEventsIfNeeded();\n\n      this._updateTooltipMessage();\n\n      this._ngZone.runOutsideAngular(() => {\n        // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n        // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n        // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n        // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n        Promise.resolve().then(() => {\n          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n        });\n      });\n    }\n  }\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n\n\n  get tooltipClass() {\n    return this._tooltipClass;\n  }\n\n  set tooltipClass(value) {\n    this._tooltipClass = value;\n\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  ngAfterViewInit() {\n    // This needs to happen after view init so the initial values for all inputs have been set.\n    this._viewInitialized = true;\n\n    this._setupPointerEnterEventsIfNeeded();\n\n    this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        this._ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        this._ngZone.run(() => this.show());\n      }\n    });\n  }\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n\n\n  ngOnDestroy() {\n    const nativeElement = this._elementRef.nativeElement;\n    clearTimeout(this._touchstartTimeout);\n\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n\n      this._tooltipInstance = null;\n    } // Clean up the event listeners set in the constructor\n\n\n    this._passiveListeners.forEach(([event, listener]) => {\n      nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n    });\n\n    this._passiveListeners.length = 0;\n\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n\n    this._focusMonitor.stopMonitoring(nativeElement);\n  }\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n\n\n  show(delay = this.showDelay) {\n    if (this.disabled || !this.message || this._isTooltipVisible() && !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n\n    this._portal = this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n    const instance = this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    instance._triggerElement = this._elementRef.nativeElement;\n    instance._mouseLeaveHideDelay = this._hideDelay;\n    instance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n\n    this._setTooltipClass(this._tooltipClass);\n\n    this._updateTooltipMessage();\n\n    instance.show(delay);\n  }\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n\n\n  hide(delay = this.hideDelay) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n  /** Shows/hides the tooltip */\n\n\n  toggle() {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n  /** Returns true if the tooltip is currently visible to the user */\n\n\n  _isTooltipVisible() {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n  /** Create the overlay config and position strategy */\n\n\n  _createOverlay() {\n    var _a;\n\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef); // Create connected position strategy that listens for scroll events to reposition.\n\n\n    const strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`).withFlexibleDimensions(false).withViewportMargin(this._viewportMargin).withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      this._updateCurrentPositionClass(change.connectionPair);\n\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition(this._overlayRef);\n\n    this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());\n\n    this._overlayRef.outsidePointerEvents().pipe(takeUntil(this._destroyed)).subscribe(() => {\n      var _a;\n\n      return (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a._handleBodyInteraction();\n    });\n\n    this._overlayRef.keydownEvents().pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._ngZone.run(() => this.hide(0));\n      }\n    });\n\n    if ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.disableTooltipInteractivity) {\n      this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n    }\n\n    return this._overlayRef;\n  }\n  /** Detaches the currently-attached tooltip. */\n\n\n  _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n  /** Updates the position of the current tooltip. */\n\n\n  _updatePosition(overlayRef) {\n    const position = overlayRef.getConfig().positionStrategy;\n\n    const origin = this._getOrigin();\n\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)), this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback))]);\n  }\n  /** Adds the configured offset to a position. Used as a hook for child classes. */\n\n\n  _addOffset(position) {\n    return position;\n  }\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n\n\n  _getOrigin() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {\n        originX: 'center',\n        originY: position == 'above' ? 'top' : 'bottom'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      originPosition = {\n        originX: 'start',\n        originY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      originPosition = {\n        originX: 'end',\n        originY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {\n      x,\n      y\n    } = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {\n        originX: x,\n        originY: y\n      }\n    };\n  }\n  /** Returns the overlay position and a fallback position based on the user's preference */\n\n\n  _getOverlayPosition() {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition;\n\n    if (position == 'above') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'bottom'\n      };\n    } else if (position == 'below') {\n      overlayPosition = {\n        overlayX: 'center',\n        overlayY: 'top'\n      };\n    } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'end',\n        overlayY: 'center'\n      };\n    } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n      overlayPosition = {\n        overlayX: 'start',\n        overlayY: 'center'\n      };\n    } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {\n      x,\n      y\n    } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {\n        overlayX: x,\n        overlayY: y\n      }\n    };\n  }\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n\n\n  _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef.updatePosition();\n        }\n      });\n    }\n  }\n  /** Updates the tooltip class */\n\n\n  _setTooltipClass(tooltipClass) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n\n      this._tooltipInstance._markForCheck();\n    }\n  }\n  /** Inverts an overlay position. */\n\n\n  _invertPosition(x, y) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n  /** Updates the class on the overlay panel based on the current position of the tooltip. */\n\n\n  _updateCurrentPositionClass(connectionPair) {\n    const {\n      overlayY,\n      originX,\n      originY\n    } = connectionPair;\n    let newPosition; // If the overlay is in the middle along the Y axis,\n    // it means that it's either before or after.\n\n    if (overlayY === 'center') {\n      // Note that since this information is used for styling, we want to\n      // resolve `start` and `end` to their real values, otherwise consumers\n      // would have to remember to do it themselves on each consumption.\n      if (this._dir && this._dir.value === 'rtl') {\n        newPosition = originX === 'end' ? 'left' : 'right';\n      } else {\n        newPosition = originX === 'start' ? 'left' : 'right';\n      }\n    } else {\n      newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n    }\n\n    if (newPosition !== this._currentPosition) {\n      const overlayRef = this._overlayRef;\n\n      if (overlayRef) {\n        const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n        overlayRef.removePanelClass(classPrefix + this._currentPosition);\n        overlayRef.addPanelClass(classPrefix + newPosition);\n      }\n\n      this._currentPosition = newPosition;\n    }\n  }\n  /** Binds the pointer events to the tooltip trigger. */\n\n\n  _setupPointerEnterEventsIfNeeded() {\n    // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n    if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {\n      return;\n    } // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n\n\n    if (this._platformSupportsMouseEvents()) {\n      this._passiveListeners.push(['mouseenter', () => {\n        this._setupPointerExitEventsIfNeeded();\n\n        this.show();\n      }]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n\n      this._passiveListeners.push(['touchstart', () => {\n        // Note that it's important that we don't `preventDefault` here,\n        // because it can prevent click events from firing on the element.\n        this._setupPointerExitEventsIfNeeded();\n\n        clearTimeout(this._touchstartTimeout);\n        this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n      }]);\n    }\n\n    this._addListeners(this._passiveListeners);\n  }\n\n  _setupPointerExitEventsIfNeeded() {\n    if (this._pointerExitEventsInitialized) {\n      return;\n    }\n\n    this._pointerExitEventsInitialized = true;\n    const exitListeners = [];\n\n    if (this._platformSupportsMouseEvents()) {\n      exitListeners.push(['mouseleave', event => {\n        var _a;\n\n        const newTarget = event.relatedTarget;\n\n        if (!newTarget || !((_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.overlayElement.contains(newTarget))) {\n          this.hide();\n        }\n      }], ['wheel', event => this._wheelListener(event)]);\n    } else if (this.touchGestures !== 'off') {\n      this._disableNativeGesturesIfNecessary();\n\n      const touchendListener = () => {\n        clearTimeout(this._touchstartTimeout);\n        this.hide(this._defaultOptions.touchendHideDelay);\n      };\n\n      exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n    }\n\n    this._addListeners(exitListeners);\n\n    this._passiveListeners.push(...exitListeners);\n  }\n\n  _addListeners(listeners) {\n    listeners.forEach(([event, listener]) => {\n      this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n    });\n  }\n\n  _platformSupportsMouseEvents() {\n    return !this._platform.IOS && !this._platform.ANDROID;\n  }\n  /** Listener for the `wheel` event on the element. */\n\n\n  _wheelListener(event) {\n    if (this._isTooltipVisible()) {\n      const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n\n      const element = this._elementRef.nativeElement; // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n      // won't fire if the user scrolls away using the wheel without moving their cursor. We\n      // work around it by finding the element under the user's cursor and closing the tooltip\n      // if it's not the trigger.\n\n      if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n        this.hide();\n      }\n    }\n  }\n  /** Disables the native browser gestures, based on how the tooltip has been configured. */\n\n\n  _disableNativeGesturesIfNecessary() {\n    const gestures = this.touchGestures;\n\n    if (gestures !== 'off') {\n      const element = this._elementRef.nativeElement;\n      const style = element.style; // If gestures are set to `auto`, we don't disable text selection on inputs and\n      // textareas, because it prevents the user from typing into them on iOS Safari.\n\n      if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n        style.userSelect = style.msUserSelect = style.webkitUserSelect = style.MozUserSelect = 'none';\n      } // If we have `auto` gestures and the element uses native HTML dragging,\n      // we don't set `-webkit-user-drag` because it prevents the native behavior.\n\n\n      if (gestures === 'on' || !element.draggable) {\n        style.webkitUserDrag = 'none';\n      }\n\n      style.touchAction = 'none';\n      style.webkitTapHighlightColor = 'transparent';\n    }\n  }\n\n}\n\n_MatTooltipBase.ɵfac = function _MatTooltipBase_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n\n_MatTooltipBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatTooltipBase,\n  inputs: {\n    position: [\"matTooltipPosition\", \"position\"],\n    disabled: [\"matTooltipDisabled\", \"disabled\"],\n    showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n    hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n    touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"],\n    message: [\"matTooltip\", \"message\"],\n    tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatTooltipBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i1.Overlay\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i2.ScrollDispatcher\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i3.Platform\n    }, {\n      type: i4.AriaDescriber\n    }, {\n      type: i4.FocusMonitor\n    }, {\n      type: undefined\n    }, {\n      type: i5.Directionality\n    }, {\n      type: undefined\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    touchGestures: [{\n      type: Input,\n      args: ['matTooltipTouchGestures']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  });\n})();\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n\n\nclass MatTooltip extends _MatTooltipBase {\n  constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n    super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n    this._tooltipComponent = TooltipComponent;\n  }\n\n}\n\nMatTooltip.ɵfac = function MatTooltip_Factory(t) {\n  return new (t || MatTooltip)(i0.ɵɵdirectiveInject(i1.Overlay), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.ScrollDispatcher), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i3.Platform), i0.ɵɵdirectiveInject(i4.AriaDescriber), i0.ɵɵdirectiveInject(i4.FocusMonitor), i0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i5.Directionality, 8), i0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), i0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nMatTooltip.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTooltip,\n  selectors: [[\"\", \"matTooltip\", \"\"]],\n  hostAttrs: [1, \"mat-tooltip-trigger\"],\n  exportAs: [\"matTooltip\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[matTooltip]',\n      exportAs: 'matTooltip',\n      host: {\n        'class': 'mat-tooltip-trigger'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i1.Overlay\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i2.ScrollDispatcher\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i3.Platform\n    }, {\n      type: i4.AriaDescriber\n    }, {\n      type: i4.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\nclass _TooltipComponentBase {\n  constructor(_changeDetectorRef, animationMode) {\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Property watched by the animation framework to show or hide the tooltip */\n\n    this._visibility = 'initial';\n    /** Whether interactions on the page should close the tooltip */\n\n    this._closeOnInteraction = false;\n    /** Whether the tooltip is currently visible. */\n\n    this._isVisible = false;\n    /** Subject for notifying that the tooltip has been hidden from the view */\n\n    this._onHide = new Subject();\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n  }\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n\n\n  show(delay) {\n    // Cancel the delayed hide if it is scheduled\n    clearTimeout(this._hideTimeoutId);\n    this._showTimeoutId = setTimeout(() => {\n      this._toggleVisibility(true);\n\n      this._showTimeoutId = undefined;\n    }, delay);\n  }\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n\n\n  hide(delay) {\n    // Cancel the delayed show if it is scheduled\n    clearTimeout(this._showTimeoutId);\n    this._hideTimeoutId = setTimeout(() => {\n      this._toggleVisibility(false);\n\n      this._hideTimeoutId = undefined;\n    }, delay);\n  }\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n\n\n  afterHidden() {\n    return this._onHide;\n  }\n  /** Whether the tooltip is being displayed. */\n\n\n  isVisible() {\n    return this._isVisible;\n  }\n\n  ngOnDestroy() {\n    clearTimeout(this._showTimeoutId);\n    clearTimeout(this._hideTimeoutId);\n\n    this._onHide.complete();\n\n    this._triggerElement = null;\n  }\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n\n\n  _handleBodyInteraction() {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n\n\n  _markForCheck() {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _handleMouseLeave({\n    relatedTarget\n  }) {\n    if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n      this.hide(this._mouseLeaveHideDelay);\n    }\n  }\n  /**\n   * Callback for when the timeout in this.show() gets completed.\n   * This method is only needed by the mdc-tooltip, and so it is only implemented\n   * in the mdc-tooltip, not here.\n   */\n\n\n  _onShow() {}\n  /** Event listener dispatched when an animation on the tooltip finishes. */\n\n\n  _handleAnimationEnd({\n    animationName\n  }) {\n    if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n      this._finalizeAnimation(animationName === this._showAnimation);\n    }\n  }\n  /** Handles the cleanup after an animation has finished. */\n\n\n  _finalizeAnimation(toVisible) {\n    if (toVisible) {\n      this._closeOnInteraction = true;\n    } else if (!this.isVisible()) {\n      this._onHide.next();\n    }\n  }\n  /** Toggles the visibility of the tooltip element. */\n\n\n  _toggleVisibility(isVisible) {\n    // We set the classes directly here ourselves so that toggling the tooltip state\n    // isn't bound by change detection. This allows us to hide it even if the\n    // view ref has been detached from the CD tree.\n    const tooltip = this._tooltip.nativeElement;\n    const showClass = this._showAnimation;\n    const hideClass = this._hideAnimation;\n    tooltip.classList.remove(isVisible ? hideClass : showClass);\n    tooltip.classList.add(isVisible ? showClass : hideClass);\n    this._isVisible = isVisible; // It's common for internal apps to disable animations using `* { animation: none !important }`\n    // which can break the opening sequence. Try to detect such cases and work around them.\n\n    if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n      const styles = getComputedStyle(tooltip); // Use `getPropertyValue` to avoid issues with property renaming.\n\n      if (styles.getPropertyValue('animation-duration') === '0s' || styles.getPropertyValue('animation-name') === 'none') {\n        this._animationsDisabled = true;\n      }\n    }\n\n    if (isVisible) {\n      this._onShow();\n    }\n\n    if (this._animationsDisabled) {\n      tooltip.classList.add('_mat-animation-noopable');\n\n      this._finalizeAnimation(isVisible);\n    }\n  }\n\n}\n\n_TooltipComponentBase.ɵfac = function _TooltipComponentBase_Factory(t) {\n  return new (t || _TooltipComponentBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\n_TooltipComponentBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _TooltipComponentBase\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_TooltipComponentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n\n\nclass TooltipComponent extends _TooltipComponentBase {\n  constructor(changeDetectorRef, _breakpointObserver, animationMode) {\n    super(changeDetectorRef, animationMode);\n    this._breakpointObserver = _breakpointObserver;\n    /** Stream that emits whether the user has a handset-sized display.  */\n\n    this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    this._showAnimation = 'mat-tooltip-show';\n    this._hideAnimation = 'mat-tooltip-hide';\n  }\n\n}\n\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n  return new (t || TooltipComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i6.BreakpointObserver), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8));\n};\n\nTooltipComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TooltipComponent,\n  selectors: [[\"mat-tooltip-component\"]],\n  viewQuery: function TooltipComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._tooltip = _t.first);\n    }\n  },\n  hostAttrs: [\"aria-hidden\", \"true\"],\n  hostVars: 2,\n  hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function TooltipComponent_mouseleave_HostBindingHandler($event) {\n        return ctx._handleMouseLeave($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"zoom\", ctx.isVisible() ? 1 : null);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 4,\n  vars: 6,\n  consts: [[1, \"mat-tooltip\", 3, \"ngClass\", \"animationend\"], [\"tooltip\", \"\"]],\n  template: function TooltipComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1);\n      i0.ɵɵlistener(\"animationend\", function TooltipComponent_Template_div_animationend_0_listener($event) {\n        return ctx._handleAnimationEnd($event);\n      });\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      let tmp_0_0;\n      i0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = i0.ɵɵpipeBind1(2, 4, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n      i0.ɵɵproperty(\"ngClass\", ctx.tooltipClass);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.message);\n    }\n  },\n  directives: [i7.NgClass],\n  pipes: [i7.AsyncPipe],\n  styles: [\".mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis;transform:scale(0)}.mat-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}.mat-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-tooltip-show{0%{opacity:0;transform:scale(0)}50%{opacity:.5;transform:scale(0.99)}100%{opacity:1;transform:scale(1)}}@keyframes mat-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(1)}}.mat-tooltip-show{animation:mat-tooltip-show 200ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-tooltip-hide{animation:mat-tooltip-hide 100ms cubic-bezier(0, 0, 0.2, 1) forwards}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tooltip-component',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n        '[style.zoom]': 'isVisible() ? 1 : null',\n        '(mouseleave)': '_handleMouseLeave($event)',\n        'aria-hidden': 'true'\n      },\n      template: \"<div #tooltip\\n     class=\\\"mat-tooltip\\\"\\n     (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\">{{message}}</div>\\n\",\n      styles: [\".mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis;transform:scale(0)}.mat-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}.mat-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-tooltip-show{0%{opacity:0;transform:scale(0)}50%{opacity:.5;transform:scale(0.99)}100%{opacity:1;transform:scale(1)}}@keyframes mat-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(1)}}.mat-tooltip-show{animation:mat-tooltip-show 200ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-tooltip-hide{animation:mat-tooltip-hide 100ms cubic-bezier(0, 0, 0.2, 1) forwards}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i6.BreakpointObserver\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }];\n  }, {\n    _tooltip: [{\n      type: ViewChild,\n      args: ['tooltip', {\n        // Use a static query here since we interact directly with\n        // the DOM which can happen before `ngAfterViewInit`.\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatTooltipModule {}\n\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) {\n  return new (t || MatTooltipModule)();\n};\n\nMatTooltipModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatTooltipModule\n});\nMatTooltipModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule, CdkScrollableModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n      exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n      declarations: [MatTooltip, TooltipComponent],\n      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\n\n\nconst matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [state('initial, void, hidden', style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };","map":{"version":3,"sources":["D:/angular_update/ictfax/node_modules/@angular/material/fesm2015/tooltip.mjs"],"names":["i1","Overlay","OverlayModule","i4","A11yModule","i7","DOCUMENT","CommonModule","i0","InjectionToken","Directive","Inject","Input","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","MatCommonModule","i2","CdkScrollableModule","coerceBooleanProperty","coerceNumberProperty","ESCAPE","hasModifierKey","i6","Breakpoints","i3","normalizePassiveListenerOptions","ComponentPortal","ANIMATION_MODULE_TYPE","Subject","takeUntil","take","i5","trigger","state","style","transition","animate","keyframes","SCROLL_THROTTLE_MS","TOOLTIP_PANEL_CLASS","PANEL_CLASS","passiveListenerOptions","passive","LONGPRESS_DELAY","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","_MatTooltipBase","constructor","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_document","_position","_disabled","_viewInitialized","_pointerExitEventsInitialized","_viewportMargin","_cssClassPrefix","_showDelay","_hideDelay","touchGestures","_message","_passiveListeners","_destroyed","_scrollStrategy","change","pipe","subscribe","_overlayRef","_updatePosition","value","_a","_tooltipInstance","show","updatePosition","disabled","hide","_setupPointerEnterEventsIfNeeded","_mouseLeaveHideDelay","message","removeDescription","nativeElement","String","trim","_isTooltipVisible","_updateTooltipMessage","runOutsideAngular","Promise","resolve","then","describe","tooltipClass","_tooltipClass","_setTooltipClass","ngAfterViewInit","monitor","origin","run","ngOnDestroy","clearTimeout","_touchstartTimeout","dispose","forEach","event","listener","removeEventListener","length","next","complete","stopMonitoring","delay","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","_tooltipComponent","instance","attach","_triggerElement","afterHidden","toggle","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","_updateCurrentPositionClass","connectionPair","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","outsidePointerEvents","_handleBodyInteraction","keydownEvents","keyCode","preventDefault","stopPropagation","disableTooltipInteractivity","addPanelClass","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","_addOffset","Object","assign","main","fallback","isLtr","originPosition","originX","originY","ngDevMode","x","y","_invertPosition","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","newPosition","_currentPosition","classPrefix","removePanelClass","_platformSupportsMouseEvents","push","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","setTimeout","_addListeners","exitListeners","newTarget","relatedTarget","overlayElement","contains","_wheelListener","touchendListener","listeners","addEventListener","IOS","ANDROID","elementUnderPointer","elementFromPoint","clientX","clientY","element","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","ɵfac","ɵdir","type","ElementRef","ScrollDispatcher","ViewContainerRef","NgZone","Platform","AriaDescriber","FocusMonitor","undefined","Directionality","decorators","args","MatTooltip","elementRef","scrollDispatcher","viewContainerRef","ngZone","platform","ariaDescriber","focusMonitor","dir","defaultOptions","TooltipComponent","selector","exportAs","host","_TooltipComponentBase","_changeDetectorRef","animationMode","_visibility","_closeOnInteraction","_isVisible","_onHide","_animationsDisabled","_toggleVisibility","markForCheck","_handleMouseLeave","_onShow","_handleAnimationEnd","animationName","_showAnimation","_hideAnimation","_finalizeAnimation","toVisible","tooltip","_tooltip","showClass","hideClass","classList","remove","add","getComputedStyle","styles","getPropertyValue","ChangeDetectorRef","changeDetectorRef","_breakpointObserver","_isHandset","observe","Handset","BreakpointObserver","ɵcmp","NgClass","AsyncPipe","encapsulation","None","changeDetection","OnPush","template","static","MatTooltipModule","ɵmod","ɵinj","imports","exports","declarations","providers","matTooltipAnimations","tooltipState","opacity","transform","offset"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,sBAApB;AACA,SAASC,OAAT,EAAkBC,aAAlB,QAAuC,sBAAvC;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,iBAAvC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,cAAT,EAAyBC,SAAzB,EAAoCC,MAApC,EAA4CC,KAA5C,EAAmDC,QAAnD,EAA6DC,SAA7D,EAAwEC,iBAAxE,EAA2FC,uBAA3F,EAAoHC,SAApH,EAA+HC,QAA/H,QAA+I,eAA/I;AACA,SAASC,eAAT,QAAgC,wBAAhC;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,SAASC,qBAAT,EAAgCC,oBAAhC,QAA4D,uBAA5D;AACA,SAASC,MAAT,EAAiBC,cAAjB,QAAuC,uBAAvC;AACA,OAAO,KAAKC,EAAZ,MAAoB,qBAApB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,uBAApB;AACA,SAASC,+BAAT,QAAgD,uBAAhD;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,gBAAhC;AACA,OAAO,KAAKC,EAAZ,MAAoB,mBAApB;AACA,SAASC,OAAT,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,UAAhC,EAA4CC,OAA5C,EAAqDC,SAArD,QAAsE,qBAAtE;AAEA;;;AACA,MAAMC,kBAAkB,GAAG,EAA3B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAG,mBAA5B;AACA,MAAMC,WAAW,GAAG,eAApB;AACA;;AACA,MAAMC,sBAAsB,GAAGhB,+BAA+B,CAAC;AAAEiB,EAAAA,OAAO,EAAE;AAAX,CAAD,CAA9D;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAG,GAAxB;AACA;AACA;AACA;AACA;;AACA,SAASC,iCAAT,CAA2CC,QAA3C,EAAqD;AACjD,SAAOC,KAAK,CAAE,qBAAoBD,QAAS,eAA/B,CAAZ;AACH;AACD;;;AACA,MAAME,2BAA2B,GAAG,IAAI1C,cAAJ,CAAmB,6BAAnB,CAApC;AACA;;AACA,SAAS2C,mCAAT,CAA6CC,OAA7C,EAAsD;AAClD,SAAO,MAAMA,OAAO,CAACC,gBAAR,CAAyBC,UAAzB,CAAoC;AAAEC,IAAAA,cAAc,EAAEd;AAAlB,GAApC,CAAb;AACH;AACD;;;AACA,MAAMe,4CAA4C,GAAG;AACjDC,EAAAA,OAAO,EAAEP,2BADwC;AAEjDQ,EAAAA,IAAI,EAAE,CAAC1D,OAAD,CAF2C;AAGjD2D,EAAAA,UAAU,EAAER;AAHqC,CAArD;AAKA;;AACA,MAAMS,2BAA2B,GAAG,IAAIpD,cAAJ,CAAmB,6BAAnB,EAAkD;AAClFqD,EAAAA,UAAU,EAAE,MADsE;AAElFC,EAAAA,OAAO,EAAEC;AAFyE,CAAlD,CAApC;AAIA;;AACA,SAASA,mCAAT,GAA+C;AAC3C,SAAO;AACHC,IAAAA,SAAS,EAAE,CADR;AAEHC,IAAAA,SAAS,EAAE,CAFR;AAGHC,IAAAA,iBAAiB,EAAE;AAHhB,GAAP;AAKH;;AACD,MAAMC,eAAN,CAAsB;AAClBC,EAAAA,WAAW,CAACC,QAAD,EAAWC,WAAX,EAAwBC,iBAAxB,EAA2CC,iBAA3C,EAA8DC,OAA9D,EAAuEC,SAAvE,EAAkFC,cAAlF,EAAkGC,aAAlG,EAAiHC,cAAjH,EAAiIC,IAAjI,EAAuIC,eAAvI,EAAwJC,SAAxJ,EAAmK;AAC1K,SAAKX,QAAL,GAAgBA,QAAhB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,iBAAL,GAAyBA,iBAAzB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKE,IAAL,GAAYA,IAAZ;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA,SAAKE,SAAL,GAAiB,OAAjB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,gBAAL,GAAwB,KAAxB;AACA,SAAKC,6BAAL,GAAqC,KAArC;AACA,SAAKC,eAAL,GAAuB,CAAvB;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACA,SAAKC,UAAL,GAAkB,KAAKR,eAAL,CAAqBf,SAAvC;AACA,SAAKwB,UAAL,GAAkB,KAAKT,eAAL,CAAqBd,SAAvC;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKwB,aAAL,GAAqB,MAArB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA;;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACA;;AACA,SAAKC,UAAL,GAAkB,IAAI7D,OAAJ,EAAlB;AACA,SAAK8D,eAAL,GAAuBhB,cAAvB;AACA,SAAKG,SAAL,GAAiBA,SAAjB;;AACA,QAAID,eAAJ,EAAqB;AACjB,UAAIA,eAAe,CAAC/B,QAApB,EAA8B;AAC1B,aAAKA,QAAL,GAAgB+B,eAAe,CAAC/B,QAAhC;AACH;;AACD,UAAI+B,eAAe,CAACU,aAApB,EAAmC;AAC/B,aAAKA,aAAL,GAAqBV,eAAe,CAACU,aAArC;AACH;AACJ;;AACDX,IAAAA,IAAI,CAACgB,MAAL,CAAYC,IAAZ,CAAiB/D,SAAS,CAAC,KAAK4D,UAAN,CAA1B,EAA6CI,SAA7C,CAAuD,MAAM;AACzD,UAAI,KAAKC,WAAT,EAAsB;AAClB,aAAKC,eAAL,CAAqB,KAAKD,WAA1B;AACH;AACJ,KAJD;AAKH;AACD;;;AACY,MAARjD,QAAQ,GAAG;AACX,WAAO,KAAKiC,SAAZ;AACH;;AACW,MAARjC,QAAQ,CAACmD,KAAD,EAAQ;AAChB,QAAIC,EAAJ;;AACA,QAAID,KAAK,KAAK,KAAKlB,SAAnB,EAA8B;AAC1B,WAAKA,SAAL,GAAiBkB,KAAjB;;AACA,UAAI,KAAKF,WAAT,EAAsB;AAClB,aAAKC,eAAL,CAAqB,KAAKD,WAA1B;;AACA,SAACG,EAAE,GAAG,KAAKC,gBAAX,MAAiC,IAAjC,IAAyCD,EAAE,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,EAAE,CAACE,IAAH,CAAQ,CAAR,CAAlE;;AACA,aAAKL,WAAL,CAAiBM,cAAjB;AACH;AACJ;AACJ;AACD;;;AACY,MAARC,QAAQ,GAAG;AACX,WAAO,KAAKtB,SAAZ;AACH;;AACW,MAARsB,QAAQ,CAACL,KAAD,EAAQ;AAChB,SAAKjB,SAAL,GAAiB7D,qBAAqB,CAAC8E,KAAD,CAAtC,CADgB,CAEhB;;AACA,QAAI,KAAKjB,SAAT,EAAoB;AAChB,WAAKuB,IAAL,CAAU,CAAV;AACH,KAFD,MAGK;AACD,WAAKC,gCAAL;AACH;AACJ;AACD;;;AACa,MAAT1C,SAAS,GAAG;AACZ,WAAO,KAAKuB,UAAZ;AACH;;AACY,MAATvB,SAAS,CAACmC,KAAD,EAAQ;AACjB,SAAKZ,UAAL,GAAkBjE,oBAAoB,CAAC6E,KAAD,CAAtC;AACH;AACD;;;AACa,MAATlC,SAAS,GAAG;AACZ,WAAO,KAAKuB,UAAZ;AACH;;AACY,MAATvB,SAAS,CAACkC,KAAD,EAAQ;AACjB,SAAKX,UAAL,GAAkBlE,oBAAoB,CAAC6E,KAAD,CAAtC;;AACA,QAAI,KAAKE,gBAAT,EAA2B;AACvB,WAAKA,gBAAL,CAAsBM,oBAAtB,GAA6C,KAAKnB,UAAlD;AACH;AACJ;AACD;;;AACW,MAAPoB,OAAO,GAAG;AACV,WAAO,KAAKlB,QAAZ;AACH;;AACU,MAAPkB,OAAO,CAACT,KAAD,EAAQ;AACf,SAAKxB,cAAL,CAAoBkC,iBAApB,CAAsC,KAAKvC,WAAL,CAAiBwC,aAAvD,EAAsE,KAAKpB,QAA3E,EAAqF,SAArF,EADe,CAEf;AACA;AACA;;;AACA,SAAKA,QAAL,GAAgBS,KAAK,IAAI,IAAT,GAAgBY,MAAM,CAACZ,KAAD,CAAN,CAAca,IAAd,EAAhB,GAAuC,EAAvD;;AACA,QAAI,CAAC,KAAKtB,QAAN,IAAkB,KAAKuB,iBAAL,EAAtB,EAAgD;AAC5C,WAAKR,IAAL,CAAU,CAAV;AACH,KAFD,MAGK;AACD,WAAKC,gCAAL;;AACA,WAAKQ,qBAAL;;AACA,WAAKzC,OAAL,CAAa0C,iBAAb,CAA+B,MAAM;AACjC;AACA;AACA;AACA;AACAC,QAAAA,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM;AACzB,eAAK3C,cAAL,CAAoB4C,QAApB,CAA6B,KAAKjD,WAAL,CAAiBwC,aAA9C,EAA6D,KAAKF,OAAlE,EAA2E,SAA3E;AACH,SAFD;AAGH,OARD;AASH;AACJ;AACD;;;AACgB,MAAZY,YAAY,GAAG;AACf,WAAO,KAAKC,aAAZ;AACH;;AACe,MAAZD,YAAY,CAACrB,KAAD,EAAQ;AACpB,SAAKsB,aAAL,GAAqBtB,KAArB;;AACA,QAAI,KAAKE,gBAAT,EAA2B;AACvB,WAAKqB,gBAAL,CAAsB,KAAKD,aAA3B;AACH;AACJ;;AACDE,EAAAA,eAAe,GAAG;AACd;AACA,SAAKxC,gBAAL,GAAwB,IAAxB;;AACA,SAAKuB,gCAAL;;AACA,SAAK9B,aAAL,CACKgD,OADL,CACa,KAAKtD,WADlB,EAEKyB,IAFL,CAEU/D,SAAS,CAAC,KAAK4D,UAAN,CAFnB,EAGKI,SAHL,CAGe6B,MAAM,IAAI;AACrB;AACA,UAAI,CAACA,MAAL,EAAa;AACT,aAAKpD,OAAL,CAAaqD,GAAb,CAAiB,MAAM,KAAKrB,IAAL,CAAU,CAAV,CAAvB;AACH,OAFD,MAGK,IAAIoB,MAAM,KAAK,UAAf,EAA2B;AAC5B,aAAKpD,OAAL,CAAaqD,GAAb,CAAiB,MAAM,KAAKxB,IAAL,EAAvB;AACH;AACJ,KAXD;AAYH;AACD;AACJ;AACA;;;AACIyB,EAAAA,WAAW,GAAG;AACV,UAAMjB,aAAa,GAAG,KAAKxC,WAAL,CAAiBwC,aAAvC;AACAkB,IAAAA,YAAY,CAAC,KAAKC,kBAAN,CAAZ;;AACA,QAAI,KAAKhC,WAAT,EAAsB;AAClB,WAAKA,WAAL,CAAiBiC,OAAjB;;AACA,WAAK7B,gBAAL,GAAwB,IAAxB;AACH,KANS,CAOV;;;AACA,SAAKV,iBAAL,CAAuBwC,OAAvB,CAA+B,CAAC,CAACC,KAAD,EAAQC,QAAR,CAAD,KAAuB;AAClDvB,MAAAA,aAAa,CAACwB,mBAAd,CAAkCF,KAAlC,EAAyCC,QAAzC,EAAmDzF,sBAAnD;AACH,KAFD;;AAGA,SAAK+C,iBAAL,CAAuB4C,MAAvB,GAAgC,CAAhC;;AACA,SAAK3C,UAAL,CAAgB4C,IAAhB;;AACA,SAAK5C,UAAL,CAAgB6C,QAAhB;;AACA,SAAK9D,cAAL,CAAoBkC,iBAApB,CAAsCC,aAAtC,EAAqD,KAAKF,OAA1D,EAAmE,SAAnE;;AACA,SAAKhC,aAAL,CAAmB8D,cAAnB,CAAkC5B,aAAlC;AACH;AACD;;;AACAR,EAAAA,IAAI,CAACqC,KAAK,GAAG,KAAK3E,SAAd,EAAyB;AACzB,QAAI,KAAKwC,QAAL,IACA,CAAC,KAAKI,OADN,IAEC,KAAKK,iBAAL,MACG,CAAC,KAAKZ,gBAAL,CAAsBuC,cAD1B,IAEG,CAAC,KAAKvC,gBAAL,CAAsBwC,cAJ/B,EAIgD;AAC5C;AACH;;AACD,UAAMC,UAAU,GAAG,KAAKC,cAAL,EAAnB;;AACA,SAAKC,OAAL;;AACA,SAAKC,OAAL,GACI,KAAKA,OAAL,IAAgB,IAAIpH,eAAJ,CAAoB,KAAKqH,iBAAzB,EAA4C,KAAK1E,iBAAjD,CADpB;AAEA,UAAM2E,QAAQ,GAAI,KAAK9C,gBAAL,GAAwByC,UAAU,CAACM,MAAX,CAAkB,KAAKH,OAAvB,EAAgCE,QAA1E;AACAA,IAAAA,QAAQ,CAACE,eAAT,GAA2B,KAAK/E,WAAL,CAAiBwC,aAA5C;AACAqC,IAAAA,QAAQ,CAACxC,oBAAT,GAAgC,KAAKnB,UAArC;AACA2D,IAAAA,QAAQ,CACHG,WADL,GAEKvD,IAFL,CAEU/D,SAAS,CAAC,KAAK4D,UAAN,CAFnB,EAGKI,SAHL,CAGe,MAAM,KAAKgD,OAAL,EAHrB;;AAIA,SAAKtB,gBAAL,CAAsB,KAAKD,aAA3B;;AACA,SAAKP,qBAAL;;AACAiC,IAAAA,QAAQ,CAAC7C,IAAT,CAAcqC,KAAd;AACH;AACD;;;AACAlC,EAAAA,IAAI,CAACkC,KAAK,GAAG,KAAK1E,SAAd,EAAyB;AACzB,QAAI,KAAKoC,gBAAT,EAA2B;AACvB,WAAKA,gBAAL,CAAsBI,IAAtB,CAA2BkC,KAA3B;AACH;AACJ;AACD;;;AACAY,EAAAA,MAAM,GAAG;AACL,SAAKtC,iBAAL,KAA2B,KAAKR,IAAL,EAA3B,GAAyC,KAAKH,IAAL,EAAzC;AACH;AACD;;;AACAW,EAAAA,iBAAiB,GAAG;AAChB,WAAO,CAAC,CAAC,KAAKZ,gBAAP,IAA2B,KAAKA,gBAAL,CAAsBmD,SAAtB,EAAlC;AACH;AACD;;;AACAT,EAAAA,cAAc,GAAG;AACb,QAAI3C,EAAJ;;AACA,QAAI,KAAKH,WAAT,EAAsB;AAClB,aAAO,KAAKA,WAAZ;AACH;;AACD,UAAMwD,mBAAmB,GAAG,KAAKlF,iBAAL,CAAuBmF,2BAAvB,CAAmD,KAAKpF,WAAxD,CAA5B,CALa,CAMb;;;AACA,UAAMqF,QAAQ,GAAG,KAAKtF,QAAL,CACZrB,QADY,GAEZ4G,mBAFY,CAEQ,KAAKtF,WAFb,EAGZuF,qBAHY,CAGW,IAAG,KAAKvE,eAAgB,UAHnC,EAIZwE,sBAJY,CAIW,KAJX,EAKZC,kBALY,CAKO,KAAK1E,eALZ,EAMZ2E,wBANY,CAMaP,mBANb,CAAjB;;AAOAE,IAAAA,QAAQ,CAACM,eAAT,CAAyBlE,IAAzB,CAA8B/D,SAAS,CAAC,KAAK4D,UAAN,CAAvC,EAA0DI,SAA1D,CAAoEF,MAAM,IAAI;AAC1E,WAAKoE,2BAAL,CAAiCpE,MAAM,CAACqE,cAAxC;;AACA,UAAI,KAAK9D,gBAAT,EAA2B;AACvB,YAAIP,MAAM,CAACsE,wBAAP,CAAgCC,gBAAhC,IAAoD,KAAKhE,gBAAL,CAAsBmD,SAAtB,EAAxD,EAA2F;AACvF;AACA;AACA,eAAK/E,OAAL,CAAaqD,GAAb,CAAiB,MAAM,KAAKrB,IAAL,CAAU,CAAV,CAAvB;AACH;AACJ;AACJ,KATD;AAUA,SAAKR,WAAL,GAAmB,KAAK5B,QAAL,CAAciG,MAAd,CAAqB;AACpCC,MAAAA,SAAS,EAAE,KAAKzF,IADoB;AAEpC0F,MAAAA,gBAAgB,EAAEb,QAFkB;AAGpCc,MAAAA,UAAU,EAAG,GAAE,KAAKnF,eAAgB,IAAG3C,WAAY,EAHf;AAIpCkC,MAAAA,cAAc,EAAE,KAAKgB,eAAL;AAJoB,KAArB,CAAnB;;AAMA,SAAKK,eAAL,CAAqB,KAAKD,WAA1B;;AACA,SAAKA,WAAL,CACKyE,WADL,GAEK3E,IAFL,CAEU/D,SAAS,CAAC,KAAK4D,UAAN,CAFnB,EAGKI,SAHL,CAGe,MAAM,KAAKgD,OAAL,EAHrB;;AAIA,SAAK/C,WAAL,CACK0E,oBADL,GAEK5E,IAFL,CAEU/D,SAAS,CAAC,KAAK4D,UAAN,CAFnB,EAGKI,SAHL,CAGe,MAAM;AAAE,UAAII,EAAJ;;AAAQ,aAAO,CAACA,EAAE,GAAG,KAAKC,gBAAX,MAAiC,IAAjC,IAAyCD,EAAE,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,EAAE,CAACwE,sBAAH,EAAzE;AAAuG,KAHtI;;AAIA,SAAK3E,WAAL,CACK4E,aADL,GAEK9E,IAFL,CAEU/D,SAAS,CAAC,KAAK4D,UAAN,CAFnB,EAGKI,SAHL,CAGeoC,KAAK,IAAI;AACpB,UAAI,KAAKnB,iBAAL,MAA4BmB,KAAK,CAAC0C,OAAN,KAAkBvJ,MAA9C,IAAwD,CAACC,cAAc,CAAC4G,KAAD,CAA3E,EAAoF;AAChFA,QAAAA,KAAK,CAAC2C,cAAN;AACA3C,QAAAA,KAAK,CAAC4C,eAAN;;AACA,aAAKvG,OAAL,CAAaqD,GAAb,CAAiB,MAAM,KAAKrB,IAAL,CAAU,CAAV,CAAvB;AACH;AACJ,KATD;;AAUA,QAAI,CAACL,EAAE,GAAG,KAAKrB,eAAX,MAAgC,IAAhC,IAAwCqB,EAAE,KAAK,KAAK,CAApD,GAAwD,KAAK,CAA7D,GAAiEA,EAAE,CAAC6E,2BAAxE,EAAqG;AACjG,WAAKhF,WAAL,CAAiBiF,aAAjB,CAAgC,GAAE,KAAK5F,eAAgB,gCAAvD;AACH;;AACD,WAAO,KAAKW,WAAZ;AACH;AACD;;;AACA+C,EAAAA,OAAO,GAAG;AACN,QAAI,KAAK/C,WAAL,IAAoB,KAAKA,WAAL,CAAiBkF,WAAjB,EAAxB,EAAwD;AACpD,WAAKlF,WAAL,CAAiBmF,MAAjB;AACH;;AACD,SAAK/E,gBAAL,GAAwB,IAAxB;AACH;AACD;;;AACAH,EAAAA,eAAe,CAAC4C,UAAD,EAAa;AACxB,UAAM9F,QAAQ,GAAG8F,UAAU,CAACuC,SAAX,GAAuBb,gBAAxC;;AACA,UAAM3C,MAAM,GAAG,KAAKyD,UAAL,EAAf;;AACA,UAAMlI,OAAO,GAAG,KAAKmI,mBAAL,EAAhB;;AACAvI,IAAAA,QAAQ,CAACwI,aAAT,CAAuB,CACnB,KAAKC,UAAL,CAAgBC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB9D,MAAM,CAAC+D,IAAzB,CAAd,EAA8CxI,OAAO,CAACwI,IAAtD,CAAhB,CADmB,EAEnB,KAAKH,UAAL,CAAgBC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB9D,MAAM,CAACgE,QAAzB,CAAd,EAAkDzI,OAAO,CAACyI,QAA1D,CAAhB,CAFmB,CAAvB;AAIH;AACD;;;AACAJ,EAAAA,UAAU,CAACzI,QAAD,EAAW;AACjB,WAAOA,QAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIsI,EAAAA,UAAU,GAAG;AACT,UAAMQ,KAAK,GAAG,CAAC,KAAKhH,IAAN,IAAc,KAAKA,IAAL,CAAUqB,KAAV,IAAmB,KAA/C;AACA,UAAMnD,QAAQ,GAAG,KAAKA,QAAtB;AACA,QAAI+I,cAAJ;;AACA,QAAI/I,QAAQ,IAAI,OAAZ,IAAuBA,QAAQ,IAAI,OAAvC,EAAgD;AAC5C+I,MAAAA,cAAc,GAAG;AAAEC,QAAAA,OAAO,EAAE,QAAX;AAAqBC,QAAAA,OAAO,EAAEjJ,QAAQ,IAAI,OAAZ,GAAsB,KAAtB,GAA8B;AAA5D,OAAjB;AACH,KAFD,MAGK,IAAIA,QAAQ,IAAI,QAAZ,IACJA,QAAQ,IAAI,MAAZ,IAAsB8I,KADlB,IAEJ9I,QAAQ,IAAI,OAAZ,IAAuB,CAAC8I,KAFxB,EAEgC;AACjCC,MAAAA,cAAc,GAAG;AAAEC,QAAAA,OAAO,EAAE,OAAX;AAAoBC,QAAAA,OAAO,EAAE;AAA7B,OAAjB;AACH,KAJI,MAKA,IAAIjJ,QAAQ,IAAI,OAAZ,IACJA,QAAQ,IAAI,OAAZ,IAAuB8I,KADnB,IAEJ9I,QAAQ,IAAI,MAAZ,IAAsB,CAAC8I,KAFvB,EAE+B;AAChCC,MAAAA,cAAc,GAAG;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,OAAO,EAAE;AAA3B,OAAjB;AACH,KAJI,MAKA,IAAI,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAAxC,EAAmD;AACpD,YAAMnJ,iCAAiC,CAACC,QAAD,CAAvC;AACH;;AACD,UAAM;AAAEmJ,MAAAA,CAAF;AAAKC,MAAAA;AAAL,QAAW,KAAKC,eAAL,CAAqBN,cAAc,CAACC,OAApC,EAA6CD,cAAc,CAACE,OAA5D,CAAjB;;AACA,WAAO;AACHL,MAAAA,IAAI,EAAEG,cADH;AAEHF,MAAAA,QAAQ,EAAE;AAAEG,QAAAA,OAAO,EAAEG,CAAX;AAAcF,QAAAA,OAAO,EAAEG;AAAvB;AAFP,KAAP;AAIH;AACD;;;AACAb,EAAAA,mBAAmB,GAAG;AAClB,UAAMO,KAAK,GAAG,CAAC,KAAKhH,IAAN,IAAc,KAAKA,IAAL,CAAUqB,KAAV,IAAmB,KAA/C;AACA,UAAMnD,QAAQ,GAAG,KAAKA,QAAtB;AACA,QAAIsJ,eAAJ;;AACA,QAAItJ,QAAQ,IAAI,OAAhB,EAAyB;AACrBsJ,MAAAA,eAAe,GAAG;AAAEC,QAAAA,QAAQ,EAAE,QAAZ;AAAsBC,QAAAA,QAAQ,EAAE;AAAhC,OAAlB;AACH,KAFD,MAGK,IAAIxJ,QAAQ,IAAI,OAAhB,EAAyB;AAC1BsJ,MAAAA,eAAe,GAAG;AAAEC,QAAAA,QAAQ,EAAE,QAAZ;AAAsBC,QAAAA,QAAQ,EAAE;AAAhC,OAAlB;AACH,KAFI,MAGA,IAAIxJ,QAAQ,IAAI,QAAZ,IACJA,QAAQ,IAAI,MAAZ,IAAsB8I,KADlB,IAEJ9I,QAAQ,IAAI,OAAZ,IAAuB,CAAC8I,KAFxB,EAEgC;AACjCQ,MAAAA,eAAe,GAAG;AAAEC,QAAAA,QAAQ,EAAE,KAAZ;AAAmBC,QAAAA,QAAQ,EAAE;AAA7B,OAAlB;AACH,KAJI,MAKA,IAAIxJ,QAAQ,IAAI,OAAZ,IACJA,QAAQ,IAAI,OAAZ,IAAuB8I,KADnB,IAEJ9I,QAAQ,IAAI,MAAZ,IAAsB,CAAC8I,KAFvB,EAE+B;AAChCQ,MAAAA,eAAe,GAAG;AAAEC,QAAAA,QAAQ,EAAE,OAAZ;AAAqBC,QAAAA,QAAQ,EAAE;AAA/B,OAAlB;AACH,KAJI,MAKA,IAAI,OAAON,SAAP,KAAqB,WAArB,IAAoCA,SAAxC,EAAmD;AACpD,YAAMnJ,iCAAiC,CAACC,QAAD,CAAvC;AACH;;AACD,UAAM;AAAEmJ,MAAAA,CAAF;AAAKC,MAAAA;AAAL,QAAW,KAAKC,eAAL,CAAqBC,eAAe,CAACC,QAArC,EAA+CD,eAAe,CAACE,QAA/D,CAAjB;;AACA,WAAO;AACHZ,MAAAA,IAAI,EAAEU,eADH;AAEHT,MAAAA,QAAQ,EAAE;AAAEU,QAAAA,QAAQ,EAAEJ,CAAZ;AAAeK,QAAAA,QAAQ,EAAEJ;AAAzB;AAFP,KAAP;AAIH;AACD;;;AACAlF,EAAAA,qBAAqB,GAAG;AACpB;AACA;AACA,QAAI,KAAKb,gBAAT,EAA2B;AACvB,WAAKA,gBAAL,CAAsBO,OAAtB,GAAgC,KAAKA,OAArC;;AACA,WAAKP,gBAAL,CAAsBoG,aAAtB;;AACA,WAAKhI,OAAL,CAAaiI,gBAAb,CAA8B3G,IAA9B,CAAmC9D,IAAI,CAAC,CAAD,CAAvC,EAA4CD,SAAS,CAAC,KAAK4D,UAAN,CAArD,EAAwEI,SAAxE,CAAkF,MAAM;AACpF,YAAI,KAAKK,gBAAT,EAA2B;AACvB,eAAKJ,WAAL,CAAiBM,cAAjB;AACH;AACJ,OAJD;AAKH;AACJ;AACD;;;AACAmB,EAAAA,gBAAgB,CAACF,YAAD,EAAe;AAC3B,QAAI,KAAKnB,gBAAT,EAA2B;AACvB,WAAKA,gBAAL,CAAsBmB,YAAtB,GAAqCA,YAArC;;AACA,WAAKnB,gBAAL,CAAsBoG,aAAtB;AACH;AACJ;AACD;;;AACAJ,EAAAA,eAAe,CAACF,CAAD,EAAIC,CAAJ,EAAO;AAClB,QAAI,KAAKpJ,QAAL,KAAkB,OAAlB,IAA6B,KAAKA,QAAL,KAAkB,OAAnD,EAA4D;AACxD,UAAIoJ,CAAC,KAAK,KAAV,EAAiB;AACbA,QAAAA,CAAC,GAAG,QAAJ;AACH,OAFD,MAGK,IAAIA,CAAC,KAAK,QAAV,EAAoB;AACrBA,QAAAA,CAAC,GAAG,KAAJ;AACH;AACJ,KAPD,MAQK;AACD,UAAID,CAAC,KAAK,KAAV,EAAiB;AACbA,QAAAA,CAAC,GAAG,OAAJ;AACH,OAFD,MAGK,IAAIA,CAAC,KAAK,OAAV,EAAmB;AACpBA,QAAAA,CAAC,GAAG,KAAJ;AACH;AACJ;;AACD,WAAO;AAAEA,MAAAA,CAAF;AAAKC,MAAAA;AAAL,KAAP;AACH;AACD;;;AACAlC,EAAAA,2BAA2B,CAACC,cAAD,EAAiB;AACxC,UAAM;AAAEqC,MAAAA,QAAF;AAAYR,MAAAA,OAAZ;AAAqBC,MAAAA;AAArB,QAAiC9B,cAAvC;AACA,QAAIwC,WAAJ,CAFwC,CAGxC;AACA;;AACA,QAAIH,QAAQ,KAAK,QAAjB,EAA2B;AACvB;AACA;AACA;AACA,UAAI,KAAK1H,IAAL,IAAa,KAAKA,IAAL,CAAUqB,KAAV,KAAoB,KAArC,EAA4C;AACxCwG,QAAAA,WAAW,GAAGX,OAAO,KAAK,KAAZ,GAAoB,MAApB,GAA6B,OAA3C;AACH,OAFD,MAGK;AACDW,QAAAA,WAAW,GAAGX,OAAO,KAAK,OAAZ,GAAsB,MAAtB,GAA+B,OAA7C;AACH;AACJ,KAVD,MAWK;AACDW,MAAAA,WAAW,GAAGH,QAAQ,KAAK,QAAb,IAAyBP,OAAO,KAAK,KAArC,GAA6C,OAA7C,GAAuD,OAArE;AACH;;AACD,QAAIU,WAAW,KAAK,KAAKC,gBAAzB,EAA2C;AACvC,YAAM9D,UAAU,GAAG,KAAK7C,WAAxB;;AACA,UAAI6C,UAAJ,EAAgB;AACZ,cAAM+D,WAAW,GAAI,GAAE,KAAKvH,eAAgB,IAAG3C,WAAY,GAA3D;AACAmG,QAAAA,UAAU,CAACgE,gBAAX,CAA4BD,WAAW,GAAG,KAAKD,gBAA/C;AACA9D,QAAAA,UAAU,CAACoC,aAAX,CAAyB2B,WAAW,GAAGF,WAAvC;AACH;;AACD,WAAKC,gBAAL,GAAwBD,WAAxB;AACH;AACJ;AACD;;;AACAjG,EAAAA,gCAAgC,GAAG;AAC/B;AACA,QAAI,KAAKxB,SAAL,IACA,CAAC,KAAK0B,OADN,IAEA,CAAC,KAAKzB,gBAFN,IAGA,KAAKQ,iBAAL,CAAuB4C,MAH3B,EAGmC;AAC/B;AACH,KAP8B,CAQ/B;AACA;;;AACA,QAAI,KAAKwE,4BAAL,EAAJ,EAAyC;AACrC,WAAKpH,iBAAL,CAAuBqH,IAAvB,CAA4B,CACxB,YADwB,EAExB,MAAM;AACF,aAAKC,+BAAL;;AACA,aAAK3G,IAAL;AACH,OALuB,CAA5B;AAOH,KARD,MASK,IAAI,KAAKb,aAAL,KAAuB,KAA3B,EAAkC;AACnC,WAAKyH,iCAAL;;AACA,WAAKvH,iBAAL,CAAuBqH,IAAvB,CAA4B,CACxB,YADwB,EAExB,MAAM;AACF;AACA;AACA,aAAKC,+BAAL;;AACAjF,QAAAA,YAAY,CAAC,KAAKC,kBAAN,CAAZ;AACA,aAAKA,kBAAL,GAA0BkF,UAAU,CAAC,MAAM,KAAK7G,IAAL,EAAP,EAAoBxD,eAApB,CAApC;AACH,OARuB,CAA5B;AAUH;;AACD,SAAKsK,aAAL,CAAmB,KAAKzH,iBAAxB;AACH;;AACDsH,EAAAA,+BAA+B,GAAG;AAC9B,QAAI,KAAK7H,6BAAT,EAAwC;AACpC;AACH;;AACD,SAAKA,6BAAL,GAAqC,IAArC;AACA,UAAMiI,aAAa,GAAG,EAAtB;;AACA,QAAI,KAAKN,4BAAL,EAAJ,EAAyC;AACrCM,MAAAA,aAAa,CAACL,IAAd,CAAmB,CACf,YADe,EAEf5E,KAAK,IAAI;AACL,YAAIhC,EAAJ;;AACA,cAAMkH,SAAS,GAAGlF,KAAK,CAACmF,aAAxB;;AACA,YAAI,CAACD,SAAD,IAAc,EAAE,CAAClH,EAAE,GAAG,KAAKH,WAAX,MAA4B,IAA5B,IAAoCG,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAACoH,cAAH,CAAkBC,QAAlB,CAA2BH,SAA3B,CAA/D,CAAlB,EAAyH;AACrH,eAAK7G,IAAL;AACH;AACJ,OARc,CAAnB,EASG,CAAC,OAAD,EAAU2B,KAAK,IAAI,KAAKsF,cAAL,CAAoBtF,KAApB,CAAnB,CATH;AAUH,KAXD,MAYK,IAAI,KAAK3C,aAAL,KAAuB,KAA3B,EAAkC;AACnC,WAAKyH,iCAAL;;AACA,YAAMS,gBAAgB,GAAG,MAAM;AAC3B3F,QAAAA,YAAY,CAAC,KAAKC,kBAAN,CAAZ;AACA,aAAKxB,IAAL,CAAU,KAAK1B,eAAL,CAAqBb,iBAA/B;AACH,OAHD;;AAIAmJ,MAAAA,aAAa,CAACL,IAAd,CAAmB,CAAC,UAAD,EAAaW,gBAAb,CAAnB,EAAmD,CAAC,aAAD,EAAgBA,gBAAhB,CAAnD;AACH;;AACD,SAAKP,aAAL,CAAmBC,aAAnB;;AACA,SAAK1H,iBAAL,CAAuBqH,IAAvB,CAA4B,GAAGK,aAA/B;AACH;;AACDD,EAAAA,aAAa,CAACQ,SAAD,EAAY;AACrBA,IAAAA,SAAS,CAACzF,OAAV,CAAkB,CAAC,CAACC,KAAD,EAAQC,QAAR,CAAD,KAAuB;AACrC,WAAK/D,WAAL,CAAiBwC,aAAjB,CAA+B+G,gBAA/B,CAAgDzF,KAAhD,EAAuDC,QAAvD,EAAiEzF,sBAAjE;AACH,KAFD;AAGH;;AACDmK,EAAAA,4BAA4B,GAAG;AAC3B,WAAO,CAAC,KAAKrI,SAAL,CAAeoJ,GAAhB,IAAuB,CAAC,KAAKpJ,SAAL,CAAeqJ,OAA9C;AACH;AACD;;;AACAL,EAAAA,cAAc,CAACtF,KAAD,EAAQ;AAClB,QAAI,KAAKnB,iBAAL,EAAJ,EAA8B;AAC1B,YAAM+G,mBAAmB,GAAG,KAAKhJ,SAAL,CAAeiJ,gBAAf,CAAgC7F,KAAK,CAAC8F,OAAtC,EAA+C9F,KAAK,CAAC+F,OAArD,CAA5B;;AACA,YAAMC,OAAO,GAAG,KAAK9J,WAAL,CAAiBwC,aAAjC,CAF0B,CAG1B;AACA;AACA;AACA;;AACA,UAAIkH,mBAAmB,KAAKI,OAAxB,IAAmC,CAACA,OAAO,CAACX,QAAR,CAAiBO,mBAAjB,CAAxC,EAA+E;AAC3E,aAAKvH,IAAL;AACH;AACJ;AACJ;AACD;;;AACAyG,EAAAA,iCAAiC,GAAG;AAChC,UAAMmB,QAAQ,GAAG,KAAK5I,aAAtB;;AACA,QAAI4I,QAAQ,KAAK,KAAjB,EAAwB;AACpB,YAAMD,OAAO,GAAG,KAAK9J,WAAL,CAAiBwC,aAAjC;AACA,YAAMzE,KAAK,GAAG+L,OAAO,CAAC/L,KAAtB,CAFoB,CAGpB;AACA;;AACA,UAAIgM,QAAQ,KAAK,IAAb,IAAsBD,OAAO,CAACE,QAAR,KAAqB,OAArB,IAAgCF,OAAO,CAACE,QAAR,KAAqB,UAA/E,EAA4F;AACxFjM,QAAAA,KAAK,CAACkM,UAAN,GACIlM,KAAK,CAACmM,YAAN,GACInM,KAAK,CAACoM,gBAAN,GACIpM,KAAK,CAACqM,aAAN,GACI,MAJhB;AAKH,OAXmB,CAYpB;AACA;;;AACA,UAAIL,QAAQ,KAAK,IAAb,IAAqB,CAACD,OAAO,CAACO,SAAlC,EAA6C;AACzCtM,QAAAA,KAAK,CAACuM,cAAN,GAAuB,MAAvB;AACH;;AACDvM,MAAAA,KAAK,CAACwM,WAAN,GAAoB,MAApB;AACAxM,MAAAA,KAAK,CAACyM,uBAAN,GAAgC,aAAhC;AACH;AACJ;;AAlhBiB;;AAohBtB3K,eAAe,CAAC4K,IAAhB;AAAkGxO,EAAAA,EAAlG;AAAA;;AACA4D,eAAe,CAAC6K,IAAhB,kBADkGzO,EAClG;AAAA,QAAgG4D,eAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA,qDAFkG5D,EAElG,mBAA2F4D,eAA3F,EAAwH,CAAC;AAC7G8K,IAAAA,IAAI,EAAExO;AADuG,GAAD,CAAxH,EAE4B,YAAY;AAChC,WAAO,CAAC;AAAEwO,MAAAA,IAAI,EAAElP,EAAE,CAACC;AAAX,KAAD,EAAuB;AAAEiP,MAAAA,IAAI,EAAE1O,EAAE,CAAC2O;AAAX,KAAvB,EAAgD;AAAED,MAAAA,IAAI,EAAE9N,EAAE,CAACgO;AAAX,KAAhD,EAA+E;AAAEF,MAAAA,IAAI,EAAE1O,EAAE,CAAC6O;AAAX,KAA/E,EAA8G;AAAEH,MAAAA,IAAI,EAAE1O,EAAE,CAAC8O;AAAX,KAA9G,EAAmI;AAAEJ,MAAAA,IAAI,EAAEtN,EAAE,CAAC2N;AAAX,KAAnI,EAA0J;AAAEL,MAAAA,IAAI,EAAE/O,EAAE,CAACqP;AAAX,KAA1J,EAAsL;AAAEN,MAAAA,IAAI,EAAE/O,EAAE,CAACsP;AAAX,KAAtL,EAAiN;AAAEP,MAAAA,IAAI,EAAEQ;AAAR,KAAjN,EAAsO;AAAER,MAAAA,IAAI,EAAE/M,EAAE,CAACwN;AAAX,KAAtO,EAAmQ;AAAET,MAAAA,IAAI,EAAEQ;AAAR,KAAnQ,EAAwR;AAAER,MAAAA,IAAI,EAAEQ,SAAR;AAAmBE,MAAAA,UAAU,EAAE,CAAC;AAC/SV,QAAAA,IAAI,EAAEvO,MADyS;AAE/SkP,QAAAA,IAAI,EAAE,CAACvP,QAAD;AAFyS,OAAD;AAA/B,KAAxR,CAAP;AAIH,GAPL,EAOuB;AAAE2C,IAAAA,QAAQ,EAAE,CAAC;AACpBiM,MAAAA,IAAI,EAAEtO,KADc;AAEpBiP,MAAAA,IAAI,EAAE,CAAC,oBAAD;AAFc,KAAD,CAAZ;AAGPpJ,IAAAA,QAAQ,EAAE,CAAC;AACXyI,MAAAA,IAAI,EAAEtO,KADK;AAEXiP,MAAAA,IAAI,EAAE,CAAC,oBAAD;AAFK,KAAD,CAHH;AAMP5L,IAAAA,SAAS,EAAE,CAAC;AACZiL,MAAAA,IAAI,EAAEtO,KADM;AAEZiP,MAAAA,IAAI,EAAE,CAAC,qBAAD;AAFM,KAAD,CANJ;AASP3L,IAAAA,SAAS,EAAE,CAAC;AACZgL,MAAAA,IAAI,EAAEtO,KADM;AAEZiP,MAAAA,IAAI,EAAE,CAAC,qBAAD;AAFM,KAAD,CATJ;AAYPnK,IAAAA,aAAa,EAAE,CAAC;AAChBwJ,MAAAA,IAAI,EAAEtO,KADU;AAEhBiP,MAAAA,IAAI,EAAE,CAAC,yBAAD;AAFU,KAAD,CAZR;AAePhJ,IAAAA,OAAO,EAAE,CAAC;AACVqI,MAAAA,IAAI,EAAEtO,KADI;AAEViP,MAAAA,IAAI,EAAE,CAAC,YAAD;AAFI,KAAD,CAfF;AAkBPpI,IAAAA,YAAY,EAAE,CAAC;AACfyH,MAAAA,IAAI,EAAEtO,KADS;AAEfiP,MAAAA,IAAI,EAAE,CAAC,iBAAD;AAFS,KAAD;AAlBP,GAPvB;AAAA;AA6BA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,UAAN,SAAyB1L,eAAzB,CAAyC;AACrCC,EAAAA,WAAW,CAAChB,OAAD,EAAU0M,UAAV,EAAsBC,gBAAtB,EAAwCC,gBAAxC,EAA0DC,MAA1D,EAAkEC,QAAlE,EAA4EC,aAA5E,EAA2FC,YAA3F,EAAyGvL,cAAzG,EAAyHwL,GAAzH,EAA8HC,cAA9H,EAA8ItL,SAA9I,EAAyJ;AAChK,UAAM5B,OAAN,EAAe0M,UAAf,EAA2BC,gBAA3B,EAA6CC,gBAA7C,EAA+DC,MAA/D,EAAuEC,QAAvE,EAAiFC,aAAjF,EAAgGC,YAAhG,EAA8GvL,cAA9G,EAA8HwL,GAA9H,EAAmIC,cAAnI,EAAmJtL,SAAnJ;AACA,SAAKkE,iBAAL,GAAyBqH,gBAAzB;AACH;;AAJoC;;AAMzCV,UAAU,CAACd,IAAX;AAAA,mBAAuGc,UAAvG,EA3CkGtP,EA2ClG,mBAAmIR,EAAE,CAACC,OAAtI,GA3CkGO,EA2ClG,mBAA0JA,EAAE,CAAC2O,UAA7J,GA3CkG3O,EA2ClG,mBAAoLY,EAAE,CAACgO,gBAAvL,GA3CkG5O,EA2ClG,mBAAoNA,EAAE,CAAC6O,gBAAvN,GA3CkG7O,EA2ClG,mBAAoPA,EAAE,CAAC8O,MAAvP,GA3CkG9O,EA2ClG,mBAA0QoB,EAAE,CAAC2N,QAA7Q,GA3CkG/O,EA2ClG,mBAAkSL,EAAE,CAACqP,aAArS,GA3CkGhP,EA2ClG,mBAA+TL,EAAE,CAACsP,YAAlU,GA3CkGjP,EA2ClG,mBAA2V2C,2BAA3V,GA3CkG3C,EA2ClG,mBAAmY2B,EAAE,CAACwN,cAAtY,MA3CkGnP,EA2ClG,mBAAibqD,2BAAjb,MA3CkGrD,EA2ClG,mBAAyeF,QAAze;AAAA;;AACAwP,UAAU,CAACb,IAAX,kBA5CkGzO,EA4ClG;AAAA,QAA2FsP,UAA3F;AAAA;AAAA;AAAA;AAAA,aA5CkGtP,EA4ClG;AAAA;;AACA;AAAA,qDA7CkGA,EA6ClG,mBAA2FsP,UAA3F,EAAmH,CAAC;AACxGZ,IAAAA,IAAI,EAAExO,SADkG;AAExGmP,IAAAA,IAAI,EAAE,CAAC;AACCY,MAAAA,QAAQ,EAAE,cADX;AAECC,MAAAA,QAAQ,EAAE,YAFX;AAGCC,MAAAA,IAAI,EAAE;AACF,iBAAS;AADP;AAHP,KAAD;AAFkG,GAAD,CAAnH,EAS4B,YAAY;AAChC,WAAO,CAAC;AAAEzB,MAAAA,IAAI,EAAElP,EAAE,CAACC;AAAX,KAAD,EAAuB;AAAEiP,MAAAA,IAAI,EAAE1O,EAAE,CAAC2O;AAAX,KAAvB,EAAgD;AAAED,MAAAA,IAAI,EAAE9N,EAAE,CAACgO;AAAX,KAAhD,EAA+E;AAAEF,MAAAA,IAAI,EAAE1O,EAAE,CAAC6O;AAAX,KAA/E,EAA8G;AAAEH,MAAAA,IAAI,EAAE1O,EAAE,CAAC8O;AAAX,KAA9G,EAAmI;AAAEJ,MAAAA,IAAI,EAAEtN,EAAE,CAAC2N;AAAX,KAAnI,EAA0J;AAAEL,MAAAA,IAAI,EAAE/O,EAAE,CAACqP;AAAX,KAA1J,EAAsL;AAAEN,MAAAA,IAAI,EAAE/O,EAAE,CAACsP;AAAX,KAAtL,EAAiN;AAAEP,MAAAA,IAAI,EAAEQ,SAAR;AAAmBE,MAAAA,UAAU,EAAE,CAAC;AACxOV,QAAAA,IAAI,EAAEvO,MADkO;AAExOkP,QAAAA,IAAI,EAAE,CAAC1M,2BAAD;AAFkO,OAAD;AAA/B,KAAjN,EAGW;AAAE+L,MAAAA,IAAI,EAAE/M,EAAE,CAACwN,cAAX;AAA2BC,MAAAA,UAAU,EAAE,CAAC;AAC1CV,QAAAA,IAAI,EAAErO;AADoC,OAAD;AAAvC,KAHX,EAKW;AAAEqO,MAAAA,IAAI,EAAEQ,SAAR;AAAmBE,MAAAA,UAAU,EAAE,CAAC;AAClCV,QAAAA,IAAI,EAAErO;AAD4B,OAAD,EAElC;AACCqO,QAAAA,IAAI,EAAEvO,MADP;AAECkP,QAAAA,IAAI,EAAE,CAAChM,2BAAD;AAFP,OAFkC;AAA/B,KALX,EAUW;AAAEqL,MAAAA,IAAI,EAAEQ,SAAR;AAAmBE,MAAAA,UAAU,EAAE,CAAC;AAClCV,QAAAA,IAAI,EAAEvO,MAD4B;AAElCkP,QAAAA,IAAI,EAAE,CAACvP,QAAD;AAF4B,OAAD;AAA/B,KAVX,CAAP;AAcH,GAxBL;AAAA;;AAyBA,MAAMsQ,qBAAN,CAA4B;AACxBvM,EAAAA,WAAW,CAACwM,kBAAD,EAAqBC,aAArB,EAAoC;AAC3C,SAAKD,kBAAL,GAA0BA,kBAA1B;AACA;;AACA,SAAKE,WAAL,GAAmB,SAAnB;AACA;;AACA,SAAKC,mBAAL,GAA2B,KAA3B;AACA;;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA;;AACA,SAAKC,OAAL,GAAe,IAAIlP,OAAJ,EAAf;AACA,SAAKmP,mBAAL,GAA2BL,aAAa,KAAK,gBAA7C;AACH;AACD;AACJ;AACA;AACA;;;AACIvK,EAAAA,IAAI,CAACqC,KAAD,EAAQ;AACR;AACAX,IAAAA,YAAY,CAAC,KAAKa,cAAN,CAAZ;AACA,SAAKD,cAAL,GAAsBuE,UAAU,CAAC,MAAM;AACnC,WAAKgE,iBAAL,CAAuB,IAAvB;;AACA,WAAKvI,cAAL,GAAsB6G,SAAtB;AACH,KAH+B,EAG7B9G,KAH6B,CAAhC;AAIH;AACD;AACJ;AACA;AACA;;;AACIlC,EAAAA,IAAI,CAACkC,KAAD,EAAQ;AACR;AACAX,IAAAA,YAAY,CAAC,KAAKY,cAAN,CAAZ;AACA,SAAKC,cAAL,GAAsBsE,UAAU,CAAC,MAAM;AACnC,WAAKgE,iBAAL,CAAuB,KAAvB;;AACA,WAAKtI,cAAL,GAAsB4G,SAAtB;AACH,KAH+B,EAG7B9G,KAH6B,CAAhC;AAIH;AACD;;;AACAW,EAAAA,WAAW,GAAG;AACV,WAAO,KAAK2H,OAAZ;AACH;AACD;;;AACAzH,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKwH,UAAZ;AACH;;AACDjJ,EAAAA,WAAW,GAAG;AACVC,IAAAA,YAAY,CAAC,KAAKY,cAAN,CAAZ;AACAZ,IAAAA,YAAY,CAAC,KAAKa,cAAN,CAAZ;;AACA,SAAKoI,OAAL,CAAaxI,QAAb;;AACA,SAAKY,eAAL,GAAuB,IAAvB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIuB,EAAAA,sBAAsB,GAAG;AACrB,QAAI,KAAKmG,mBAAT,EAA8B;AAC1B,WAAKtK,IAAL,CAAU,CAAV;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACIgG,EAAAA,aAAa,GAAG;AACZ,SAAKmE,kBAAL,CAAwBQ,YAAxB;AACH;;AACDC,EAAAA,iBAAiB,CAAC;AAAE9D,IAAAA;AAAF,GAAD,EAAoB;AACjC,QAAI,CAACA,aAAD,IAAkB,CAAC,KAAKlE,eAAL,CAAqBoE,QAArB,CAA8BF,aAA9B,CAAvB,EAAqE;AACjE,WAAK9G,IAAL,CAAU,KAAKE,oBAAf;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACI2K,EAAAA,OAAO,GAAG,CAAG;AACb;;;AACAC,EAAAA,mBAAmB,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAoB;AACnC,QAAIA,aAAa,KAAK,KAAKC,cAAvB,IAAyCD,aAAa,KAAK,KAAKE,cAApE,EAAoF;AAChF,WAAKC,kBAAL,CAAwBH,aAAa,KAAK,KAAKC,cAA/C;AACH;AACJ;AACD;;;AACAE,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,QAAIA,SAAJ,EAAe;AACX,WAAKb,mBAAL,GAA2B,IAA3B;AACH,KAFD,MAGK,IAAI,CAAC,KAAKvH,SAAL,EAAL,EAAuB;AACxB,WAAKyH,OAAL,CAAazI,IAAb;AACH;AACJ;AACD;;;AACA2I,EAAAA,iBAAiB,CAAC3H,SAAD,EAAY;AACzB;AACA;AACA;AACA,UAAMqI,OAAO,GAAG,KAAKC,QAAL,CAAchL,aAA9B;AACA,UAAMiL,SAAS,GAAG,KAAKN,cAAvB;AACA,UAAMO,SAAS,GAAG,KAAKN,cAAvB;AACAG,IAAAA,OAAO,CAACI,SAAR,CAAkBC,MAAlB,CAAyB1I,SAAS,GAAGwI,SAAH,GAAeD,SAAjD;AACAF,IAAAA,OAAO,CAACI,SAAR,CAAkBE,GAAlB,CAAsB3I,SAAS,GAAGuI,SAAH,GAAeC,SAA9C;AACA,SAAKhB,UAAL,GAAkBxH,SAAlB,CATyB,CAUzB;AACA;;AACA,QAAIA,SAAS,IAAI,CAAC,KAAK0H,mBAAnB,IAA0C,OAAOkB,gBAAP,KAA4B,UAA1E,EAAsF;AAClF,YAAMC,MAAM,GAAGD,gBAAgB,CAACP,OAAD,CAA/B,CADkF,CAElF;;AACA,UAAIQ,MAAM,CAACC,gBAAP,CAAwB,oBAAxB,MAAkD,IAAlD,IACAD,MAAM,CAACC,gBAAP,CAAwB,gBAAxB,MAA8C,MADlD,EAC0D;AACtD,aAAKpB,mBAAL,GAA2B,IAA3B;AACH;AACJ;;AACD,QAAI1H,SAAJ,EAAe;AACX,WAAK8H,OAAL;AACH;;AACD,QAAI,KAAKJ,mBAAT,EAA8B;AAC1BW,MAAAA,OAAO,CAACI,SAAR,CAAkBE,GAAlB,CAAsB,yBAAtB;;AACA,WAAKR,kBAAL,CAAwBnI,SAAxB;AACH;AACJ;;AA3HuB;;AA6H5BmH,qBAAqB,CAAC5B,IAAtB;AAAA,mBAAkH4B,qBAAlH,EAnMkGpQ,EAmMlG,mBAAyJA,EAAE,CAACgS,iBAA5J,GAnMkGhS,EAmMlG,mBAA0LuB,qBAA1L;AAAA;;AACA6O,qBAAqB,CAAC3B,IAAtB,kBApMkGzO,EAoMlG;AAAA,QAAsGoQ;AAAtG;;AACA;AAAA,qDArMkGpQ,EAqMlG,mBAA2FoQ,qBAA3F,EAA8H,CAAC;AACnH1B,IAAAA,IAAI,EAAExO;AAD6G,GAAD,CAA9H,EAE4B,YAAY;AAChC,WAAO,CAAC;AAAEwO,MAAAA,IAAI,EAAE1O,EAAE,CAACgS;AAAX,KAAD,EAAiC;AAAEtD,MAAAA,IAAI,EAAEQ,SAAR;AAAmBE,MAAAA,UAAU,EAAE,CAAC;AACxDV,QAAAA,IAAI,EAAErO;AADkD,OAAD,EAExD;AACCqO,QAAAA,IAAI,EAAEvO,MADP;AAECkP,QAAAA,IAAI,EAAE,CAAC9N,qBAAD;AAFP,OAFwD;AAA/B,KAAjC,CAAP;AAMH,GATL;AAAA;AAUA;AACA;AACA;AACA;;;AACA,MAAMyO,gBAAN,SAA+BI,qBAA/B,CAAqD;AACjDvM,EAAAA,WAAW,CAACoO,iBAAD,EAAoBC,mBAApB,EAAyC5B,aAAzC,EAAwD;AAC/D,UAAM2B,iBAAN,EAAyB3B,aAAzB;AACA,SAAK4B,mBAAL,GAA2BA,mBAA3B;AACA;;AACA,SAAKC,UAAL,GAAkB,KAAKD,mBAAL,CAAyBE,OAAzB,CAAiCjR,WAAW,CAACkR,OAA7C,CAAlB;AACA,SAAKnB,cAAL,GAAsB,kBAAtB;AACA,SAAKC,cAAL,GAAsB,kBAAtB;AACH;;AARgD;;AAUrDnB,gBAAgB,CAACxB,IAAjB;AAAA,mBAA6GwB,gBAA7G,EA7NkGhQ,EA6NlG,mBAA+IA,EAAE,CAACgS,iBAAlJ,GA7NkGhS,EA6NlG,mBAAgLkB,EAAE,CAACoR,kBAAnL,GA7NkGtS,EA6NlG,mBAAkNuB,qBAAlN;AAAA;;AACAyO,gBAAgB,CAACuC,IAAjB,kBA9NkGvS,EA8NlG;AAAA,QAAiGgQ,gBAAjG;AAAA;AAAA;AAAA;AA9NkGhQ,MAAAA,EA8NlG;AAAA;;AAAA;AAAA;;AA9NkGA,MAAAA,EA8NlG,qBA9NkGA,EA8NlG;AAAA;AAAA;AAAA,6BAA2L,MAA3L;AAAA;AAAA;AAAA;AA9NkGA,MAAAA,EA8NlG;AAAA,eAAiG,6BAAjG;AAAA;AAAA;;AAAA;AA9NkGA,MAAAA,EA8NlG;AAAA;AAAA;AAAA,aA9NkGA,EA8NlG;AAAA;AAAA;AAAA;AAAA;AAAA;AA9NkGA,MAAAA,EA8N0X,+BAA5d;AA9NkGA,MAAAA,EA8N0a;AAAA,eAAiB,+BAAjB;AAAA,QAA5gB;AA9NkGA,MAAAA,EA8NlG;AA9NkGA,MAAAA,EA8N8jB,UAAhqB;AA9NkGA,MAAAA,EA8NykB,eAA3qB;AAAA;;AAAA;AAAA;AA9NkGA,MAAAA,EA8NggB,+CA9NhgBA,EA8NggB,qEAAlmB;AA9NkGA,MAAAA,EA8N+d,wCAAjkB;AA9NkGA,MAAAA,EA8N8jB,aAAhqB;AA9NkGA,MAAAA,EA8N8jB,+BAAhqB;AAAA;AAAA;AAAA,eAA4gDH,EAAE,CAAC2S,OAA/gD;AAAA,UAAkmD3S,EAAE,CAAC4S,SAArmD;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA,qDA/NkGzS,EA+NlG,mBAA2FgQ,gBAA3F,EAAyH,CAAC;AAC9GtB,IAAAA,IAAI,EAAEpO,SADwG;AAE9G+O,IAAAA,IAAI,EAAE,CAAC;AAAEY,MAAAA,QAAQ,EAAE,uBAAZ;AAAqCyC,MAAAA,aAAa,EAAEnS,iBAAiB,CAACoS,IAAtE;AAA4EC,MAAAA,eAAe,EAAEpS,uBAAuB,CAACqS,MAArH;AAA6H1C,MAAAA,IAAI,EAAE;AAC9H;AACA;AACA,wBAAgB,wBAH8G;AAI9H,wBAAgB,2BAJ8G;AAK9H,uBAAe;AAL+G,OAAnI;AAMI2C,MAAAA,QAAQ,EAAE,yNANd;AAMyOhB,MAAAA,MAAM,EAAE,CAAC,qzBAAD;AANjP,KAAD;AAFwG,GAAD,CAAzH,EAS4B,YAAY;AAChC,WAAO,CAAC;AAAEpD,MAAAA,IAAI,EAAE1O,EAAE,CAACgS;AAAX,KAAD,EAAiC;AAAEtD,MAAAA,IAAI,EAAExN,EAAE,CAACoR;AAAX,KAAjC,EAAkE;AAAE5D,MAAAA,IAAI,EAAEQ,SAAR;AAAmBE,MAAAA,UAAU,EAAE,CAAC;AACzFV,QAAAA,IAAI,EAAErO;AADmF,OAAD,EAEzF;AACCqO,QAAAA,IAAI,EAAEvO,MADP;AAECkP,QAAAA,IAAI,EAAE,CAAC9N,qBAAD;AAFP,OAFyF;AAA/B,KAAlE,CAAP;AAMH,GAhBL,EAgBuB;AAAEgQ,IAAAA,QAAQ,EAAE,CAAC;AACpB7C,MAAAA,IAAI,EAAEjO,SADc;AAEpB4O,MAAAA,IAAI,EAAE,CAAC,SAAD,EAAY;AACV;AACA;AACA0D,QAAAA,MAAM,EAAE;AAHE,OAAZ;AAFc,KAAD;AAAZ,GAhBvB;AAAA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,gBAAN,CAAuB;;AAEvBA,gBAAgB,CAACxE,IAAjB;AAAA,mBAA6GwE,gBAA7G;AAAA;;AACAA,gBAAgB,CAACC,IAAjB,kBAlQkGjT,EAkQlG;AAAA,QAA8GgT;AAA9G;AACAA,gBAAgB,CAACE,IAAjB,kBAnQkGlT,EAmQlG;AAAA,aAA2I,CAACiD,4CAAD,CAA3I;AAAA,YAAqM,CAACrD,UAAD,EAAaG,YAAb,EAA2BL,aAA3B,EAA0CiB,eAA1C,CAArM,EAAiQA,eAAjQ,EAAkRE,mBAAlR;AAAA;;AACA;AAAA,qDApQkGb,EAoQlG,mBAA2FgT,gBAA3F,EAAyH,CAAC;AAC9GtE,IAAAA,IAAI,EAAEhO,QADwG;AAE9G2O,IAAAA,IAAI,EAAE,CAAC;AACC8D,MAAAA,OAAO,EAAE,CAACvT,UAAD,EAAaG,YAAb,EAA2BL,aAA3B,EAA0CiB,eAA1C,CADV;AAECyS,MAAAA,OAAO,EAAE,CAAC9D,UAAD,EAAaU,gBAAb,EAA+BrP,eAA/B,EAAgDE,mBAAhD,CAFV;AAGCwS,MAAAA,YAAY,EAAE,CAAC/D,UAAD,EAAaU,gBAAb,CAHf;AAICsD,MAAAA,SAAS,EAAE,CAACrQ,4CAAD;AAJZ,KAAD;AAFwG,GAAD,CAAzH;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAMsQ,oBAAoB,GAAG;AACzB;AACAC,EAAAA,YAAY,EAAE5R,OAAO,CAAC,OAAD,EAAU,CAC3BC,KAAK,CAAC,uBAAD,EAA0BC,KAAK,CAAC;AAAE2R,IAAAA,OAAO,EAAE,CAAX;AAAcC,IAAAA,SAAS,EAAE;AAAzB,GAAD,CAA/B,CADsB,EAE3B7R,KAAK,CAAC,SAAD,EAAYC,KAAK,CAAC;AAAE4R,IAAAA,SAAS,EAAE;AAAb,GAAD,CAAjB,CAFsB,EAG3B3R,UAAU,CAAC,cAAD,EAAiBC,OAAO,CAAC,kCAAD,EAAqCC,SAAS,CAAC,CAC7EH,KAAK,CAAC;AAAE2R,IAAAA,OAAO,EAAE,CAAX;AAAcC,IAAAA,SAAS,EAAE,UAAzB;AAAqCC,IAAAA,MAAM,EAAE;AAA7C,GAAD,CADwE,EAE7E7R,KAAK,CAAC;AAAE2R,IAAAA,OAAO,EAAE,GAAX;AAAgBC,IAAAA,SAAS,EAAE,aAA3B;AAA0CC,IAAAA,MAAM,EAAE;AAAlD,GAAD,CAFwE,EAG7E7R,KAAK,CAAC;AAAE2R,IAAAA,OAAO,EAAE,CAAX;AAAcC,IAAAA,SAAS,EAAE,UAAzB;AAAqCC,IAAAA,MAAM,EAAE;AAA7C,GAAD,CAHwE,CAAD,CAA9C,CAAxB,CAHiB,EAQ3B5R,UAAU,CAAC,aAAD,EAAgBC,OAAO,CAAC,kCAAD,EAAqCF,KAAK,CAAC;AAAE2R,IAAAA,OAAO,EAAE;AAAX,GAAD,CAA1C,CAAvB,CARiB,CAAV;AAFI,CAA7B;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASpQ,2BAAT,EAAsCG,mCAAtC,EAA2Eb,2BAA3E,EAAwGC,mCAAxG,EAA6IK,4CAA7I,EAA2LqM,UAA3L,EAAuM0D,gBAAvM,EAAyN9Q,kBAAzN,EAA6OC,mBAA7O,EAAkQ6N,gBAAlQ,EAAoRpM,eAApR,EAAqSwM,qBAArS,EAA4T5N,iCAA5T,EAA+V+Q,oBAA/V","sourcesContent":["import * as i1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i7 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Input, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i6 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i3 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport * as i5 from '@angular/cdk/bidi';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\nclass _MatTooltipBase {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat';\n        this._showDelay = this._defaultOptions.showDelay;\n        this._hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        var _a;\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The default delay in ms before showing the tooltip after show is called */\n    get showDelay() {\n        return this._showDelay;\n    }\n    set showDelay(value) {\n        this._showDelay = coerceNumberProperty(value);\n    }\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    get hideDelay() {\n        return this._hideDelay;\n    }\n    set hideDelay(value) {\n        this._hideDelay = coerceNumberProperty(value);\n        if (this._tooltipInstance) {\n            this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() {\n        return this._message;\n    }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() {\n        return this._tooltipClass;\n    }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor\n            .monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay) {\n        if (this.disabled ||\n            !this.message ||\n            (this._isTooltipVisible() &&\n                !this._tooltipInstance._showTimeoutId &&\n                !this._tooltipInstance._hideTimeoutId)) {\n            return;\n        }\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal =\n            this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        const instance = (this._tooltipInstance = overlayRef.attach(this._portal).instance);\n        instance._triggerElement = this._elementRef.nativeElement;\n        instance._mouseLeaveHideDelay = this._hideDelay;\n        instance\n            .afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        instance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay() {\n        var _a;\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy(),\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef\n            .detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef\n            .outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => { var _a; return (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a._handleBodyInteraction(); });\n        this._overlayRef\n            .keydownEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(event => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        });\n        if ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.disableTooltipInteractivity) {\n            this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);\n        }\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)),\n            this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback)),\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y },\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y },\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled ||\n            !this.message ||\n            !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners.push([\n                'mouseenter',\n                () => {\n                    this._setupPointerExitEventsIfNeeded();\n                    this.show();\n                },\n            ]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners.push([\n                'touchstart',\n                () => {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n                },\n            ]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push([\n                'mouseleave',\n                event => {\n                    var _a;\n                    const newTarget = event.relatedTarget;\n                    if (!newTarget || !((_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.overlayElement.contains(newTarget))) {\n                        this.hide();\n                    }\n                },\n            ], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect =\n                    style.msUserSelect =\n                        style.webkitUserSelect =\n                            style.MozUserSelect =\n                                'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\n_MatTooltipBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTooltipBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatTooltipBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatTooltipBase, inputs: { position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatTooltipBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i2.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i3.Platform }, { type: i4.AriaDescriber }, { type: i4.FocusMonitor }, { type: undefined }, { type: i5.Directionality }, { type: undefined }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { position: [{\n                type: Input,\n                args: ['matTooltipPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['matTooltipDisabled']\n            }], showDelay: [{\n                type: Input,\n                args: ['matTooltipShowDelay']\n            }], hideDelay: [{\n                type: Input,\n                args: ['matTooltipHideDelay']\n            }], touchGestures: [{\n                type: Input,\n                args: ['matTooltipTouchGestures']\n            }], message: [{\n                type: Input,\n                args: ['matTooltip']\n            }], tooltipClass: [{\n                type: Input,\n                args: ['matTooltipClass']\n            }] } });\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n        super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n        this._tooltipComponent = TooltipComponent;\n    }\n}\nMatTooltip.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltip, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i2.ScrollDispatcher }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i3.Platform }, { token: i4.AriaDescriber }, { token: i4.FocusMonitor }, { token: MAT_TOOLTIP_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }, { token: MAT_TOOLTIP_DEFAULT_OPTIONS, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nMatTooltip.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTooltip, selector: \"[matTooltip]\", host: { classAttribute: \"mat-tooltip-trigger\" }, exportAs: [\"matTooltip\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTooltip]',\n                    exportAs: 'matTooltip',\n                    host: {\n                        'class': 'mat-tooltip-trigger',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i2.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i3.Platform }, { type: i4.AriaDescriber }, { type: i4.FocusMonitor }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n                    }] }, { type: i5.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\nclass _TooltipComponentBase {\n    constructor(_changeDetectorRef, animationMode) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Whether the tooltip is currently visible. */\n        this._isVisible = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        clearTimeout(this._hideTimeoutId);\n        this._showTimeoutId = setTimeout(() => {\n            this._toggleVisibility(true);\n            this._showTimeoutId = undefined;\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        clearTimeout(this._showTimeoutId);\n        this._hideTimeoutId = setTimeout(() => {\n            this._toggleVisibility(false);\n            this._hideTimeoutId = undefined;\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._isVisible;\n    }\n    ngOnDestroy() {\n        clearTimeout(this._showTimeoutId);\n        clearTimeout(this._hideTimeoutId);\n        this._onHide.complete();\n        this._triggerElement = null;\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    _handleMouseLeave({ relatedTarget }) {\n        if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {\n            this.hide(this._mouseLeaveHideDelay);\n        }\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() { }\n    /** Event listener dispatched when an animation on the tooltip finishes. */\n    _handleAnimationEnd({ animationName }) {\n        if (animationName === this._showAnimation || animationName === this._hideAnimation) {\n            this._finalizeAnimation(animationName === this._showAnimation);\n        }\n    }\n    /** Handles the cleanup after an animation has finished. */\n    _finalizeAnimation(toVisible) {\n        if (toVisible) {\n            this._closeOnInteraction = true;\n        }\n        else if (!this.isVisible()) {\n            this._onHide.next();\n        }\n    }\n    /** Toggles the visibility of the tooltip element. */\n    _toggleVisibility(isVisible) {\n        // We set the classes directly here ourselves so that toggling the tooltip state\n        // isn't bound by change detection. This allows us to hide it even if the\n        // view ref has been detached from the CD tree.\n        const tooltip = this._tooltip.nativeElement;\n        const showClass = this._showAnimation;\n        const hideClass = this._hideAnimation;\n        tooltip.classList.remove(isVisible ? hideClass : showClass);\n        tooltip.classList.add(isVisible ? showClass : hideClass);\n        this._isVisible = isVisible;\n        // It's common for internal apps to disable animations using `* { animation: none !important }`\n        // which can break the opening sequence. Try to detect such cases and work around them.\n        if (isVisible && !this._animationsDisabled && typeof getComputedStyle === 'function') {\n            const styles = getComputedStyle(tooltip);\n            // Use `getPropertyValue` to avoid issues with property renaming.\n            if (styles.getPropertyValue('animation-duration') === '0s' ||\n                styles.getPropertyValue('animation-name') === 'none') {\n                this._animationsDisabled = true;\n            }\n        }\n        if (isVisible) {\n            this._onShow();\n        }\n        if (this._animationsDisabled) {\n            tooltip.classList.add('_mat-animation-noopable');\n            this._finalizeAnimation(isVisible);\n        }\n    }\n}\n_TooltipComponentBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _TooltipComponentBase, deps: [{ token: i0.ChangeDetectorRef }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_TooltipComponentBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _TooltipComponentBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _TooltipComponentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    } });\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n    constructor(changeDetectorRef, _breakpointObserver, animationMode) {\n        super(changeDetectorRef, animationMode);\n        this._breakpointObserver = _breakpointObserver;\n        /** Stream that emits whether the user has a handset-sized display.  */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n        this._showAnimation = 'mat-tooltip-show';\n        this._hideAnimation = 'mat-tooltip-hide';\n    }\n}\nTooltipComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TooltipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i6.BreakpointObserver }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nTooltipComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: TooltipComponent, selector: \"mat-tooltip-component\", host: { attributes: { \"aria-hidden\": \"true\" }, listeners: { \"mouseleave\": \"_handleMouseLeave($event)\" }, properties: { \"style.zoom\": \"isVisible() ? 1 : null\" } }, viewQueries: [{ propertyName: \"_tooltip\", first: true, predicate: [\"tooltip\"], descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<div #tooltip\\n     class=\\\"mat-tooltip\\\"\\n     (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\">{{message}}</div>\\n\", styles: [\".mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis;transform:scale(0)}.mat-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}.mat-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-tooltip-show{0%{opacity:0;transform:scale(0)}50%{opacity:.5;transform:scale(0.99)}100%{opacity:1;transform:scale(1)}}@keyframes mat-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(1)}}.mat-tooltip-show{animation:mat-tooltip-show 200ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-tooltip-hide{animation:mat-tooltip-hide 100ms cubic-bezier(0, 0, 0.2, 1) forwards}\\n\"], directives: [{ type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], pipes: { \"async\": i7.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: TooltipComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tooltip-component', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                        '[style.zoom]': 'isVisible() ? 1 : null',\n                        '(mouseleave)': '_handleMouseLeave($event)',\n                        'aria-hidden': 'true',\n                    }, template: \"<div #tooltip\\n     class=\\\"mat-tooltip\\\"\\n     (animationend)=\\\"_handleAnimationEnd($event)\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\">{{message}}</div>\\n\", styles: [\".mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis;transform:scale(0)}.mat-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}.mat-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-tooltip-show{0%{opacity:0;transform:scale(0)}50%{opacity:.5;transform:scale(0.99)}100%{opacity:1;transform:scale(1)}}@keyframes mat-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(1)}}.mat-tooltip-show{animation:mat-tooltip-show 200ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-tooltip-hide{animation:mat-tooltip-hide 100ms cubic-bezier(0, 0, 0.2, 1) forwards}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: i6.BreakpointObserver }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { _tooltip: [{\n                type: ViewChild,\n                args: ['tooltip', {\n                        // Use a static query here since we interact directly with\n                        // the DOM which can happen before `ngAfterViewInit`.\n                        static: true,\n                    }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltipModule, declarations: [MatTooltip, TooltipComponent], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule], exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule] });\nMatTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltipModule, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule, CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n                    exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                    declarations: [MatTooltip, TooltipComponent],\n                    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 }),\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };\n"]},"metadata":{},"sourceType":"module"}