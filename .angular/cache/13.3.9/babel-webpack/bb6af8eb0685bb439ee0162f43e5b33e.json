{"ast":null,"code":"import { Headers } from '@angular/http';\nimport { Http, RequestOptions } from '@angular/http';\nimport { DID } from './did';\nimport { AppService } from '../../../app/app.service';\nimport 'rxjs/add/operator/toPromise';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"../../../app/app.service\";\nexport let DIDService = /*#__PURE__*/(() => {\n  class DIDService {\n    constructor(http, app_service) {\n      this.http = http;\n      this.app_service = app_service;\n      this.aDID = [];\n      this.account_id = null;\n      this.did = new DID();\n    }\n\n    get_DIDList() {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const getUrl = `${this.app_service.apiUrlDid}`;\n      return this.http.get(getUrl, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    get_DIDData(account_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const url5 = `${this.app_service.apiUrlAccounts}/${account_id}`;\n      return this.http.get(url5, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    add_DID(did) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(did);\n      const addUrl = `${this.app_service.apiUrlDid}`;\n      return this.http.post(addUrl, body, options).toPromise().then(response => response.json()).catch(err => this.app_service.handleError(err));\n    }\n\n    update_DID(did) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(did);\n      const updateUrl = `${this.app_service.apiUrlAccounts}/${did.account_id}`;\n      return this.http.put(updateUrl, body, options).toPromise().then(response => response.json()).catch(err => this.app_service.handleError(err));\n    }\n\n    assign_DID(did) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(did);\n      const assignUrl = `${this.app_service.apiUrlAccounts}/${did.account_id}/users/${did.user_id}`;\n      return this.http.put(assignUrl, body, options).toPromise().then(response => response.json()).catch(err => this.app_service.handleError(err));\n    }\n\n    send_program(did) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(did);\n      const sendProUrl = `${this.app_service.apiUrlPrograms}/faxtoemail`;\n      return this.http.post(sendProUrl, body, options).toPromise().then(response => response.json()).catch(err => this.app_service.handleError(err));\n    }\n\n    unassign_DID(did) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const deleteUr = `${this.app_service.apiUrlAccounts}/${did.account_id}/users`;\n      return this.http.delete(deleteUr, options).toPromise().then(response => response.json()).catch(err => this.handleError(err));\n    }\n\n    delete_DID(account_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const deleteUrl = `${this.app_service.apiUrlAccounts}/${account_id}`;\n      return this.http.delete(deleteUrl, options).toPromise().then(response => response.json()).catch(err => this.app_service.handleError(err));\n    }\n\n    batch_did(did) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(did);\n      const batchUrl = `${this.app_service.apiUrlAccounts} Loop End`;\n      return this.http.post(batchUrl, did, options).toPromise().then(response => response.json()).catch(err => this.app_service.handleError(err));\n    }\n\n    no_service(account_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const noServUrl = `${this.app_service.apiUrlAccounts}/${account_id}/programs`;\n      return this.http.delete(noServUrl, options).toPromise().then(response => response.json()).catch(err => this.app_service.handleError(err));\n    }\n\n    handleError(error) {\n      console.error('An error occurred', error); // for demo purposes only\n\n      return Promise.reject(error.message || error);\n    }\n\n  }\n\n  DIDService.ɵfac = function DIDService_Factory(t) {\n    return new (t || DIDService)(i0.ɵɵinject(i1.Http), i0.ɵɵinject(i2.AppService));\n  };\n\n  DIDService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DIDService,\n    factory: DIDService.ɵfac\n  });\n  return DIDService;\n})();","map":null,"metadata":{},"sourceType":"module"}