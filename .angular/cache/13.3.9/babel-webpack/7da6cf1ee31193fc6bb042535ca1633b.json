{"ast":null,"code":"import { DataSource } from '@angular/cdk/collections';\nimport { merge } from 'rxjs';\nexport class TransmissionDataSource extends DataSource {\n  constructor(transmissionDatabase, _sort, _paginator) {\n    super();\n    this.transmissionDatabase = transmissionDatabase;\n    this._sort = _sort;\n    this._paginator = _paginator;\n  }\n\n  connect() {\n    const displayDataChanges = [this.transmissionDatabase.dataChange, this._sort.sortChange, this._paginator.page];\n    return merge(...displayDataChanges).map(() => this.getSortedData()).map(data => this.paginate(data));\n  }\n\n  disconnect() {}\n\n  getSortedData() {\n    const data = this.transmissionDatabase.data.slice();\n\n    if (!this._sort.active || this._sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      let propertyA = '';\n      let propertyB = '';\n\n      switch (this._sort.active) {\n        case 'ID':\n          [propertyA, propertyB] = [a.transmission_id, b.transmission_id];\n          break;\n\n        case 'contact_id':\n          [propertyA, propertyB] = [a.contact_id, b.contact_id];\n          break;\n\n        case 'status':\n          [propertyA, propertyB] = [a.status, b.status];\n          break;\n      }\n\n      const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n      const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n      return (valueA < valueB ? -1 : 1) * (this._sort.direction === 'asc' ? 1 : -1);\n    });\n  }\n\n  paginate(data) {\n    const startIndex = this._paginator.pageIndex * this._paginator.pageSize;\n    return data.splice(startIndex, this._paginator.pageSize);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}