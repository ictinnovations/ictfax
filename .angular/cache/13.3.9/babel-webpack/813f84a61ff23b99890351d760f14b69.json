{"ast":null,"code":"import { EventEmitter, Directive, ElementRef, Input, Output, HostListener, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} node\n * @return {?}\n */\n\nimport * as Éµngcc0 from '@angular/core';\n\nfunction isElement(node) {\n  return !!(node && (node.nodeName || node.prop && node.attr && node.find));\n}\n\nclass FileLikeObject {\n  /**\n   * @param {?} fileOrInput\n   */\n  constructor(fileOrInput) {\n    this.rawFile = fileOrInput;\n    /** @type {?} */\n\n    let isInput = isElement(fileOrInput);\n    /** @type {?} */\n\n    let fakePathOrObject = isInput ? fileOrInput.value : fileOrInput;\n    /** @type {?} */\n\n    let postfix = typeof fakePathOrObject === 'string' ? 'FakePath' : 'Object';\n    /** @type {?} */\n\n    let method = '_createFrom' + postfix;\n\n    /** @type {?} */\n    this[method](fakePathOrObject);\n  }\n  /**\n   * @param {?} path\n   * @return {?}\n   */\n\n\n  _createFromFakePath(path) {\n    this.lastModifiedDate = void 0;\n    this.size = void 0;\n    this.type = 'like/' + path.slice(path.lastIndexOf('.') + 1).toLowerCase();\n    this.name = path.slice(path.lastIndexOf('/') + path.lastIndexOf('\\\\') + 2);\n  }\n  /**\n   * @param {?} object\n   * @return {?}\n   */\n\n\n  _createFromObject(object) {\n    this.size = object.size;\n    this.type = object.type;\n    this.name = object.name;\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  FileLikeObject.prototype.lastModifiedDate;\n  /** @type {?} */\n\n  FileLikeObject.prototype.size;\n  /** @type {?} */\n\n  FileLikeObject.prototype.type;\n  /** @type {?} */\n\n  FileLikeObject.prototype.name;\n  /** @type {?} */\n\n  FileLikeObject.prototype.rawFile;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nclass FileItem {\n  /**\n   * @param {?} uploader\n   * @param {?} some\n   * @param {?} options\n   */\n  constructor(uploader, some, options) {\n    this.url = '/';\n    this.headers = [];\n    this.withCredentials = true;\n    this.formData = [];\n    this.isReady = false;\n    this.isUploading = false;\n    this.isUploaded = false;\n    this.isSuccess = false;\n    this.isCancel = false;\n    this.isError = false;\n    this.progress = 0;\n    this.index = void 0;\n    this.uploader = uploader;\n    this.some = some;\n    this.options = options;\n    this.file = new FileLikeObject(some);\n    this._file = some;\n\n    if (uploader.options) {\n      this.method = uploader.options.method || 'POST';\n      this.alias = uploader.options.itemAlias || 'file';\n    }\n\n    this.url = uploader.options.url;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  upload() {\n    try {\n      this.uploader.uploadItem(this);\n    } catch (e) {\n      this.uploader._onCompleteItem(this, '', 0, {});\n\n      this.uploader._onErrorItem(this, '', 0, {});\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  cancel() {\n    this.uploader.cancelItem(this);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  remove() {\n    this.uploader.removeFromQueue(this);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  onBeforeUpload() {\n    return void 0;\n  }\n  /**\n   * @param {?} form\n   * @return {?}\n   */\n\n\n  onBuildForm(form) {\n    return {\n      form\n    };\n  }\n  /**\n   * @param {?} progress\n   * @return {?}\n   */\n\n\n  onProgress(progress) {\n    return {\n      progress\n    };\n  }\n  /**\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  onSuccess(response, status, headers) {\n    return {\n      response,\n      status,\n      headers\n    };\n  }\n  /**\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  onError(response, status, headers) {\n    return {\n      response,\n      status,\n      headers\n    };\n  }\n  /**\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  onCancel(response, status, headers) {\n    return {\n      response,\n      status,\n      headers\n    };\n  }\n  /**\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  onComplete(response, status, headers) {\n    return {\n      response,\n      status,\n      headers\n    };\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _onBeforeUpload() {\n    this.isReady = true;\n    this.isUploading = true;\n    this.isUploaded = false;\n    this.isSuccess = false;\n    this.isCancel = false;\n    this.isError = false;\n    this.progress = 0;\n    this.onBeforeUpload();\n  }\n  /**\n   * @param {?} form\n   * @return {?}\n   */\n\n\n  _onBuildForm(form) {\n    this.onBuildForm(form);\n  }\n  /**\n   * @param {?} progress\n   * @return {?}\n   */\n\n\n  _onProgress(progress) {\n    this.progress = progress;\n    this.onProgress(progress);\n  }\n  /**\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  _onSuccess(response, status, headers) {\n    this.isReady = false;\n    this.isUploading = false;\n    this.isUploaded = true;\n    this.isSuccess = true;\n    this.isCancel = false;\n    this.isError = false;\n    this.progress = 100;\n    this.index = void 0;\n    this.onSuccess(response, status, headers);\n  }\n  /**\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  _onError(response, status, headers) {\n    this.isReady = false;\n    this.isUploading = false;\n    this.isUploaded = true;\n    this.isSuccess = false;\n    this.isCancel = false;\n    this.isError = true;\n    this.progress = 0;\n    this.index = void 0;\n    this.onError(response, status, headers);\n  }\n  /**\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  _onCancel(response, status, headers) {\n    this.isReady = false;\n    this.isUploading = false;\n    this.isUploaded = false;\n    this.isSuccess = false;\n    this.isCancel = true;\n    this.isError = false;\n    this.progress = 0;\n    this.index = void 0;\n    this.onCancel(response, status, headers);\n  }\n  /**\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  _onComplete(response, status, headers) {\n    this.onComplete(response, status, headers);\n\n    if (this.uploader.options.removeAfterUpload) {\n      this.remove();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  _prepareToUploading() {\n    this.index = this.index || ++this.uploader._nextIndex;\n    this.isReady = true;\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  FileItem.prototype.file;\n  /** @type {?} */\n\n  FileItem.prototype._file;\n  /** @type {?} */\n\n  FileItem.prototype.alias;\n  /** @type {?} */\n\n  FileItem.prototype.url;\n  /** @type {?} */\n\n  FileItem.prototype.method;\n  /** @type {?} */\n\n  FileItem.prototype.headers;\n  /** @type {?} */\n\n  FileItem.prototype.withCredentials;\n  /** @type {?} */\n\n  FileItem.prototype.formData;\n  /** @type {?} */\n\n  FileItem.prototype.isReady;\n  /** @type {?} */\n\n  FileItem.prototype.isUploading;\n  /** @type {?} */\n\n  FileItem.prototype.isUploaded;\n  /** @type {?} */\n\n  FileItem.prototype.isSuccess;\n  /** @type {?} */\n\n  FileItem.prototype.isCancel;\n  /** @type {?} */\n\n  FileItem.prototype.isError;\n  /** @type {?} */\n\n  FileItem.prototype.progress;\n  /** @type {?} */\n\n  FileItem.prototype.index;\n  /** @type {?} */\n\n  FileItem.prototype._xhr;\n  /** @type {?} */\n\n  FileItem.prototype._form;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  FileItem.prototype.uploader;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  FileItem.prototype.some;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  FileItem.prototype.options;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet FileType = /*#__PURE__*/(() => {\n  class FileType {\n    /**\n     * @param {?} file\n     * @return {?}\n     */\n    static getMimeClass(file) {\n      /** @type {?} */\n      let mimeClass = 'application';\n\n      if (this.mime_psd.indexOf(file.type) !== -1) {\n        mimeClass = 'image';\n      } else if (file.type.match('image.*')) {\n        mimeClass = 'image';\n      } else if (file.type.match('video.*')) {\n        mimeClass = 'video';\n      } else if (file.type.match('audio.*')) {\n        mimeClass = 'audio';\n      } else if (file.type === 'application/pdf') {\n        mimeClass = 'pdf';\n      } else if (this.mime_compress.indexOf(file.type) !== -1) {\n        mimeClass = 'compress';\n      } else if (this.mime_doc.indexOf(file.type) !== -1) {\n        mimeClass = 'doc';\n      } else if (this.mime_xsl.indexOf(file.type) !== -1) {\n        mimeClass = 'xls';\n      } else if (this.mime_ppt.indexOf(file.type) !== -1) {\n        mimeClass = 'ppt';\n      }\n\n      if (mimeClass === 'application') {\n        mimeClass = this.fileTypeDetection(file.name);\n      }\n\n      return mimeClass;\n    }\n    /**\n     * @param {?} inputFilename\n     * @return {?}\n     */\n\n\n    static fileTypeDetection(inputFilename) {\n      /** @type {?} */\n      let types = {\n        'jpg': 'image',\n        'jpeg': 'image',\n        'tif': 'image',\n        'psd': 'image',\n        'bmp': 'image',\n        'png': 'image',\n        'nef': 'image',\n        'tiff': 'image',\n        'cr2': 'image',\n        'dwg': 'image',\n        'cdr': 'image',\n        'ai': 'image',\n        'indd': 'image',\n        'pin': 'image',\n        'cdp': 'image',\n        'skp': 'image',\n        'stp': 'image',\n        '3dm': 'image',\n        'mp3': 'audio',\n        'wav': 'audio',\n        'wma': 'audio',\n        'mod': 'audio',\n        'm4a': 'audio',\n        'compress': 'compress',\n        'zip': 'compress',\n        'rar': 'compress',\n        '7z': 'compress',\n        'lz': 'compress',\n        'z01': 'compress',\n        'bz2': 'compress',\n        'gz': 'compress',\n        'pdf': 'pdf',\n        'xls': 'xls',\n        'xlsx': 'xls',\n        'ods': 'xls',\n        'mp4': 'video',\n        'avi': 'video',\n        'wmv': 'video',\n        'mpg': 'video',\n        'mts': 'video',\n        'flv': 'video',\n        '3gp': 'video',\n        'vob': 'video',\n        'm4v': 'video',\n        'mpeg': 'video',\n        'm2ts': 'video',\n        'mov': 'video',\n        'doc': 'doc',\n        'docx': 'doc',\n        'eps': 'doc',\n        'txt': 'doc',\n        'odt': 'doc',\n        'rtf': 'doc',\n        'ppt': 'ppt',\n        'pptx': 'ppt',\n        'pps': 'ppt',\n        'ppsx': 'ppt',\n        'odp': 'ppt'\n      };\n      /** @type {?} */\n\n      let chunks = inputFilename.split('.');\n\n      if (chunks.length < 2) {\n        return 'application';\n      }\n      /** @type {?} */\n\n\n      let extension = chunks[chunks.length - 1].toLowerCase();\n\n      if (types[extension] === undefined) {\n        return 'application';\n      } else {\n        return types[extension];\n      }\n    }\n\n  }\n\n  /*  MS office  */\n  FileType.mime_doc = ['application/msword', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.openxmlformats-officedocument.wordprocessingml.template', 'application/vnd.ms-word.document.macroEnabled.12', 'application/vnd.ms-word.template.macroEnabled.12'];\n  FileType.mime_xsl = ['application/vnd.ms-excel', 'application/vnd.ms-excel', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.openxmlformats-officedocument.spreadsheetml.template', 'application/vnd.ms-excel.sheet.macroEnabled.12', 'application/vnd.ms-excel.template.macroEnabled.12', 'application/vnd.ms-excel.addin.macroEnabled.12', 'application/vnd.ms-excel.sheet.binary.macroEnabled.12'];\n  FileType.mime_ppt = ['application/vnd.ms-powerpoint', 'application/vnd.ms-powerpoint', 'application/vnd.ms-powerpoint', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'application/vnd.openxmlformats-officedocument.presentationml.template', 'application/vnd.openxmlformats-officedocument.presentationml.slideshow', 'application/vnd.ms-powerpoint.addin.macroEnabled.12', 'application/vnd.ms-powerpoint.presentation.macroEnabled.12', 'application/vnd.ms-powerpoint.presentation.macroEnabled.12', 'application/vnd.ms-powerpoint.slideshow.macroEnabled.12'];\n  /* PSD */\n\n  FileType.mime_psd = ['image/photoshop', 'image/x-photoshop', 'image/psd', 'application/photoshop', 'application/psd', 'zz-application/zz-winassoc-psd'];\n  /* Compressed files */\n\n  FileType.mime_compress = ['application/x-gtar', 'application/x-gcompress', 'application/compress', 'application/x-tar', 'application/x-rar-compressed', 'application/octet-stream', 'application/x-zip-compressed', 'application/zip-compressed', 'application/x-7z-compressed', 'application/gzip', 'application/x-bzip2'];\n  return FileType;\n})();\n\nif (false) {\n  /** @type {?} */\n  FileType.mime_doc;\n  /** @type {?} */\n\n  FileType.mime_xsl;\n  /** @type {?} */\n\n  FileType.mime_ppt;\n  /** @type {?} */\n\n  FileType.mime_psd;\n  /** @type {?} */\n\n  FileType.mime_compress;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction isFile(value) {\n  return File && value instanceof File;\n}\n/**\n * @record\n */\n\n\nfunction Headers() {}\n\nif (false) {\n  /** @type {?} */\n  Headers.prototype.name;\n  /** @type {?} */\n\n  Headers.prototype.value;\n}\n/**\n * @record\n */\n\n\nfunction FileUploaderOptions() {}\n\nif (false) {\n  /** @type {?|undefined} */\n  FileUploaderOptions.prototype.allowedMimeType;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.allowedFileType;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.autoUpload;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.isHTML5;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.filters;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.headers;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.method;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.authToken;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.maxFileSize;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.queueLimit;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.removeAfterUpload;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.url;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.disableMultipart;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.itemAlias;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.authTokenHeader;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.additionalParameter;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.parametersBeforeFiles;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.formatDataFunction;\n  /** @type {?|undefined} */\n\n  FileUploaderOptions.prototype.formatDataFunctionIsAsync;\n}\n\nclass FileUploader {\n  /**\n   * @param {?} options\n   */\n  constructor(options) {\n    this.isUploading = false;\n    this.queue = [];\n    this.progress = 0;\n    this._nextIndex = 0;\n    this.options = {\n      autoUpload: false,\n      isHTML5: true,\n      filters: [],\n      removeAfterUpload: false,\n      disableMultipart: false,\n      formatDataFunction:\n      /**\n      * @param {?} item\n      * @return {?}\n      */\n      item => item._file,\n      formatDataFunctionIsAsync: false\n    };\n    this.setOptions(options);\n    this.response = new EventEmitter();\n  }\n  /**\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  setOptions(options) {\n    this.options = Object.assign(this.options, options);\n    this.authToken = this.options.authToken;\n    this.authTokenHeader = this.options.authTokenHeader || 'Authorization';\n    this.autoUpload = this.options.autoUpload;\n    this.options.filters.unshift({\n      name: 'queueLimit',\n      fn: this._queueLimitFilter\n    });\n\n    if (this.options.maxFileSize) {\n      this.options.filters.unshift({\n        name: 'fileSize',\n        fn: this._fileSizeFilter\n      });\n    }\n\n    if (this.options.allowedFileType) {\n      this.options.filters.unshift({\n        name: 'fileType',\n        fn: this._fileTypeFilter\n      });\n    }\n\n    if (this.options.allowedMimeType) {\n      this.options.filters.unshift({\n        name: 'mimeType',\n        fn: this._mimeTypeFilter\n      });\n    }\n\n    for (let i = 0; i < this.queue.length; i++) {\n      this.queue[i].url = this.options.url;\n    }\n  }\n  /**\n   * @param {?} files\n   * @param {?=} options\n   * @param {?=} filters\n   * @return {?}\n   */\n\n\n  addToQueue(files, options, filters) {\n    /** @type {?} */\n    let list = [];\n\n    for (let file of files) {\n      list.push(file);\n    }\n    /** @type {?} */\n\n\n    let arrayOfFilters = this._getFilters(filters);\n    /** @type {?} */\n\n\n    let count = this.queue.length;\n    /** @type {?} */\n\n    let addedFileItems = [];\n    list.map(\n    /**\n    * @param {?} some\n    * @return {?}\n    */\n    some => {\n      if (!options) {\n        options = this.options;\n      }\n      /** @type {?} */\n\n\n      let temp = new FileLikeObject(some);\n\n      if (this._isValidFile(temp, arrayOfFilters, options)) {\n        /** @type {?} */\n        let fileItem = new FileItem(this, some, options);\n        addedFileItems.push(fileItem);\n        this.queue.push(fileItem);\n\n        this._onAfterAddingFile(fileItem);\n      } else {\n        /** @type {?} */\n        let filter = arrayOfFilters[this._failFilterIndex];\n\n        this._onWhenAddingFileFailed(temp, filter, options);\n      }\n    });\n\n    if (this.queue.length !== count) {\n      this._onAfterAddingAll(addedFileItems);\n\n      this.progress = this._getTotalProgress();\n    }\n\n    this._render();\n\n    if (this.options.autoUpload) {\n      this.uploadAll();\n    }\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  removeFromQueue(value) {\n    /** @type {?} */\n    let index = this.getIndexOfItem(value);\n    /** @type {?} */\n\n    let item = this.queue[index];\n\n    if (item.isUploading) {\n      item.cancel();\n    }\n\n    this.queue.splice(index, 1);\n    this.progress = this._getTotalProgress();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  clearQueue() {\n    while (this.queue.length) {\n      this.queue[0].remove();\n    }\n\n    this.progress = 0;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  uploadItem(value) {\n    /** @type {?} */\n    let index = this.getIndexOfItem(value);\n    /** @type {?} */\n\n    let item = this.queue[index];\n    /** @type {?} */\n\n    let transport = this.options.isHTML5 ? '_xhrTransport' : '_iframeTransport';\n\n    item._prepareToUploading();\n\n    if (this.isUploading) {\n      return;\n    }\n\n    this.isUploading = true;\n\n    /** @type {?} */\n    this[transport](item);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  cancelItem(value) {\n    /** @type {?} */\n    let index = this.getIndexOfItem(value);\n    /** @type {?} */\n\n    let item = this.queue[index];\n    /** @type {?} */\n\n    let prop = this.options.isHTML5 ? item._xhr : item._form;\n\n    if (item && item.isUploading) {\n      prop.abort();\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  uploadAll() {\n    /** @type {?} */\n    let items = this.getNotUploadedItems().filter(\n    /**\n    * @param {?} item\n    * @return {?}\n    */\n    item => !item.isUploading);\n\n    if (!items.length) {\n      return;\n    }\n\n    items.map(\n    /**\n    * @param {?} item\n    * @return {?}\n    */\n    item => item._prepareToUploading());\n    items[0].upload();\n  }\n  /**\n   * @return {?}\n   */\n\n\n  cancelAll() {\n    /** @type {?} */\n    let items = this.getNotUploadedItems();\n    items.map(\n    /**\n    * @param {?} item\n    * @return {?}\n    */\n    item => item.cancel());\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  isFile(value) {\n    return isFile(value);\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  isFileLikeObject(value) {\n    return value instanceof FileLikeObject;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  getIndexOfItem(value) {\n    return typeof value === 'number' ? value : this.queue.indexOf(value);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  getNotUploadedItems() {\n    return this.queue.filter(\n    /**\n    * @param {?} item\n    * @return {?}\n    */\n    item => !item.isUploaded);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  getReadyItems() {\n    return this.queue.filter(\n    /**\n    * @param {?} item\n    * @return {?}\n    */\n    item => item.isReady && !item.isUploading).sort(\n    /**\n    * @param {?} item1\n    * @param {?} item2\n    * @return {?}\n    */\n    (item1, item2) => item1.index - item2.index);\n  }\n  /**\n   * @return {?}\n   */\n\n\n  destroy() {\n    return void 0;\n  }\n  /**\n   * @param {?} fileItems\n   * @return {?}\n   */\n\n\n  onAfterAddingAll(fileItems) {\n    return {\n      fileItems\n    };\n  }\n  /**\n   * @param {?} fileItem\n   * @param {?} form\n   * @return {?}\n   */\n\n\n  onBuildItemForm(fileItem, form) {\n    return {\n      fileItem,\n      form\n    };\n  }\n  /**\n   * @param {?} fileItem\n   * @return {?}\n   */\n\n\n  onAfterAddingFile(fileItem) {\n    return {\n      fileItem\n    };\n  }\n  /**\n   * @param {?} item\n   * @param {?} filter\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  onWhenAddingFileFailed(item, filter, options) {\n    return {\n      item,\n      filter,\n      options\n    };\n  }\n  /**\n   * @param {?} fileItem\n   * @return {?}\n   */\n\n\n  onBeforeUploadItem(fileItem) {\n    return {\n      fileItem\n    };\n  }\n  /**\n   * @param {?} fileItem\n   * @param {?} progress\n   * @return {?}\n   */\n\n\n  onProgressItem(fileItem, progress) {\n    return {\n      fileItem,\n      progress\n    };\n  }\n  /**\n   * @param {?} progress\n   * @return {?}\n   */\n\n\n  onProgressAll(progress) {\n    return {\n      progress\n    };\n  }\n  /**\n   * @param {?} item\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  onSuccessItem(item, response, status, headers) {\n    return {\n      item,\n      response,\n      status,\n      headers\n    };\n  }\n  /**\n   * @param {?} item\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  onErrorItem(item, response, status, headers) {\n    return {\n      item,\n      response,\n      status,\n      headers\n    };\n  }\n  /**\n   * @param {?} item\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  onCancelItem(item, response, status, headers) {\n    return {\n      item,\n      response,\n      status,\n      headers\n    };\n  }\n  /**\n   * @param {?} item\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  onCompleteItem(item, response, status, headers) {\n    return {\n      item,\n      response,\n      status,\n      headers\n    };\n  }\n  /**\n   * @return {?}\n   */\n\n\n  onCompleteAll() {\n    return void 0;\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  _mimeTypeFilter(item) {\n    return !(this.options.allowedMimeType && this.options.allowedMimeType.indexOf(item.type) === -1);\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  _fileSizeFilter(item) {\n    return !(this.options.maxFileSize && item.size > this.options.maxFileSize);\n  }\n  /**\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  _fileTypeFilter(item) {\n    return !(this.options.allowedFileType && this.options.allowedFileType.indexOf(FileType.getMimeClass(item)) === -1);\n  }\n  /**\n   * @param {?} item\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  _onErrorItem(item, response, status, headers) {\n    item._onError(response, status, headers);\n\n    this.onErrorItem(item, response, status, headers);\n  }\n  /**\n   * @param {?} item\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  _onCompleteItem(item, response, status, headers) {\n    item._onComplete(response, status, headers);\n\n    this.onCompleteItem(item, response, status, headers);\n    /** @type {?} */\n\n    let nextItem = this.getReadyItems()[0];\n    this.isUploading = false;\n\n    if (nextItem) {\n      nextItem.upload();\n      return;\n    }\n\n    this.onCompleteAll();\n    this.progress = this._getTotalProgress();\n\n    this._render();\n  }\n  /**\n   * @protected\n   * @param {?} parsedHeaders\n   * @return {?}\n   */\n\n\n  _headersGetter(parsedHeaders) {\n    return (\n      /**\n      * @param {?} name\n      * @return {?}\n      */\n      name => {\n        if (name) {\n          return parsedHeaders[name.toLowerCase()] || void 0;\n        }\n\n        return parsedHeaders;\n      }\n    );\n  }\n  /**\n   * @protected\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  _xhrTransport(item) {\n    /** @type {?} */\n    let that = this;\n    /** @type {?} */\n\n    let xhr = item._xhr = new XMLHttpRequest();\n    /** @type {?} */\n\n    let sendable;\n\n    this._onBeforeUploadItem(item);\n\n    if (typeof item._file.size !== 'number') {\n      throw new TypeError('The file specified is no longer valid');\n    }\n\n    if (!this.options.disableMultipart) {\n      sendable = new FormData();\n\n      this._onBuildItemForm(item, sendable);\n      /** @type {?} */\n\n\n      const appendFile =\n      /**\n      * @return {?}\n      */\n      () => sendable.append(item.alias, item._file, item.file.name);\n\n      if (!this.options.parametersBeforeFiles) {\n        appendFile();\n      } // For AWS, Additional Parameters must come BEFORE Files\n\n\n      if (this.options.additionalParameter !== undefined) {\n        Object.keys(this.options.additionalParameter).forEach(\n        /**\n        * @param {?} key\n        * @return {?}\n        */\n        key => {\n          /** @type {?} */\n          let paramVal = this.options.additionalParameter[key]; // Allow an additional parameter to include the filename\n\n          if (typeof paramVal === 'string' && paramVal.indexOf('{{file_name}}') >= 0) {\n            paramVal = paramVal.replace('{{file_name}}', item.file.name);\n          }\n\n          sendable.append(key, paramVal);\n        });\n      }\n\n      if (this.options.parametersBeforeFiles) {\n        appendFile();\n      }\n    } else {\n      sendable = this.options.formatDataFunction(item);\n    }\n\n    xhr.upload.onprogress =\n    /**\n    * @param {?} event\n    * @return {?}\n    */\n    event => {\n      /** @type {?} */\n      let progress = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);\n\n      this._onProgressItem(item, progress);\n    };\n\n    xhr.onload =\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      let headers = this._parseHeaders(xhr.getAllResponseHeaders());\n      /** @type {?} */\n\n\n      let response = this._transformResponse(xhr.response, headers);\n      /** @type {?} */\n\n\n      let gist = this._isSuccessCode(xhr.status) ? 'Success' : 'Error';\n      /** @type {?} */\n\n      let method = '_on' + gist + 'Item';\n\n      /** @type {?} */\n      this[method](item, response, xhr.status, headers);\n\n      this._onCompleteItem(item, response, xhr.status, headers);\n    };\n\n    xhr.onerror =\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      let headers = this._parseHeaders(xhr.getAllResponseHeaders());\n      /** @type {?} */\n\n\n      let response = this._transformResponse(xhr.response, headers);\n\n      this._onErrorItem(item, response, xhr.status, headers);\n\n      this._onCompleteItem(item, response, xhr.status, headers);\n    };\n\n    xhr.onabort =\n    /**\n    * @return {?}\n    */\n    () => {\n      /** @type {?} */\n      let headers = this._parseHeaders(xhr.getAllResponseHeaders());\n      /** @type {?} */\n\n\n      let response = this._transformResponse(xhr.response, headers);\n\n      this._onCancelItem(item, response, xhr.status, headers);\n\n      this._onCompleteItem(item, response, xhr.status, headers);\n    };\n\n    xhr.open(item.method, item.url, true);\n    xhr.withCredentials = item.withCredentials;\n\n    if (this.options.headers) {\n      for (let header of this.options.headers) {\n        xhr.setRequestHeader(header.name, header.value);\n      }\n    }\n\n    if (item.headers.length) {\n      for (let header of item.headers) {\n        xhr.setRequestHeader(header.name, header.value);\n      }\n    }\n\n    if (this.authToken) {\n      xhr.setRequestHeader(this.authTokenHeader, this.authToken);\n    }\n\n    xhr.onreadystatechange =\n    /**\n    * @return {?}\n    */\n    function () {\n      if (xhr.readyState == XMLHttpRequest.DONE) {\n        that.response.emit(xhr.responseText);\n      }\n    };\n\n    if (this.options.formatDataFunctionIsAsync) {\n      sendable.then(\n      /**\n      * @param {?} result\n      * @return {?}\n      */\n      result => xhr.send(JSON.stringify(result)));\n    } else {\n      xhr.send(sendable);\n    }\n\n    this._render();\n  }\n  /**\n   * @protected\n   * @param {?=} value\n   * @return {?}\n   */\n\n\n  _getTotalProgress(value = 0) {\n    if (this.options.removeAfterUpload) {\n      return value;\n    }\n    /** @type {?} */\n\n\n    let notUploaded = this.getNotUploadedItems().length;\n    /** @type {?} */\n\n    let uploaded = notUploaded ? this.queue.length - notUploaded : this.queue.length;\n    /** @type {?} */\n\n    let ratio = 100 / this.queue.length;\n    /** @type {?} */\n\n    let current = value * ratio / 100;\n    return Math.round(uploaded * ratio + current);\n  }\n  /**\n   * @protected\n   * @param {?} filters\n   * @return {?}\n   */\n\n\n  _getFilters(filters) {\n    if (!filters) {\n      return this.options.filters;\n    }\n\n    if (Array.isArray(filters)) {\n      return filters;\n    }\n\n    if (typeof filters === 'string') {\n      /** @type {?} */\n      let names = filters.match(/[^\\s,]+/g);\n      return this.options.filters.filter(\n      /**\n      * @param {?} filter\n      * @return {?}\n      */\n      filter => names.indexOf(filter.name) !== -1);\n    }\n\n    return this.options.filters;\n  }\n  /**\n   * @protected\n   * @return {?}\n   */\n\n\n  _render() {\n    return void 0;\n  }\n  /**\n   * @protected\n   * @return {?}\n   */\n\n\n  _queueLimitFilter() {\n    return this.options.queueLimit === undefined || this.queue.length < this.options.queueLimit;\n  }\n  /**\n   * @protected\n   * @param {?} file\n   * @param {?} filters\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  _isValidFile(file, filters, options) {\n    this._failFilterIndex = -1;\n    return !filters.length ? true : filters.every(\n    /**\n    * @param {?} filter\n    * @return {?}\n    */\n    filter => {\n      this._failFilterIndex++;\n      return filter.fn.call(this, file, options);\n    });\n  }\n  /**\n   * @protected\n   * @param {?} status\n   * @return {?}\n   */\n\n\n  _isSuccessCode(status) {\n    return status >= 200 && status < 300 || status === 304;\n  }\n  /**\n   * @protected\n   * @param {?} response\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  _transformResponse(response, headers) {\n    return response;\n  }\n  /**\n   * @protected\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  _parseHeaders(headers) {\n    /** @type {?} */\n    let parsed = {};\n    /** @type {?} */\n\n    let key;\n    /** @type {?} */\n\n    let val;\n    /** @type {?} */\n\n    let i;\n\n    if (!headers) {\n      return parsed;\n    }\n\n    headers.split('\\n').map(\n    /**\n    * @param {?} line\n    * @return {?}\n    */\n    line => {\n      i = line.indexOf(':');\n      key = line.slice(0, i).trim().toLowerCase();\n      val = line.slice(i + 1).trim();\n\n      if (key) {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    });\n    return parsed;\n  }\n  /**\n   * @protected\n   * @param {?} item\n   * @param {?} filter\n   * @param {?} options\n   * @return {?}\n   */\n\n\n  _onWhenAddingFileFailed(item, filter, options) {\n    this.onWhenAddingFileFailed(item, filter, options);\n  }\n  /**\n   * @protected\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  _onAfterAddingFile(item) {\n    this.onAfterAddingFile(item);\n  }\n  /**\n   * @protected\n   * @param {?} items\n   * @return {?}\n   */\n\n\n  _onAfterAddingAll(items) {\n    this.onAfterAddingAll(items);\n  }\n  /**\n   * @protected\n   * @param {?} item\n   * @return {?}\n   */\n\n\n  _onBeforeUploadItem(item) {\n    item._onBeforeUpload();\n\n    this.onBeforeUploadItem(item);\n  }\n  /**\n   * @protected\n   * @param {?} item\n   * @param {?} form\n   * @return {?}\n   */\n\n\n  _onBuildItemForm(item, form) {\n    item._onBuildForm(form);\n\n    this.onBuildItemForm(item, form);\n  }\n  /**\n   * @protected\n   * @param {?} item\n   * @param {?} progress\n   * @return {?}\n   */\n\n\n  _onProgressItem(item, progress) {\n    /** @type {?} */\n    let total = this._getTotalProgress(progress);\n\n    this.progress = total;\n\n    item._onProgress(progress);\n\n    this.onProgressItem(item, progress);\n    this.onProgressAll(total);\n\n    this._render();\n  }\n  /**\n   * @protected\n   * @param {?} item\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  _onSuccessItem(item, response, status, headers) {\n    item._onSuccess(response, status, headers);\n\n    this.onSuccessItem(item, response, status, headers);\n  }\n  /**\n   * @protected\n   * @param {?} item\n   * @param {?} response\n   * @param {?} status\n   * @param {?} headers\n   * @return {?}\n   */\n\n\n  _onCancelItem(item, response, status, headers) {\n    item._onCancel(response, status, headers);\n\n    this.onCancelItem(item, response, status, headers);\n  }\n\n}\n\nif (false) {\n  /** @type {?} */\n  FileUploader.prototype.authToken;\n  /** @type {?} */\n\n  FileUploader.prototype.isUploading;\n  /** @type {?} */\n\n  FileUploader.prototype.queue;\n  /** @type {?} */\n\n  FileUploader.prototype.progress;\n  /** @type {?} */\n\n  FileUploader.prototype._nextIndex;\n  /** @type {?} */\n\n  FileUploader.prototype.autoUpload;\n  /** @type {?} */\n\n  FileUploader.prototype.authTokenHeader;\n  /** @type {?} */\n\n  FileUploader.prototype.response;\n  /** @type {?} */\n\n  FileUploader.prototype.options;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  FileUploader.prototype._failFilterIndex;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet FileSelectDirective = /*#__PURE__*/(() => {\n  class FileSelectDirective {\n    /**\n     * @param {?} element\n     */\n    constructor(element) {\n      this.onFileSelected = new EventEmitter();\n      this.element = element;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getOptions() {\n      return this.uploader.options;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getFilters() {\n      return {};\n    }\n    /**\n     * @return {?}\n     */\n\n\n    isEmptyAfterSelection() {\n      return !!this.element.nativeElement.attributes.multiple;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    onChange() {\n      /** @type {?} */\n      let files = this.element.nativeElement.files;\n      /** @type {?} */\n\n      let options = this.getOptions();\n      /** @type {?} */\n\n      let filters = this.getFilters();\n      this.uploader.addToQueue(files, options, filters);\n      this.onFileSelected.emit(files);\n\n      if (this.isEmptyAfterSelection()) {\n        this.element.nativeElement.value = '';\n      }\n    }\n\n  }\n\n  FileSelectDirective.Éµfac = function FileSelectDirective_Factory(t) {\n    return new (t || FileSelectDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef));\n  };\n\n  FileSelectDirective.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: FileSelectDirective,\n    selectors: [[\"\", \"ng2FileSelect\", \"\"]],\n    hostBindings: function FileSelectDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        Éµngcc0.ÉµÉµlistener(\"change\", function FileSelectDirective_change_HostBindingHandler() {\n          return ctx.onChange();\n        });\n      }\n    },\n    inputs: {\n      uploader: \"uploader\"\n    },\n    outputs: {\n      onFileSelected: \"onFileSelected\"\n    }\n  });\n  /** @nocollapse */\n\n  return FileSelectDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  FileSelectDirective.prototype.uploader;\n  /** @type {?} */\n\n  FileSelectDirective.prototype.onFileSelected;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  FileSelectDirective.prototype.element;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet FileDropDirective = /*#__PURE__*/(() => {\n  class FileDropDirective {\n    /**\n     * @param {?} element\n     */\n    constructor(element) {\n      this.fileOver = new EventEmitter();\n      this.onFileDrop = new EventEmitter();\n      this.element = element;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getOptions() {\n      return this.uploader.options;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    getFilters() {\n      return {};\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    onDrop(event) {\n      /** @type {?} */\n      let transfer = this._getTransfer(event);\n\n      if (!transfer) {\n        return;\n      }\n      /** @type {?} */\n\n\n      let options = this.getOptions();\n      /** @type {?} */\n\n      let filters = this.getFilters();\n\n      this._preventAndStop(event);\n\n      this.uploader.addToQueue(transfer.files, options, filters);\n      this.fileOver.emit(false);\n      this.onFileDrop.emit(transfer.files);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    onDragOver(event) {\n      /** @type {?} */\n      let transfer = this._getTransfer(event);\n\n      if (!this._haveFiles(transfer.types)) {\n        return;\n      }\n\n      transfer.dropEffect = 'copy';\n\n      this._preventAndStop(event);\n\n      this.fileOver.emit(true);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    onDragLeave(event) {\n      if (\n      /** @type {?} */\n      this.element) {\n        if (event.currentTarget ===\n        /** @type {?} */\n        this.element[0]) {\n          return;\n        }\n      }\n\n      this._preventAndStop(event);\n\n      this.fileOver.emit(false);\n    }\n    /**\n     * @protected\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _getTransfer(event) {\n      return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer; // jQuery fix;\n    }\n    /**\n     * @protected\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _preventAndStop(event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    /**\n     * @protected\n     * @param {?} types\n     * @return {?}\n     */\n\n\n    _haveFiles(types) {\n      if (!types) {\n        return false;\n      }\n\n      if (types.indexOf) {\n        return types.indexOf('Files') !== -1;\n      } else if (types.contains) {\n        return types.contains('Files');\n      } else {\n        return false;\n      }\n    }\n\n  }\n\n  FileDropDirective.Éµfac = function FileDropDirective_Factory(t) {\n    return new (t || FileDropDirective)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef));\n  };\n\n  FileDropDirective.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: FileDropDirective,\n    selectors: [[\"\", \"ng2FileDrop\", \"\"]],\n    hostBindings: function FileDropDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        Éµngcc0.ÉµÉµlistener(\"drop\", function FileDropDirective_drop_HostBindingHandler($event) {\n          return ctx.onDrop($event);\n        })(\"dragover\", function FileDropDirective_dragover_HostBindingHandler($event) {\n          return ctx.onDragOver($event);\n        })(\"dragleave\", function FileDropDirective_dragleave_HostBindingHandler($event) {\n          return ctx.onDragLeave($event);\n        });\n      }\n    },\n    inputs: {\n      uploader: \"uploader\"\n    },\n    outputs: {\n      fileOver: \"fileOver\",\n      onFileDrop: \"onFileDrop\"\n    }\n  });\n  /** @nocollapse */\n\n  return FileDropDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  FileDropDirective.prototype.uploader;\n  /** @type {?} */\n\n  FileDropDirective.prototype.fileOver;\n  /** @type {?} */\n\n  FileDropDirective.prototype.onFileDrop;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  FileDropDirective.prototype.element;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet FileUploadModule = /*#__PURE__*/(() => {\n  class FileUploadModule {}\n\n  FileUploadModule.Éµfac = function FileUploadModule_Factory(t) {\n    return new (t || FileUploadModule)();\n  };\n\n  FileUploadModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n    type: FileUploadModule\n  });\n  FileUploadModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return FileUploadModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(FileUploadModule, {\n    declarations: function () {\n      return [FileDropDirective, FileSelectDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [FileDropDirective, FileSelectDirective];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { FileDropDirective, FileItem, FileLikeObject, FileSelectDirective, FileUploadModule, FileUploader }; //# sourceMappingURL=ng2-file-upload.js.map","map":null,"metadata":{},"sourceType":"module"}