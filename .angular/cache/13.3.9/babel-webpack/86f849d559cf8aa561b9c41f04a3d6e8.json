{"ast":null,"code":"/**\n * @license Angular v13.3.11\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { isPlatformBrowser } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, NgZone, ApplicationRef, PLATFORM_ID, APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { defer, throwError, fromEvent, of, concat, Subject, NEVER, merge } from 'rxjs';\nimport { map, filter, switchMap, publish, take, tap, delay } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\n\nfunction errorObservable(message) {\n  return defer(() => throwError(new Error(message)));\n}\n/**\n * @publicApi\n */\n\n\nclass NgswCommChannel {\n  constructor(serviceWorker) {\n    this.serviceWorker = serviceWorker;\n\n    if (!serviceWorker) {\n      this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n    } else {\n      const controllerChangeEvents = fromEvent(serviceWorker, 'controllerchange');\n      const controllerChanges = controllerChangeEvents.pipe(map(() => serviceWorker.controller));\n      const currentController = defer(() => of(serviceWorker.controller));\n      const controllerWithChanges = concat(currentController, controllerChanges);\n      this.worker = controllerWithChanges.pipe(filter(c => !!c));\n      this.registration = this.worker.pipe(switchMap(() => serviceWorker.getRegistration()));\n      const rawEvents = fromEvent(serviceWorker, 'message');\n      const rawEventPayload = rawEvents.pipe(map(event => event.data));\n      const eventsUnconnected = rawEventPayload.pipe(filter(event => event && event.type));\n      const events = eventsUnconnected.pipe(publish());\n      events.connect();\n      this.events = events;\n    }\n  }\n\n  postMessage(action, payload) {\n    return this.worker.pipe(take(1), tap(sw => {\n      sw.postMessage(Object.assign({\n        action\n      }, payload));\n    })).toPromise().then(() => undefined);\n  }\n\n  postMessageWithOperation(type, payload, operationNonce) {\n    const waitForOperationCompleted = this.waitForOperationCompleted(operationNonce);\n    const postMessage = this.postMessage(type, payload);\n    return Promise.all([postMessage, waitForOperationCompleted]).then(([, result]) => result);\n  }\n\n  generateNonce() {\n    return Math.round(Math.random() * 10000000);\n  }\n\n  eventsOfType(type) {\n    let filterFn;\n\n    if (typeof type === 'string') {\n      filterFn = event => event.type === type;\n    } else {\n      filterFn = event => type.includes(event.type);\n    }\n\n    return this.events.pipe(filter(filterFn));\n  }\n\n  nextEventOfType(type) {\n    return this.eventsOfType(type).pipe(take(1));\n  }\n\n  waitForOperationCompleted(nonce) {\n    return this.eventsOfType('OPERATION_COMPLETED').pipe(filter(event => event.nonce === nonce), take(1), map(event => {\n      if (event.result !== undefined) {\n        return event.result;\n      }\n\n      throw new Error(event.error);\n    })).toPromise();\n  }\n\n  get isEnabled() {\n    return !!this.serviceWorker;\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Subscribe and listen to\n * [Web Push\n * Notifications](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices) through\n * Angular Service Worker.\n *\n * @usageNotes\n *\n * You can inject a `SwPush` instance into any component or service\n * as a dependency.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"inject-sw-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * To subscribe, call `SwPush.requestSubscription()`, which asks the user for permission.\n * The call returns a `Promise` with a new\n * [`PushSubscription`](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\n * instance.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * A request is rejected if the user denies permission, or if the browser\n * blocks or does not support the Push API or ServiceWorkers.\n * Check `SwPush.isEnabled` to confirm status.\n *\n * Invoke Push Notifications by pushing a message with the following payload.\n *\n * ```ts\n * {\n *   \"notification\": {\n *     \"actions\": NotificationAction[],\n *     \"badge\": USVString,\n *     \"body\": DOMString,\n *     \"data\": any,\n *     \"dir\": \"auto\"|\"ltr\"|\"rtl\",\n *     \"icon\": USVString,\n *     \"image\": USVString,\n *     \"lang\": DOMString,\n *     \"renotify\": boolean,\n *     \"requireInteraction\": boolean,\n *     \"silent\": boolean,\n *     \"tag\": DOMString,\n *     \"timestamp\": DOMTimeStamp,\n *     \"title\": DOMString,\n *     \"vibrate\": number[]\n *   }\n * }\n * ```\n *\n * Only `title` is required. See `Notification`\n * [instance\n * properties](https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties).\n *\n * While the subscription is active, Service Worker listens for\n * [PushEvent](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent)\n * occurrences and creates\n * [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification)\n * instances in response.\n *\n * Unsubscribe using `SwPush.unsubscribe()`.\n *\n * An application can subscribe to `SwPush.notificationClicks` observable to be notified when a user\n * clicks on a notification. For example:\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-notification-clicks\"\n * header=\"app.component.ts\"></code-example>\n *\n * You can read more on handling notification clicks in the [Service worker notifications\n * guide](guide/service-worker-notifications).\n *\n * @see [Push Notifications](https://developers.google.com/web/fundamentals/codelabs/push-notifications/)\n * @see [Angular Push Notifications](https://blog.angular-university.io/angular-push-notifications/)\n * @see [MDN: Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)\n * @see [MDN: Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API)\n * @see [MDN: Web Push API Notifications best practices](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)\n *\n * @publicApi\n */\n\n\nclass SwPush {\n  constructor(sw) {\n    this.sw = sw;\n    this.subscriptionChanges = new Subject();\n\n    if (!sw.isEnabled) {\n      this.messages = NEVER;\n      this.notificationClicks = NEVER;\n      this.subscription = NEVER;\n      return;\n    }\n\n    this.messages = this.sw.eventsOfType('PUSH').pipe(map(message => message.data));\n    this.notificationClicks = this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(map(message => message.data));\n    this.pushManager = this.sw.registration.pipe(map(registration => registration.pushManager));\n    const workerDrivenSubscriptions = this.pushManager.pipe(switchMap(pm => pm.getSubscription()));\n    this.subscription = merge(workerDrivenSubscriptions, this.subscriptionChanges);\n  }\n  /**\n   * True if the Service Worker is enabled (supported by the browser and enabled via\n   * `ServiceWorkerModule`).\n   */\n\n\n  get isEnabled() {\n    return this.sw.isEnabled;\n  }\n  /**\n   * Subscribes to Web Push Notifications,\n   * after requesting and receiving user permission.\n   *\n   * @param options An object containing the `serverPublicKey` string.\n   * @returns A Promise that resolves to the new subscription object.\n   */\n\n\n  requestSubscription(options) {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n\n    const pushOptions = {\n      userVisibleOnly: true\n    };\n    let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n    let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n\n    for (let i = 0; i < key.length; i++) {\n      applicationServerKey[i] = key.charCodeAt(i);\n    }\n\n    pushOptions.applicationServerKey = applicationServerKey;\n    return this.pushManager.pipe(switchMap(pm => pm.subscribe(pushOptions)), take(1)).toPromise().then(sub => {\n      this.subscriptionChanges.next(sub);\n      return sub;\n    });\n  }\n  /**\n   * Unsubscribes from Service Worker push notifications.\n   *\n   * @returns A Promise that is resolved when the operation succeeds, or is rejected if there is no\n   *          active subscription or the unsubscribe operation fails.\n   */\n\n\n  unsubscribe() {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n\n    const doUnsubscribe = sub => {\n      if (sub === null) {\n        throw new Error('Not subscribed to push notifications.');\n      }\n\n      return sub.unsubscribe().then(success => {\n        if (!success) {\n          throw new Error('Unsubscribe failed!');\n        }\n\n        this.subscriptionChanges.next(null);\n      });\n    };\n\n    return this.subscription.pipe(take(1), switchMap(doUnsubscribe)).toPromise();\n  }\n\n  decodeBase64(input) {\n    return atob(input);\n  }\n\n}\n\nSwPush.ɵfac = function SwPush_Factory(t) {\n  return new (t || SwPush)(i0.ɵɵinject(NgswCommChannel));\n};\n\nSwPush.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SwPush,\n  factory: SwPush.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwPush, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: NgswCommChannel\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * @see {@link guide/service-worker-communications Service worker communication guide}\n *\n * @publicApi\n */\n\n\nclass SwUpdate {\n  constructor(sw) {\n    this.sw = sw;\n\n    if (!sw.isEnabled) {\n      this.versionUpdates = NEVER;\n      this.available = NEVER;\n      this.activated = NEVER;\n      this.unrecoverable = NEVER;\n      return;\n    }\n\n    this.versionUpdates = this.sw.eventsOfType(['VERSION_DETECTED', 'VERSION_INSTALLATION_FAILED', 'VERSION_READY']);\n    this.available = this.versionUpdates.pipe(filter(evt => evt.type === 'VERSION_READY'), map(evt => ({\n      type: 'UPDATE_AVAILABLE',\n      current: evt.currentVersion,\n      available: evt.latestVersion\n    })));\n    this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n    this.unrecoverable = this.sw.eventsOfType('UNRECOVERABLE_STATE');\n  }\n  /**\n   * True if the Service Worker is enabled (supported by the browser and enabled via\n   * `ServiceWorkerModule`).\n   */\n\n\n  get isEnabled() {\n    return this.sw.isEnabled;\n  }\n  /**\n   * Checks for an update and waits until the new version is downloaded from the server and ready\n   * for activation.\n   *\n   * @returns a promise that\n   * - resolves to `true` if a new version was found and is ready to be activated.\n   * - resolves to `false` if no new version was found\n   * - rejects if any error occurs\n   */\n\n\n  checkForUpdate() {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n\n    const nonce = this.sw.generateNonce();\n    return this.sw.postMessageWithOperation('CHECK_FOR_UPDATES', {\n      nonce\n    }, nonce);\n  }\n  /**\n   * Updates the current client (i.e. browser tab) to the latest version that is ready for\n   * activation.\n   *\n   * @returns a promise that\n   *  - resolves to `true` if an update was activated successfully\n   *  - resolves to `false` if no update was available (for example, the client was already on the\n   *    latest version).\n   *  - rejects if any error occurs\n   */\n\n\n  activateUpdate() {\n    if (!this.sw.isEnabled) {\n      return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n    }\n\n    const nonce = this.sw.generateNonce();\n    return this.sw.postMessageWithOperation('ACTIVATE_UPDATE', {\n      nonce\n    }, nonce);\n  }\n\n}\n\nSwUpdate.ɵfac = function SwUpdate_Factory(t) {\n  return new (t || SwUpdate)(i0.ɵɵinject(NgswCommChannel));\n};\n\nSwUpdate.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: SwUpdate,\n  factory: SwUpdate.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SwUpdate, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: NgswCommChannel\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Token that can be used to provide options for `ServiceWorkerModule` outside of\n * `ServiceWorkerModule.register()`.\n *\n * You can use this token to define a provider that generates the registration options at runtime,\n * for example via a function call:\n *\n * {@example service-worker/registration-options/module.ts region=\"registration-options\"\n *     header=\"app.module.ts\"}\n *\n * @publicApi\n */\n\n\nclass SwRegistrationOptions {}\n\nconst SCRIPT = new InjectionToken('NGSW_REGISTER_SCRIPT');\n\nfunction ngswAppInitializer(injector, script, options, platformId) {\n  const initializer = () => {\n    if (!(isPlatformBrowser(platformId) && 'serviceWorker' in navigator && options.enabled !== false)) {\n      return;\n    } // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n    // becomes active. This allows the SW to initialize itself even if there is no application\n    // traffic.\n\n\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\n      if (navigator.serviceWorker.controller !== null) {\n        navigator.serviceWorker.controller.postMessage({\n          action: 'INITIALIZE'\n        });\n      }\n    });\n    let readyToRegister$;\n\n    if (typeof options.registrationStrategy === 'function') {\n      readyToRegister$ = options.registrationStrategy();\n    } else {\n      const [strategy, ...args] = (options.registrationStrategy || 'registerWhenStable:30000').split(':');\n\n      switch (strategy) {\n        case 'registerImmediately':\n          readyToRegister$ = of(null);\n          break;\n\n        case 'registerWithDelay':\n          readyToRegister$ = delayWithTimeout(+args[0] || 0);\n          break;\n\n        case 'registerWhenStable':\n          readyToRegister$ = !args[0] ? whenStable(injector) : merge(whenStable(injector), delayWithTimeout(+args[0]));\n          break;\n\n        default:\n          // Unknown strategy.\n          throw new Error(`Unknown ServiceWorker registration strategy: ${options.registrationStrategy}`);\n      }\n    } // Don't return anything to avoid blocking the application until the SW is registered.\n    // Also, run outside the Angular zone to avoid preventing the app from stabilizing (especially\n    // given that some registration strategies wait for the app to stabilize).\n    // Catch and log the error if SW registration fails to avoid uncaught rejection warning.\n\n\n    const ngZone = injector.get(NgZone);\n    ngZone.runOutsideAngular(() => readyToRegister$.pipe(take(1)).subscribe(() => navigator.serviceWorker.register(script, {\n      scope: options.scope\n    }).catch(err => console.error('Service worker registration failed with:', err))));\n  };\n\n  return initializer;\n}\n\nfunction delayWithTimeout(timeout) {\n  return of(null).pipe(delay(timeout));\n}\n\nfunction whenStable(injector) {\n  const appRef = injector.get(ApplicationRef);\n  return appRef.isStable.pipe(filter(stable => stable));\n}\n\nfunction ngswCommChannelFactory(opts, platformId) {\n  return new NgswCommChannel(isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker : undefined);\n}\n/**\n * @publicApi\n */\n\n\nclass ServiceWorkerModule {\n  /**\n   * Register the given Angular Service Worker script.\n   *\n   * If `enabled` is set to `false` in the given options, the module will behave as if service\n   * workers are not supported by the browser, and the service worker will not be registered.\n   */\n  static register(script, opts = {}) {\n    return {\n      ngModule: ServiceWorkerModule,\n      providers: [{\n        provide: SCRIPT,\n        useValue: script\n      }, {\n        provide: SwRegistrationOptions,\n        useValue: opts\n      }, {\n        provide: NgswCommChannel,\n        useFactory: ngswCommChannelFactory,\n        deps: [SwRegistrationOptions, PLATFORM_ID]\n      }, {\n        provide: APP_INITIALIZER,\n        useFactory: ngswAppInitializer,\n        deps: [Injector, SCRIPT, SwRegistrationOptions, PLATFORM_ID],\n        multi: true\n      }]\n    };\n  }\n\n}\n\nServiceWorkerModule.ɵfac = function ServiceWorkerModule_Factory(t) {\n  return new (t || ServiceWorkerModule)();\n};\n\nServiceWorkerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ServiceWorkerModule\n});\nServiceWorkerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [SwPush, SwUpdate]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ServiceWorkerModule, [{\n    type: NgModule,\n    args: [{\n      providers: [SwPush, SwUpdate]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ServiceWorkerModule, SwPush, SwRegistrationOptions, SwUpdate };","map":{"version":3,"sources":["D:/angular_update/ictfax/node_modules/@angular/service-worker/fesm2015/service-worker.mjs"],"names":["isPlatformBrowser","i0","Injectable","InjectionToken","NgZone","ApplicationRef","PLATFORM_ID","APP_INITIALIZER","Injector","NgModule","defer","throwError","fromEvent","of","concat","Subject","NEVER","merge","map","filter","switchMap","publish","take","tap","delay","ERR_SW_NOT_SUPPORTED","errorObservable","message","Error","NgswCommChannel","constructor","serviceWorker","worker","events","registration","controllerChangeEvents","controllerChanges","pipe","controller","currentController","controllerWithChanges","c","getRegistration","rawEvents","rawEventPayload","event","data","eventsUnconnected","type","connect","postMessage","action","payload","sw","Object","assign","toPromise","then","undefined","postMessageWithOperation","operationNonce","waitForOperationCompleted","Promise","all","result","generateNonce","Math","round","random","eventsOfType","filterFn","includes","nextEventOfType","nonce","error","isEnabled","SwPush","subscriptionChanges","messages","notificationClicks","subscription","pushManager","workerDrivenSubscriptions","pm","getSubscription","requestSubscription","options","reject","pushOptions","userVisibleOnly","key","decodeBase64","serverPublicKey","replace","applicationServerKey","Uint8Array","ArrayBuffer","length","i","charCodeAt","subscribe","sub","next","unsubscribe","doUnsubscribe","success","input","atob","ɵfac","ɵprov","SwUpdate","versionUpdates","available","activated","unrecoverable","evt","current","currentVersion","latestVersion","checkForUpdate","activateUpdate","SwRegistrationOptions","SCRIPT","ngswAppInitializer","injector","script","platformId","initializer","navigator","enabled","addEventListener","readyToRegister$","registrationStrategy","strategy","args","split","delayWithTimeout","whenStable","ngZone","get","runOutsideAngular","register","scope","catch","err","console","timeout","appRef","isStable","stable","ngswCommChannelFactory","opts","ServiceWorkerModule","ngModule","providers","provide","useValue","useFactory","deps","multi","ɵmod","ɵinj"],"mappings":"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","sourcesContent":["/**\n * @license Angular v13.3.11\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { isPlatformBrowser } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, NgZone, ApplicationRef, PLATFORM_ID, APP_INITIALIZER, Injector, NgModule } from '@angular/core';\nimport { defer, throwError, fromEvent, of, concat, Subject, NEVER, merge } from 'rxjs';\nimport { map, filter, switchMap, publish, take, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\nfunction errorObservable(message) {\n    return defer(() => throwError(new Error(message)));\n}\n/**\n * @publicApi\n */\nclass NgswCommChannel {\n    constructor(serviceWorker) {\n        this.serviceWorker = serviceWorker;\n        if (!serviceWorker) {\n            this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n        }\n        else {\n            const controllerChangeEvents = fromEvent(serviceWorker, 'controllerchange');\n            const controllerChanges = controllerChangeEvents.pipe(map(() => serviceWorker.controller));\n            const currentController = defer(() => of(serviceWorker.controller));\n            const controllerWithChanges = concat(currentController, controllerChanges);\n            this.worker = controllerWithChanges.pipe(filter((c) => !!c));\n            this.registration = (this.worker.pipe(switchMap(() => serviceWorker.getRegistration())));\n            const rawEvents = fromEvent(serviceWorker, 'message');\n            const rawEventPayload = rawEvents.pipe(map(event => event.data));\n            const eventsUnconnected = rawEventPayload.pipe(filter(event => event && event.type));\n            const events = eventsUnconnected.pipe(publish());\n            events.connect();\n            this.events = events;\n        }\n    }\n    postMessage(action, payload) {\n        return this.worker\n            .pipe(take(1), tap((sw) => {\n            sw.postMessage(Object.assign({ action }, payload));\n        }))\n            .toPromise()\n            .then(() => undefined);\n    }\n    postMessageWithOperation(type, payload, operationNonce) {\n        const waitForOperationCompleted = this.waitForOperationCompleted(operationNonce);\n        const postMessage = this.postMessage(type, payload);\n        return Promise.all([postMessage, waitForOperationCompleted]).then(([, result]) => result);\n    }\n    generateNonce() {\n        return Math.round(Math.random() * 10000000);\n    }\n    eventsOfType(type) {\n        let filterFn;\n        if (typeof type === 'string') {\n            filterFn = (event) => event.type === type;\n        }\n        else {\n            filterFn = (event) => type.includes(event.type);\n        }\n        return this.events.pipe(filter(filterFn));\n    }\n    nextEventOfType(type) {\n        return this.eventsOfType(type).pipe(take(1));\n    }\n    waitForOperationCompleted(nonce) {\n        return this.eventsOfType('OPERATION_COMPLETED')\n            .pipe(filter(event => event.nonce === nonce), take(1), map(event => {\n            if (event.result !== undefined) {\n                return event.result;\n            }\n            throw new Error(event.error);\n        }))\n            .toPromise();\n    }\n    get isEnabled() {\n        return !!this.serviceWorker;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Subscribe and listen to\n * [Web Push\n * Notifications](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices) through\n * Angular Service Worker.\n *\n * @usageNotes\n *\n * You can inject a `SwPush` instance into any component or service\n * as a dependency.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"inject-sw-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * To subscribe, call `SwPush.requestSubscription()`, which asks the user for permission.\n * The call returns a `Promise` with a new\n * [`PushSubscription`](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\n * instance.\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-push\"\n * header=\"app.component.ts\"></code-example>\n *\n * A request is rejected if the user denies permission, or if the browser\n * blocks or does not support the Push API or ServiceWorkers.\n * Check `SwPush.isEnabled` to confirm status.\n *\n * Invoke Push Notifications by pushing a message with the following payload.\n *\n * ```ts\n * {\n *   \"notification\": {\n *     \"actions\": NotificationAction[],\n *     \"badge\": USVString,\n *     \"body\": DOMString,\n *     \"data\": any,\n *     \"dir\": \"auto\"|\"ltr\"|\"rtl\",\n *     \"icon\": USVString,\n *     \"image\": USVString,\n *     \"lang\": DOMString,\n *     \"renotify\": boolean,\n *     \"requireInteraction\": boolean,\n *     \"silent\": boolean,\n *     \"tag\": DOMString,\n *     \"timestamp\": DOMTimeStamp,\n *     \"title\": DOMString,\n *     \"vibrate\": number[]\n *   }\n * }\n * ```\n *\n * Only `title` is required. See `Notification`\n * [instance\n * properties](https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties).\n *\n * While the subscription is active, Service Worker listens for\n * [PushEvent](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent)\n * occurrences and creates\n * [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification)\n * instances in response.\n *\n * Unsubscribe using `SwPush.unsubscribe()`.\n *\n * An application can subscribe to `SwPush.notificationClicks` observable to be notified when a user\n * clicks on a notification. For example:\n *\n * <code-example path=\"service-worker/push/module.ts\" region=\"subscribe-to-notification-clicks\"\n * header=\"app.component.ts\"></code-example>\n *\n * You can read more on handling notification clicks in the [Service worker notifications\n * guide](guide/service-worker-notifications).\n *\n * @see [Push Notifications](https://developers.google.com/web/fundamentals/codelabs/push-notifications/)\n * @see [Angular Push Notifications](https://blog.angular-university.io/angular-push-notifications/)\n * @see [MDN: Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)\n * @see [MDN: Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API)\n * @see [MDN: Web Push API Notifications best practices](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)\n *\n * @publicApi\n */\nclass SwPush {\n    constructor(sw) {\n        this.sw = sw;\n        this.subscriptionChanges = new Subject();\n        if (!sw.isEnabled) {\n            this.messages = NEVER;\n            this.notificationClicks = NEVER;\n            this.subscription = NEVER;\n            return;\n        }\n        this.messages = this.sw.eventsOfType('PUSH').pipe(map(message => message.data));\n        this.notificationClicks =\n            this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(map((message) => message.data));\n        this.pushManager = this.sw.registration.pipe(map(registration => registration.pushManager));\n        const workerDrivenSubscriptions = this.pushManager.pipe(switchMap(pm => pm.getSubscription()));\n        this.subscription = merge(workerDrivenSubscriptions, this.subscriptionChanges);\n    }\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     */\n    get isEnabled() {\n        return this.sw.isEnabled;\n    }\n    /**\n     * Subscribes to Web Push Notifications,\n     * after requesting and receiving user permission.\n     *\n     * @param options An object containing the `serverPublicKey` string.\n     * @returns A Promise that resolves to the new subscription object.\n     */\n    requestSubscription(options) {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const pushOptions = { userVisibleOnly: true };\n        let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n        let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n        for (let i = 0; i < key.length; i++) {\n            applicationServerKey[i] = key.charCodeAt(i);\n        }\n        pushOptions.applicationServerKey = applicationServerKey;\n        return this.pushManager.pipe(switchMap(pm => pm.subscribe(pushOptions)), take(1))\n            .toPromise()\n            .then(sub => {\n            this.subscriptionChanges.next(sub);\n            return sub;\n        });\n    }\n    /**\n     * Unsubscribes from Service Worker push notifications.\n     *\n     * @returns A Promise that is resolved when the operation succeeds, or is rejected if there is no\n     *          active subscription or the unsubscribe operation fails.\n     */\n    unsubscribe() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const doUnsubscribe = (sub) => {\n            if (sub === null) {\n                throw new Error('Not subscribed to push notifications.');\n            }\n            return sub.unsubscribe().then(success => {\n                if (!success) {\n                    throw new Error('Unsubscribe failed!');\n                }\n                this.subscriptionChanges.next(null);\n            });\n        };\n        return this.subscription.pipe(take(1), switchMap(doUnsubscribe)).toPromise();\n    }\n    decodeBase64(input) {\n        return atob(input);\n    }\n}\nSwPush.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SwPush, deps: [{ token: NgswCommChannel }], target: i0.ɵɵFactoryTarget.Injectable });\nSwPush.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SwPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SwPush, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: NgswCommChannel }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * @see {@link guide/service-worker-communications Service worker communication guide}\n *\n * @publicApi\n */\nclass SwUpdate {\n    constructor(sw) {\n        this.sw = sw;\n        if (!sw.isEnabled) {\n            this.versionUpdates = NEVER;\n            this.available = NEVER;\n            this.activated = NEVER;\n            this.unrecoverable = NEVER;\n            return;\n        }\n        this.versionUpdates = this.sw.eventsOfType(['VERSION_DETECTED', 'VERSION_INSTALLATION_FAILED', 'VERSION_READY']);\n        this.available = this.versionUpdates.pipe(filter((evt) => evt.type === 'VERSION_READY'), map(evt => ({\n            type: 'UPDATE_AVAILABLE',\n            current: evt.currentVersion,\n            available: evt.latestVersion,\n        })));\n        this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n        this.unrecoverable = this.sw.eventsOfType('UNRECOVERABLE_STATE');\n    }\n    /**\n     * True if the Service Worker is enabled (supported by the browser and enabled via\n     * `ServiceWorkerModule`).\n     */\n    get isEnabled() {\n        return this.sw.isEnabled;\n    }\n    /**\n     * Checks for an update and waits until the new version is downloaded from the server and ready\n     * for activation.\n     *\n     * @returns a promise that\n     * - resolves to `true` if a new version was found and is ready to be activated.\n     * - resolves to `false` if no new version was found\n     * - rejects if any error occurs\n     */\n    checkForUpdate() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const nonce = this.sw.generateNonce();\n        return this.sw.postMessageWithOperation('CHECK_FOR_UPDATES', { nonce }, nonce);\n    }\n    /**\n     * Updates the current client (i.e. browser tab) to the latest version that is ready for\n     * activation.\n     *\n     * @returns a promise that\n     *  - resolves to `true` if an update was activated successfully\n     *  - resolves to `false` if no update was available (for example, the client was already on the\n     *    latest version).\n     *  - rejects if any error occurs\n     */\n    activateUpdate() {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        const nonce = this.sw.generateNonce();\n        return this.sw.postMessageWithOperation('ACTIVATE_UPDATE', { nonce }, nonce);\n    }\n}\nSwUpdate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SwUpdate, deps: [{ token: NgswCommChannel }], target: i0.ɵɵFactoryTarget.Injectable });\nSwUpdate.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SwUpdate });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: SwUpdate, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: NgswCommChannel }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token that can be used to provide options for `ServiceWorkerModule` outside of\n * `ServiceWorkerModule.register()`.\n *\n * You can use this token to define a provider that generates the registration options at runtime,\n * for example via a function call:\n *\n * {@example service-worker/registration-options/module.ts region=\"registration-options\"\n *     header=\"app.module.ts\"}\n *\n * @publicApi\n */\nclass SwRegistrationOptions {\n}\nconst SCRIPT = new InjectionToken('NGSW_REGISTER_SCRIPT');\nfunction ngswAppInitializer(injector, script, options, platformId) {\n    const initializer = () => {\n        if (!(isPlatformBrowser(platformId) && ('serviceWorker' in navigator) &&\n            options.enabled !== false)) {\n            return;\n        }\n        // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n        // becomes active. This allows the SW to initialize itself even if there is no application\n        // traffic.\n        navigator.serviceWorker.addEventListener('controllerchange', () => {\n            if (navigator.serviceWorker.controller !== null) {\n                navigator.serviceWorker.controller.postMessage({ action: 'INITIALIZE' });\n            }\n        });\n        let readyToRegister$;\n        if (typeof options.registrationStrategy === 'function') {\n            readyToRegister$ = options.registrationStrategy();\n        }\n        else {\n            const [strategy, ...args] = (options.registrationStrategy || 'registerWhenStable:30000').split(':');\n            switch (strategy) {\n                case 'registerImmediately':\n                    readyToRegister$ = of(null);\n                    break;\n                case 'registerWithDelay':\n                    readyToRegister$ = delayWithTimeout(+args[0] || 0);\n                    break;\n                case 'registerWhenStable':\n                    readyToRegister$ = !args[0] ? whenStable(injector) :\n                        merge(whenStable(injector), delayWithTimeout(+args[0]));\n                    break;\n                default:\n                    // Unknown strategy.\n                    throw new Error(`Unknown ServiceWorker registration strategy: ${options.registrationStrategy}`);\n            }\n        }\n        // Don't return anything to avoid blocking the application until the SW is registered.\n        // Also, run outside the Angular zone to avoid preventing the app from stabilizing (especially\n        // given that some registration strategies wait for the app to stabilize).\n        // Catch and log the error if SW registration fails to avoid uncaught rejection warning.\n        const ngZone = injector.get(NgZone);\n        ngZone.runOutsideAngular(() => readyToRegister$.pipe(take(1)).subscribe(() => navigator.serviceWorker.register(script, { scope: options.scope })\n            .catch(err => console.error('Service worker registration failed with:', err))));\n    };\n    return initializer;\n}\nfunction delayWithTimeout(timeout) {\n    return of(null).pipe(delay(timeout));\n}\nfunction whenStable(injector) {\n    const appRef = injector.get(ApplicationRef);\n    return appRef.isStable.pipe(filter(stable => stable));\n}\nfunction ngswCommChannelFactory(opts, platformId) {\n    return new NgswCommChannel(isPlatformBrowser(platformId) && opts.enabled !== false ? navigator.serviceWorker :\n        undefined);\n}\n/**\n * @publicApi\n */\nclass ServiceWorkerModule {\n    /**\n     * Register the given Angular Service Worker script.\n     *\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\n     * workers are not supported by the browser, and the service worker will not be registered.\n     */\n    static register(script, opts = {}) {\n        return {\n            ngModule: ServiceWorkerModule,\n            providers: [\n                { provide: SCRIPT, useValue: script },\n                { provide: SwRegistrationOptions, useValue: opts },\n                {\n                    provide: NgswCommChannel,\n                    useFactory: ngswCommChannelFactory,\n                    deps: [SwRegistrationOptions, PLATFORM_ID]\n                },\n                {\n                    provide: APP_INITIALIZER,\n                    useFactory: ngswAppInitializer,\n                    deps: [Injector, SCRIPT, SwRegistrationOptions, PLATFORM_ID],\n                    multi: true,\n                },\n            ],\n        };\n    }\n}\nServiceWorkerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ServiceWorkerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nServiceWorkerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ServiceWorkerModule });\nServiceWorkerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ServiceWorkerModule, providers: [SwPush, SwUpdate] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ServiceWorkerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [SwPush, SwUpdate],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ServiceWorkerModule, SwPush, SwRegistrationOptions, SwUpdate };\n"]},"metadata":{},"sourceType":"module"}