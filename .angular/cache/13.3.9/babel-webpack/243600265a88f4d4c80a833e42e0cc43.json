{"ast":null,"code":"import { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport 'rxjs/add/operator/startWith';\nimport 'rxjs/add/observable/merge';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/map';\nimport { Observable } from 'rxjs/Rx';\nexport class SendFaxDataSource extends DataSource {\n  constructor(sendfaxDatabase, _sort, _paginator) {\n    super();\n    this.sendfaxDatabase = sendfaxDatabase;\n    this._sort = _sort;\n    this._paginator = _paginator;\n    this._filterChange = new BehaviorSubject('');\n    this.filteredData = [];\n    this.renderedData = []; // this._filterChange.subscribe(() => this._paginator.pageIndex = this._paginator.pageIndex);\n  }\n\n  get filter() {\n    return this._filterChange.value;\n  }\n\n  set filter(filter) {\n    this._filterChange.next(filter);\n  }\n\n  connect() {\n    const displayDataChanges = [this.sendfaxDatabase.dataChange, this._sort.sortChange, this._filterChange, this._paginator.page];\n    return Observable.merge(...displayDataChanges).map(() => {\n      // Filter data\n      this.filteredData = this.sendfaxDatabase.data.slice().filter(item => {\n        let searchStr = item.contact_phone.toLowerCase();\n        return searchStr.indexOf(this.filter.toLowerCase()) != -1;\n      }); // Sort filtered data\n\n      const sortedData = this.getSortedData(this.filteredData.slice()); // Grab the page's slice of the filtered sorted data.\n\n      const startIndex = this._paginator.pageIndex * this._paginator.pageSize;\n      this.renderedData = sortedData.splice(startIndex, this._paginator.pageSize);\n      return this.renderedData;\n    });\n  }\n\n  disconnect() {}\n\n  getSortedData(data) {\n    if (!this._sort.active || this._sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      let propertyA = '';\n      let propertyB = '';\n\n      switch (this._sort.active) {\n        case 'ID':\n          [propertyA, propertyB] = [a.transmission_id, b.transmission_id];\n          break;\n\n        case 'phone':\n          [propertyA, propertyB] = [a.contact_phone, b.contact_phone];\n          break;\n\n        case 'Timestamp':\n          [propertyA, propertyB] = [a.last_run, b.last_run];\n          break;\n\n        case 'username':\n          [propertyA, propertyB] = [a.username, b.username];\n          break;\n\n        case 'status':\n          [propertyA, propertyB] = [a.status, b.status];\n          break;\n      }\n\n      const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n      const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n      return (valueA < valueB ? -1 : 1) * (this._sort.direction === 'asc' ? 1 : -1);\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}