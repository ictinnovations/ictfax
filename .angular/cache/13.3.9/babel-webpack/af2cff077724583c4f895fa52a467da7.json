{"ast":null,"code":"import { Http, RequestOptions, Headers, ResponseContentType } from '@angular/http';\nimport { AppService } from '../../../app/app.service';\nimport { getFileNameFromResponseContentDisposition, saveFile } from '../../file-download-helper';\nimport 'rxjs/add/operator/toPromise';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../app/app.service\";\nimport * as i2 from \"@angular/http\";\nexport let InFaxService = /*#__PURE__*/(() => {\n  class InFaxService {\n    constructor(app_service, http) {\n      this.app_service = app_service;\n      this.http = http;\n    }\n\n    get_InFaxTransmissionList() {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const getUrl = `${this.app_service.apiUrlTransmission}?service_flag=2&direction=inbound`;\n      return this.http.get(getUrl, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    get_Documentdownload(document_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      options.responseType = ResponseContentType.Blob;\n      const url = `${this.app_service.apiUrlDocument}/${document_id}/media`;\n      this.http.get(url, options).subscribe(res => {\n        const fileName = getFileNameFromResponseContentDisposition(res);\n        saveFile(res.blob(), fileName);\n      }, error => {\n        this.app_service.downloadError(error);\n      });\n    }\n\n    getTransmissionResult(transmission_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const getUrl = `${this.app_service.apiUrlTransmission}/${transmission_id}/results?name=document`;\n      return this.http.get(getUrl, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n  }\n\n  InFaxService.ɵfac = function InFaxService_Factory(t) {\n    return new (t || InFaxService)(i0.ɵɵinject(i1.AppService), i0.ɵɵinject(i2.Http));\n  };\n\n  InFaxService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InFaxService,\n    factory: InFaxService.ɵfac\n  });\n  return InFaxService;\n})();","map":null,"metadata":{},"sourceType":"module"}