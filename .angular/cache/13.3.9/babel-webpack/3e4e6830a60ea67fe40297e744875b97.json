{"ast":null,"code":"var CoreModule_1;\nimport { __decorate, __metadata, __param } from \"tslib\";\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NbAuthModule, NbPasswordAuthStrategy, NbAuthJWTToken, getDeepFromObject } from '@nebular/auth';\nimport { NbSecurityModule, NbRoleProvider } from '@nebular/security';\nimport { of as observableOf } from 'rxjs';\nimport { throwIfAlreadyLoaded } from './module-import-guard';\nimport { AnalyticsService, LayoutService, PlayerService, SeoService, StateService } from './utils';\nimport { DashboardService } from '../pages/dashboard/dashboard.service';\nimport { AppService } from '../app.service';\nimport { CampaignService } from '../pages/campaigns/campaign.service';\nimport { TransmissionService } from '../pages/transmission/transmission.service';\nimport { ContactService } from '../pages/contact/contact.service';\nimport { GroupService } from '../pages/contact/group/group.service';\nimport { ExtensionService } from '../pages/extension/extension.service';\nimport { DocumentService } from '../pages/message/document/document.service';\nimport { AUserService } from '../pages/user/user.service';\nimport { ProviderService } from '../pages/provider/provider.service';\nimport { environment } from '../../environments/environment';\nimport { AuthGuard } from '../auth-guard.service';\nimport { DIDService } from '../pages/did/did.service';\nimport { SendFaxService } from '../pages/sendfax/sendfax.service';\nimport { InFaxService } from '../pages/infax/infax.service';\nimport { IncomingNumberService } from '../pages/incoming_number/incoming_number.service';\nconst socialLinks = [{\n  url: 'https://github.com/akveo/nebular',\n  target: '_blank',\n  icon: 'github'\n}, {\n  url: 'https://www.facebook.com/akveo/',\n  target: '_blank',\n  icon: 'facebook'\n}, {\n  url: 'https://twitter.com/akveo_inc',\n  target: '_blank',\n  icon: 'twitter'\n}];\nconst DATA_SERVICES = [];\nexport class NbSimpleRoleProvider extends NbRoleProvider {\n  getRole() {\n    // here you could provide any role based on any auth flow\n    return observableOf('guest');\n  }\n\n}\nexport const NB_CORE_PROVIDERS = [...DATA_SERVICES, ...NbAuthModule.forRoot({\n  strategies: [NbPasswordAuthStrategy.setup({\n    name: 'email',\n    baseEndpoint: environment.API_URL,\n    requestPass: false,\n    logout: {\n      endpoint: '/authenticate/cancel',\n      method: 'post',\n      redirect: {\n        success: \"/authen\",\n        failure: null\n      },\n      requireValidToken: true\n    },\n    resetPass: {\n      endpoint: \"auth/reset\",\n      redirect: {\n        success: \"/\",\n        failure: \"/auth/login\"\n      }\n    },\n    refreshToken: {\n      endpoint: 'auth/refresh',\n      method: \"post\"\n    },\n    login: {\n      endpoint: '/authenticate',\n      method: \"post\",\n      redirect: {\n        success: \"/dashboard\",\n        failure: null\n      },\n      requireValidToken: true\n    },\n    token: {\n      class: NbAuthJWTToken,\n      key: 'token',\n      getter: token_to_json\n    }\n  })],\n  forms: {\n    login: {\n      socialLinks: socialLinks\n    },\n    register: {\n      socialLinks: socialLinks\n    }\n  }\n}).providers, NbSecurityModule.forRoot({\n  accessControl: {\n    guest: {\n      view: '*'\n    },\n    user: {\n      parent: 'guest',\n      create: '*',\n      edit: '*',\n      remove: '*'\n    }\n  }\n}).providers, {\n  provide: NbRoleProvider,\n  useClass: NbSimpleRoleProvider\n}, AnalyticsService, LayoutService, PlayerService, SeoService, StateService, DashboardService, AppService, CampaignService, TransmissionService, ContactService, GroupService, ExtensionService, DocumentService, AUserService, ProviderService, AuthGuard, DIDService, SendFaxService, InFaxService, IncomingNumberService];\nexport function token_to_json(module, res) {\n  return getDeepFromObject(res.body, 'token');\n}\nlet CoreModule = CoreModule_1 = class CoreModule {\n  constructor(parentModule) {\n    throwIfAlreadyLoaded(parentModule, 'CoreModule');\n  }\n\n  static forRoot() {\n    return {\n      ngModule: CoreModule_1,\n      providers: [...NB_CORE_PROVIDERS]\n    };\n  }\n\n};\nCoreModule = CoreModule_1 = __decorate([NgModule({\n  imports: [CommonModule],\n  exports: [NbAuthModule],\n  declarations: []\n}), __param(0, Optional()), __param(0, SkipSelf()), __metadata(\"design:paramtypes\", [CoreModule])], CoreModule);\nexport { CoreModule };","map":null,"metadata":{},"sourceType":"module"}