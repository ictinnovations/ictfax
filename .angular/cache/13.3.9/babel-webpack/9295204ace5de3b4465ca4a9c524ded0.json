{"ast":null,"code":"import { Headers } from '@angular/http';\nimport { Http, RequestOptions } from '@angular/http';\nimport { Campaign, SMSProgram, DocumentProgram, VoiceCallProgram, TemplateProgram } from './campaign';\nimport { AppService } from '../../../app/app.service';\nimport 'rxjs/add/operator/toPromise';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"../../../app/app.service\";\nexport let CampaignService = /*#__PURE__*/(() => {\n  class CampaignService {\n    constructor(http, app_service) {\n      this.http = http;\n      this.app_service = app_service;\n      this.aCampaign = [];\n      this.campaign_id = null;\n      this.campaign = new Campaign();\n      this.smsProgram = new SMSProgram();\n      this.documentProgram = new DocumentProgram();\n      this.templateProgram = new TemplateProgram();\n      this.voiceProgram = new VoiceCallProgram();\n    }\n\n    get_CampaignList() {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      return this.http.get(this.app_service.apiUrlCampaigns, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    get_CampaignData(campaign_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const url5 = `${this.app_service.apiUrlCampaigns}/${campaign_id}`;\n      return this.http.get(url5, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    add_Campaign(campaign) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(campaign);\n      const addUrl = `${this.app_service.apiUrlCampaigns}`;\n      return this.http.post(addUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    update_Campaign(campaign) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(campaign);\n      const updateUrl = `${this.app_service.apiUrlCampaigns}/${campaign.campaign_id}`;\n      return this.http.put(updateUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    delete_Campaign(campaign_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const deleteUrl = `${this.app_service.apiUrlCampaigns}/${campaign_id}`;\n      return this.http.delete(deleteUrl, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    add_sendsms(smsProgram) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(smsProgram);\n      const addSendSmsUrl = `${this.app_service.apiUrlPrograms}/sendsms`;\n      return this.http.post(addSendSmsUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    add_sendemail(templateProgram) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(templateProgram);\n      const addSendEmailUrl = `${this.app_service.apiUrlPrograms}/sendemail`;\n      return this.http.post(addSendEmailUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    add_senddocument(documentProgram) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(documentProgram);\n      const addSendFaxUrl = `${this.app_service.apiUrlPrograms}/sendfax`;\n      return this.http.post(addSendFaxUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    add_voicecall(voiceProgram) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(voiceProgram);\n      const addSendRecordingUrl = `${this.app_service.apiUrlPrograms}/voicemessage`;\n      return this.http.post(addSendRecordingUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    start_campaign(campaign_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const starturl = `${this.app_service.apiUrlCampaigns}/${campaign_id}/start`;\n      return this.http.put(starturl, '', options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    stop_campaign(campaign_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const starturl = `${this.app_service.apiUrlCampaigns}/${campaign_id}/stop`;\n      return this.http.put(starturl, '', options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    schedule_campaign(campaign_id, action) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const scheduleurl = `${this.app_service.apiUrlCampaigns}/${campaign_id}/${action}/schedule`;\n      return this.http.post(scheduleurl, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    delete_schedule(campaign_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const url = `${this.app_service.apiUrlCampaigns}/${campaign_id}/schedule/cancel`;\n      return this.http.delete(url, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n  }\n\n  CampaignService.ɵfac = function CampaignService_Factory(t) {\n    return new (t || CampaignService)(i0.ɵɵinject(i1.Http), i0.ɵɵinject(i2.AppService));\n  };\n\n  CampaignService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CampaignService,\n    factory: CampaignService.ɵfac\n  });\n  return CampaignService;\n})();","map":null,"metadata":{},"sourceType":"module"}