{"ast":null,"code":"import { DataSource } from '@angular/cdk/collections';\nimport { Observable } from 'rxjs';\nexport class DIDDataSource extends DataSource {\n  constructor(didDatabase, _sort, _paginator) {\n    super();\n    this.didDatabase = didDatabase;\n    this._sort = _sort;\n    this._paginator = _paginator;\n  }\n\n  connect() {\n    const displayDataChanges = [this.didDatabase.dataChange, this._sort.sortChange, this._paginator.page];\n    return Observable.merge(...displayDataChanges).map(() => this.getSortedData()).map(data => this.paginate(data));\n  }\n\n  disconnect() {}\n\n  getSortedData() {\n    const data = this.didDatabase.data.slice();\n\n    if (!this._sort.active || this._sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      let propertyA = '';\n      let propertyB = '';\n\n      switch (this._sort.active) {\n        case 'phone':\n          [propertyA, propertyB] = [a.phone, b.phone];\n          break;\n\n        case 'first_name':\n          [propertyA, propertyB] = [a.first_name, b.first_name];\n          break;\n\n        case 'assigned_to':\n          [propertyA, propertyB] = [a.assigned_to, b.assigned_to];\n          break;\n      }\n\n      const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n      const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n      return (valueA < valueB ? -1 : 1) * (this._sort.direction === 'asc' ? 1 : -1);\n    });\n  }\n\n  paginate(data) {\n    const startIndex = this._paginator.pageIndex * this._paginator.pageSize;\n    return data.splice(startIndex, this._paginator.pageSize);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}