{"ast":null,"code":"import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nconst DEFAULT_WEBSOCKET_CONFIG = {\n  url: '',\n  deserializer: e => JSON.parse(e.data),\n  serializer: value => JSON.stringify(value)\n};\nconst WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nexport class WebSocketSubject extends AnonymousSubject {\n  constructor(urlConfigOrSource, destination) {\n    super();\n\n    if (urlConfigOrSource instanceof Observable) {\n      this.destination = destination;\n      this.source = urlConfigOrSource;\n    } else {\n      const config = this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG);\n      this._output = new Subject();\n\n      if (typeof urlConfigOrSource === 'string') {\n        config.url = urlConfigOrSource;\n      } else {\n        for (let key in urlConfigOrSource) {\n          if (urlConfigOrSource.hasOwnProperty(key)) {\n            config[key] = urlConfigOrSource[key];\n          }\n        }\n      }\n\n      if (!config.WebSocketCtor && WebSocket) {\n        config.WebSocketCtor = WebSocket;\n      } else if (!config.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift(operator) {\n    const sock = new WebSocketSubject(this._config, this.destination);\n    sock.operator = operator;\n    sock.source = this;\n    return sock;\n  }\n\n  _resetState() {\n    this._socket = null;\n\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n\n    this._output = new Subject();\n  }\n\n  multiplex(subMsg, unsubMsg, messageFilter) {\n    const self = this;\n    return new Observable(observer => {\n      try {\n        self.next(subMsg());\n      } catch (err) {\n        observer.error(err);\n      }\n\n      const subscription = self.subscribe(x => {\n        try {\n          if (messageFilter(x)) {\n            observer.next(x);\n          }\n        } catch (err) {\n          observer.error(err);\n        }\n      }, err => observer.error(err), () => observer.complete());\n      return () => {\n        try {\n          self.next(unsubMsg());\n        } catch (err) {\n          observer.error(err);\n        }\n\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  _connectSocket() {\n    const {\n      WebSocketCtor,\n      protocol,\n      url,\n      binaryType\n    } = this._config;\n    const observer = this._output;\n    let socket = null;\n\n    try {\n      socket = protocol ? new WebSocketCtor(url, protocol) : new WebSocketCtor(url);\n      this._socket = socket;\n\n      if (binaryType) {\n        this._socket.binaryType = binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this._socket = null;\n\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = e => {\n      const {\n        _socket\n      } = this;\n\n      if (!_socket) {\n        socket.close();\n\n        this._resetState();\n\n        return;\n      }\n\n      const {\n        openObserver\n      } = this._config;\n\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n      this.destination = Subscriber.create(x => {\n        if (socket.readyState === 1) {\n          try {\n            const {\n              serializer\n            } = this._config;\n            socket.send(serializer(x));\n          } catch (e) {\n            this.destination.error(e);\n          }\n        }\n      }, e => {\n        const {\n          closingObserver\n        } = this._config;\n\n        if (closingObserver) {\n          closingObserver.next(undefined);\n        }\n\n        if (e && e.code) {\n          socket.close(e.code, e.reason);\n        } else {\n          observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n        }\n\n        this._resetState();\n      }, () => {\n        const {\n          closingObserver\n        } = this._config;\n\n        if (closingObserver) {\n          closingObserver.next(undefined);\n        }\n\n        socket.close();\n\n        this._resetState();\n      });\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add(queue.subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = e => {\n      this._resetState();\n\n      observer.error(e);\n    };\n\n    socket.onclose = e => {\n      this._resetState();\n\n      const {\n        closeObserver\n      } = this._config;\n\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = e => {\n      try {\n        const {\n          deserializer\n        } = this._config;\n        observer.next(deserializer(e));\n      } catch (err) {\n        observer.error(err);\n      }\n    };\n  }\n\n  _subscribe(subscriber) {\n    const {\n      source\n    } = this;\n\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n\n    if (!this._socket) {\n      this._connectSocket();\n    }\n\n    this._output.subscribe(subscriber);\n\n    subscriber.add(() => {\n      const {\n        _socket\n      } = this;\n\n      if (this._output.observers.length === 0) {\n        if (_socket && _socket.readyState === 1) {\n          _socket.close();\n        }\n\n        this._resetState();\n      }\n    });\n    return subscriber;\n  }\n\n  unsubscribe() {\n    const {\n      _socket\n    } = this;\n\n    if (_socket && _socket.readyState === 1) {\n      _socket.close();\n    }\n\n    this._resetState();\n\n    super.unsubscribe();\n  }\n\n} //# sourceMappingURL=WebSocketSubject.js.map","map":null,"metadata":{},"sourceType":"module"}