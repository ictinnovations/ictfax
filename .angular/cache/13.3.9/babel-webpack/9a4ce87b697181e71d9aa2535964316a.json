{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Output, Input, ContentChildren, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i2 from '@angular/cdk/collections';\nconst _c0 = [\"input\"];\n\nconst _c1 = function (a0) {\n  return {\n    enterDuration: a0\n  };\n};\n\nconst _c2 = [\"*\"];\nconst MAT_RADIO_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-radio-default-options', {\n  providedIn: 'root',\n  factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    color: 'accent'\n  };\n} // Increasing integer for generating unique ids for radio components.\n\n\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\n\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatRadioGroup),\n  multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\n\nclass MatRadioChange {\n  constructor(\n  /** The MatRadioButton that emits the change event. */\n  source,\n  /** The value of the MatRadioButton. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\n\n\nconst MAT_RADIO_GROUP = /*#__PURE__*/new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\n\nlet _MatRadioGroupBase = /*#__PURE__*/(() => {\n  class _MatRadioGroupBase {\n    constructor(_changeDetector) {\n      this._changeDetector = _changeDetector;\n      /** Selected value for the radio group. */\n\n      this._value = null;\n      /** The HTML name attribute applied to radio buttons in this group. */\n\n      this._name = `mat-radio-group-${nextUniqueId++}`;\n      /** The currently selected radio button. Should match value. */\n\n      this._selected = null;\n      /** Whether the `value` has been set to its initial value. */\n\n      this._isInitialized = false;\n      /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n\n      this._labelPosition = 'after';\n      /** Whether the radio group is disabled. */\n\n      this._disabled = false;\n      /** Whether the radio group is required. */\n\n      this._required = false;\n      /** The method to be called in order to update ngModel */\n\n      this._controlValueAccessorChangeFn = () => {};\n      /**\n       * onTouch function registered via registerOnTouch (ControlValueAccessor).\n       * @docs-private\n       */\n\n\n      this.onTouched = () => {};\n      /**\n       * Event emitted when the group value changes.\n       * Change events are only emitted when the value changes due to user interaction with\n       * a radio button (the same behavior as `<input type-\"radio\">`).\n       */\n\n\n      this.change = new EventEmitter();\n    }\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n\n\n    get name() {\n      return this._name;\n    }\n\n    set name(value) {\n      this._name = value;\n\n      this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n\n\n    get labelPosition() {\n      return this._labelPosition;\n    }\n\n    set labelPosition(v) {\n      this._labelPosition = v === 'before' ? 'before' : 'after';\n\n      this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n\n\n    get value() {\n      return this._value;\n    }\n\n    set value(newValue) {\n      if (this._value !== newValue) {\n        // Set this before proceeding to ensure no circular loop occurs with selection.\n        this._value = newValue;\n\n        this._updateSelectedRadioFromValue();\n\n        this._checkSelectedRadioButton();\n      }\n    }\n\n    _checkSelectedRadioButton() {\n      if (this._selected && !this._selected.checked) {\n        this._selected.checked = true;\n      }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n\n\n    get selected() {\n      return this._selected;\n    }\n\n    set selected(selected) {\n      this._selected = selected;\n      this.value = selected ? selected.value : null;\n\n      this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n\n\n    get required() {\n      return this._required;\n    }\n\n    set required(value) {\n      this._required = coerceBooleanProperty(value);\n\n      this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n\n\n    ngAfterContentInit() {\n      // Mark this component as initialized in AfterContentInit because the initial value can\n      // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n      // NgModel occurs *after* the OnInit of the MatRadioGroup.\n      this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n\n\n    _touch() {\n      if (this.onTouched) {\n        this.onTouched();\n      }\n    }\n\n    _updateRadioButtonNames() {\n      if (this._radios) {\n        this._radios.forEach(radio => {\n          radio.name = this.name;\n\n          radio._markForCheck();\n        });\n      }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n\n\n    _updateSelectedRadioFromValue() {\n      // If the value already matches the selected radio, do nothing.\n      const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n      if (this._radios && !isAlreadySelected) {\n        this._selected = null;\n\n        this._radios.forEach(radio => {\n          radio.checked = this.value === radio.value;\n\n          if (radio.checked) {\n            this._selected = radio;\n          }\n        });\n      }\n    }\n    /** Dispatch change event with current selection and group value. */\n\n\n    _emitChangeEvent() {\n      if (this._isInitialized) {\n        this.change.emit(new MatRadioChange(this._selected, this._value));\n      }\n    }\n\n    _markRadiosForCheck() {\n      if (this._radios) {\n        this._radios.forEach(radio => radio._markForCheck());\n      }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n\n\n    writeValue(value) {\n      this.value = value;\n\n      this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n\n\n    registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._changeDetector.markForCheck();\n    }\n\n  }\n\n  _MatRadioGroupBase.ɵfac = function _MatRadioGroupBase_Factory(t) {\n    return new (t || _MatRadioGroupBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  _MatRadioGroupBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: _MatRadioGroupBase,\n    inputs: {\n      color: \"color\",\n      name: \"name\",\n      labelPosition: \"labelPosition\",\n      value: \"value\",\n      selected: \"selected\",\n      disabled: \"disabled\",\n      required: \"required\"\n    },\n    outputs: {\n      change: \"change\"\n    }\n  });\n  return _MatRadioGroupBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n\n\nlet MatRadioGroup = /*#__PURE__*/(() => {\n  class MatRadioGroup extends _MatRadioGroupBase {}\n\n  MatRadioGroup.ɵfac = /* @__PURE__ */function () {\n    let ɵMatRadioGroup_BaseFactory;\n    return function MatRadioGroup_Factory(t) {\n      return (ɵMatRadioGroup_BaseFactory || (ɵMatRadioGroup_BaseFactory = i0.ɵɵgetInheritedFactory(MatRadioGroup)))(t || MatRadioGroup);\n    };\n  }();\n\n  MatRadioGroup.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatRadioGroup,\n    selectors: [[\"mat-radio-group\"]],\n    contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatRadioButton, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._radios = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"],\n    exportAs: [\"matRadioGroup\"],\n    features: [i0.ɵɵProvidersFeature([MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, {\n      provide: MAT_RADIO_GROUP,\n      useExisting: MatRadioGroup\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return MatRadioGroup;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // Boilerplate for applying mixins to MatRadioButton.\n\n/** @docs-private */\n\n\nclass MatRadioButtonBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n\nconst _MatRadioButtonMixinBase = /*#__PURE__*/mixinDisableRipple( /*#__PURE__*/mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\n\n\nlet _MatRadioButtonBase = /*#__PURE__*/(() => {\n  class _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, animationMode, _providerOverride, tabIndex) {\n      super(elementRef);\n      this._changeDetector = _changeDetector;\n      this._focusMonitor = _focusMonitor;\n      this._radioDispatcher = _radioDispatcher;\n      this._providerOverride = _providerOverride;\n      this._uniqueId = `mat-radio-${++nextUniqueId}`;\n      /** The unique ID for the radio button. */\n\n      this.id = this._uniqueId;\n      /**\n       * Event emitted when the checked state of this radio button changes.\n       * Change events are only emitted when the value changes due to user interaction with\n       * the radio button (the same behavior as `<input type-\"radio\">`).\n       */\n\n      this.change = new EventEmitter();\n      /** Whether this radio is checked. */\n\n      this._checked = false;\n      /** Value assigned to this radio. */\n\n      this._value = null;\n      /** Unregister function for _radioDispatcher */\n\n      this._removeUniqueSelectionListener = () => {}; // Assertions. Ideally these should be stripped out by the compiler.\n      // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n\n\n      this.radioGroup = radioGroup;\n      this._noopAnimations = animationMode === 'NoopAnimations';\n\n      if (tabIndex) {\n        this.tabIndex = coerceNumberProperty(tabIndex, 0);\n      }\n\n      this._removeUniqueSelectionListener = _radioDispatcher.listen((id, name) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n    }\n    /** Whether this radio button is checked. */\n\n\n    get checked() {\n      return this._checked;\n    }\n\n    set checked(value) {\n      const newCheckedState = coerceBooleanProperty(value);\n\n      if (this._checked !== newCheckedState) {\n        this._checked = newCheckedState;\n\n        if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n          this.radioGroup.selected = this;\n        } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n          // When unchecking the selected radio button, update the selected radio\n          // property on the group.\n          this.radioGroup.selected = null;\n        }\n\n        if (newCheckedState) {\n          // Notify all radio buttons with the same name to un-check.\n          this._radioDispatcher.notify(this.id, this.name);\n        }\n\n        this._changeDetector.markForCheck();\n      }\n    }\n    /** The value of this radio button. */\n\n\n    get value() {\n      return this._value;\n    }\n\n    set value(value) {\n      if (this._value !== value) {\n        this._value = value;\n\n        if (this.radioGroup !== null) {\n          if (!this.checked) {\n            // Update checked when the value changed to match the radio group's value\n            this.checked = this.radioGroup.value === value;\n          }\n\n          if (this.checked) {\n            this.radioGroup.selected = this;\n          }\n        }\n      }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n\n\n    get labelPosition() {\n      return this._labelPosition || this.radioGroup && this.radioGroup.labelPosition || 'after';\n    }\n\n    set labelPosition(value) {\n      this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n\n\n    get disabled() {\n      return this._disabled || this.radioGroup !== null && this.radioGroup.disabled;\n    }\n\n    set disabled(value) {\n      this._setDisabled(coerceBooleanProperty(value));\n    }\n    /** Whether the radio button is required. */\n\n\n    get required() {\n      return this._required || this.radioGroup && this.radioGroup.required;\n    }\n\n    set required(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    /** Theme color of the radio button. */\n\n\n    get color() {\n      // As per Material design specifications the selection control radio should use the accent color\n      // palette by default. https://material.io/guidelines/components/selection-controls.html\n      return this._color || this.radioGroup && this.radioGroup.color || this._providerOverride && this._providerOverride.color || 'accent';\n    }\n\n    set color(newValue) {\n      this._color = newValue;\n    }\n    /** ID of the native input element inside `<mat-radio-button>` */\n\n\n    get inputId() {\n      return `${this.id || this._uniqueId}-input`;\n    }\n    /** Focuses the radio button. */\n\n\n    focus(options, origin) {\n      if (origin) {\n        this._focusMonitor.focusVia(this._inputElement, origin, options);\n      } else {\n        this._inputElement.nativeElement.focus(options);\n      }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n\n\n    _markForCheck() {\n      // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n      // update radio button's status\n      this._changeDetector.markForCheck();\n    }\n\n    ngOnInit() {\n      if (this.radioGroup) {\n        // If the radio is inside a radio group, determine if it should be checked\n        this.checked = this.radioGroup.value === this._value;\n\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        } // Copy name from parent radio group\n\n\n        this.name = this.radioGroup.name;\n      }\n    }\n\n    ngDoCheck() {\n      this._updateTabIndex();\n    }\n\n    ngAfterViewInit() {\n      this._updateTabIndex();\n\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n\n\n    _emitChangeEvent() {\n      this.change.emit(new MatRadioChange(this, this._value));\n    }\n\n    _isRippleDisabled() {\n      return this.disableRipple || this.disabled;\n    }\n\n    _onInputClick(event) {\n      // We have to stop propagation for click events on the visual hidden input element.\n      // By default, when a user clicks on a label element, a generated click event will be\n      // dispatched on the associated input element. Since we are using a label element as our\n      // root container, the click event on the `radio-button` will be executed twice.\n      // The real click event will bubble up, and the generated click event also tries to bubble up.\n      // This will lead to multiple click events.\n      // Preventing bubbling for the second event will solve that issue.\n      event.stopPropagation();\n    }\n    /** Triggered when the radio button receives an interaction from the user. */\n\n\n    _onInputInteraction(event) {\n      // We always have to stop propagation on the change event.\n      // Otherwise the change event, from the input element, will bubble up and\n      // emit its event object to the `change` output.\n      event.stopPropagation();\n\n      if (!this.checked && !this.disabled) {\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n\n        this._emitChangeEvent();\n\n        if (this.radioGroup) {\n          this.radioGroup._controlValueAccessorChangeFn(this.value);\n\n          if (groupValueChanged) {\n            this.radioGroup._emitChangeEvent();\n          }\n        }\n      }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n\n\n    _setDisabled(value) {\n      if (this._disabled !== value) {\n        this._disabled = value;\n\n        this._changeDetector.markForCheck();\n      }\n    }\n    /** Gets the tabindex for the underlying input element. */\n\n\n    _updateTabIndex() {\n      var _a;\n\n      const group = this.radioGroup;\n      let value; // Implement a roving tabindex if the button is inside a group. For most cases this isn't\n      // necessary, because the browser handles the tab order for inputs inside a group automatically,\n      // but we need an explicitly higher tabindex for the selected button in order for things like\n      // the focus trap to pick it up correctly.\n\n      if (!group || !group.selected || this.disabled) {\n        value = this.tabIndex;\n      } else {\n        value = group.selected === this ? this.tabIndex : -1;\n      }\n\n      if (value !== this._previousTabIndex) {\n        // We have to set the tabindex directly on the DOM node, because it depends on\n        // the selected state which is prone to \"changed after checked errors\".\n        const input = (_a = this._inputElement) === null || _a === void 0 ? void 0 : _a.nativeElement;\n\n        if (input) {\n          input.setAttribute('tabindex', value + '');\n          this._previousTabIndex = value;\n        }\n      }\n    }\n\n  }\n\n  _MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  _MatRadioButtonBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: _MatRadioButtonBase,\n    viewQuery: function _MatRadioButtonBase_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n      }\n    },\n    inputs: {\n      id: \"id\",\n      name: \"name\",\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n      ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"],\n      checked: \"checked\",\n      value: \"value\",\n      labelPosition: \"labelPosition\",\n      disabled: \"disabled\",\n      required: \"required\",\n      color: \"color\"\n    },\n    outputs: {\n      change: \"change\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return _MatRadioButtonBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n\n\nlet MatRadioButton = /*#__PURE__*/(() => {\n  class MatRadioButton extends _MatRadioButtonBase {\n    constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n      super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n    }\n\n  }\n\n  MatRadioButton.ɵfac = function MatRadioButton_Factory(t) {\n    return new (t || MatRadioButton)(i0.ɵɵdirectiveInject(MAT_RADIO_GROUP, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i2.UniqueSelectionDispatcher), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8), i0.ɵɵinjectAttribute('tabindex'));\n  };\n\n  MatRadioButton.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatRadioButton,\n    selectors: [[\"mat-radio-button\"]],\n    hostAttrs: [1, \"mat-radio-button\"],\n    hostVars: 17,\n    hostBindings: function MatRadioButton_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() {\n          return ctx._inputElement.nativeElement.focus();\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"tabindex\", null)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n        i0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._noopAnimations)(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n      }\n    },\n    inputs: {\n      disableRipple: \"disableRipple\",\n      tabIndex: \"tabIndex\"\n    },\n    exportAs: [\"matRadioButton\"],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c2,\n    decls: 13,\n    vars: 19,\n    consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", 3, \"id\", \"checked\", \"disabled\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]],\n    template: function MatRadioButton_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"label\", 0, 1)(2, \"span\", 2);\n        i0.ɵɵelement(3, \"span\", 3)(4, \"span\", 4);\n        i0.ɵɵelementStart(5, \"input\", 5, 6);\n        i0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) {\n          return ctx._onInputInteraction($event);\n        })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) {\n          return ctx._onInputClick($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"span\", 7);\n        i0.ɵɵelement(8, \"span\", 8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"span\", 9)(10, \"span\", 10);\n        i0.ɵɵtext(11, \"\\xA0\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵprojection(12);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(1);\n\n        i0.ɵɵattribute(\"for\", ctx.inputId);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        i0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", i0.ɵɵpureFunction1(17, _c1, ctx._noopAnimations ? 0 : 150));\n        i0.ɵɵadvance(2);\n        i0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n      }\n    },\n    directives: [i3.MatRipple],\n    styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;display:block;height:20px;left:0;position:absolute;top:0;opacity:0;transition:transform ease 280ms,background-color ease 280ms,opacity linear 1ms 280ms;width:20px;transform:scale(0.001);-webkit-print-color-adjust:exact;color-adjust:exact}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5);opacity:1;transition:transform ease 280ms,background-color ease 280ms}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-label-content{-webkit-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none;top:0;left:0}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{opacity:0;position:absolute;top:0;left:0;margin:0;width:100%;height:100%;cursor:inherit;z-index:-1}.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-ripple,.cdk-high-contrast-active .mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-ripple{outline:solid 3px}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatRadioButton;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatRadioModule = /*#__PURE__*/(() => {\n  class MatRadioModule {}\n\n  MatRadioModule.ɵfac = function MatRadioModule_Factory(t) {\n    return new (t || MatRadioModule)();\n  };\n\n  MatRadioModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatRadioModule\n  });\n  MatRadioModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[MatRippleModule, MatCommonModule], MatCommonModule]\n  });\n  return MatRadioModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase }; //# sourceMappingURL=radio.mjs.map","map":null,"metadata":{},"sourceType":"module"}