{"ast":null,"code":"import { Headers } from '@angular/http';\nimport { Http, ResponseContentType, RequestOptions } from '@angular/http';\nimport { Group } from './group';\nimport { AppService } from '../../../../app/app.service';\nimport { saveFile, getFileNameFromResponseContentDisposition } from '../../../file-download-helper';\nimport 'rxjs/add/operator/toPromise';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"../../../../app/app.service\";\nexport let GroupService = /*#__PURE__*/(() => {\n  class GroupService {\n    constructor(http, app_service) {\n      this.http = http;\n      this.app_service = app_service;\n      this.aGroup = [];\n      this.group_id = null;\n      this.group = new Group();\n    }\n\n    get_GroupList() {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      return this.http.get(this.app_service.apiUrlGroups, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    get_GroupData(group_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const url5 = `${this.app_service.apiUrlGroups}/${group_id}`;\n      return this.http.get(url5, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    add_Group(group) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(group);\n      const addUrl = `${this.app_service.apiUrlGroups}`;\n      return this.http.post(addUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    update_Group(group) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(group);\n      const updateUrl = `${this.app_service.apiUrlGroups}/${group.group_id}`;\n      return this.http.put(updateUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    delete_Group(group_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const deleteUrl = `${this.app_service.apiUrlGroups}/${group_id}`;\n      return this.http.delete(deleteUrl, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    getSampleCSV() {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      options.responseType = ResponseContentType.Blob;\n      const url = `${this.app_service.apiUrlGroups}/sample/csv`;\n      this.http.get(url, options).subscribe(res => {\n        const fileName = getFileNameFromResponseContentDisposition(res);\n        saveFile(res.blob(), fileName);\n      }, error => {\n        this.app_service.downloadError(error);\n      });\n    }\n\n    getContactCSV(group_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      options.responseType = ResponseContentType.Blob;\n      const url = `${this.app_service.apiUrlGroups}/${group_id}/csv`;\n      this.http.get(url, options).subscribe(res => {\n        const fileName = getFileNameFromResponseContentDisposition(res);\n        saveFile(res.blob(), fileName);\n      }, error => {\n        this.app_service.downloadError(error);\n      });\n    }\n\n    handleError(error) {\n      console.error('An error occurred', error); // for demo purposes only\n\n      return Promise.reject(error.message || error);\n    }\n\n  }\n\n  GroupService.ɵfac = function GroupService_Factory(t) {\n    return new (t || GroupService)(i0.ɵɵinject(i1.Http), i0.ɵɵinject(i2.AppService));\n  };\n\n  GroupService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GroupService,\n    factory: GroupService.ɵfac\n  });\n  return GroupService;\n})();","map":null,"metadata":{},"sourceType":"module"}