{"ast":null,"code":"import { Headers } from '@angular/http';\nimport { Http, RequestOptions } from '@angular/http';\nimport { Transmission, Program, SMSProgram, VoiceCallProgram, DocumentProgram, TemplateProgram } from './transmission';\nimport { AppService } from '../../../app/app.service';\nimport 'rxjs/add/operator/toPromise';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"../../../app/app.service\";\nexport let TransmissionService = /*#__PURE__*/(() => {\n  class TransmissionService {\n    constructor(http, app_service) {\n      this.http = http;\n      this.app_service = app_service;\n      this.aTransmission = [];\n      this.transmission_id = null;\n      this.transmission = new Transmission();\n      this.progarm = new Program();\n      this.smsProgram = new SMSProgram();\n      this.documentProgram = new DocumentProgram();\n      this.voiceProgram = new VoiceCallProgram();\n      this.templateProgram = new TemplateProgram();\n    }\n\n    get_OutFaxTransmissionList() {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const getUrl = `${this.app_service.apiUrlTransmission}?service_flag=2&direction=outbound`;\n      return this.http.get(getUrl, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    get_ProgramList() {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      return this.http.get(this.app_service.apiUrlPrograms, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    get_ProgramData(program_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const url5 = `${this.app_service.apiUrlPrograms}/${program_id}`;\n      return this.http.get(url5, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    add_Transmission(transmission) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(transmission);\n      const addTransmissionUrl = `${this.app_service.apiUrlTransmission}`;\n      return this.http.post(addTransmissionUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    add_senddocument(documentProgram) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(documentProgram);\n      const addSendFaxUrl = `${this.app_service.apiUrlPrograms}/sendfax`;\n      return this.http.post(addSendFaxUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    delete_Program(program_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const deleteProgramUrl = `${this.app_service.apiUrlPrograms}/${program_id}`;\n      return this.http.delete(deleteProgramUrl, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    send_transmission(transmission_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const sendurl = `${this.app_service.apiUrlTransmission}/${transmission_id}/send`;\n      return this.http.post(sendurl, '', options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    handleError(error) {\n      console.error('An error occurred', error); // for demo purposes only\n\n      return Promise.reject(error.message || error);\n    }\n\n  }\n\n  TransmissionService.ɵfac = function TransmissionService_Factory(t) {\n    return new (t || TransmissionService)(i0.ɵɵinject(i1.Http), i0.ɵɵinject(i2.AppService));\n  };\n\n  TransmissionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TransmissionService,\n    factory: TransmissionService.ɵfac\n  });\n  return TransmissionService;\n})();","map":null,"metadata":{},"sourceType":"module"}