{"ast":null,"code":"import { Headers } from '@angular/http';\nimport { Http, RequestOptions } from '@angular/http';\nimport { SendFax, DocumentProgram } from './sendfax';\nimport { AppService } from '../../../app/app.service';\nimport 'rxjs/add/operator/toPromise';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"../../../app/app.service\";\nexport let SendFaxService = /*#__PURE__*/(() => {\n  class SendFaxService {\n    constructor(http, app_service) {\n      this.http = http;\n      this.app_service = app_service;\n      this.aSendFax = [];\n      this.transmission_id = null;\n      this.sendfax = new SendFax();\n      this.documentProgram = new DocumentProgram();\n    }\n\n    get_OutFaxTransmissionList() {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const getUrl = `${this.app_service.apiUrlTransmission}?service_flag=2&direction=outbound`;\n      return this.http.get(getUrl, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    add_SendFax(sendfax) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(sendfax);\n      const addTransmissionUrl = `${this.app_service.apiUrlTransmission}`;\n      return this.http.post(addTransmissionUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    add_senddocument(documentProgram) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(documentProgram);\n      const addSendFaxUrl = `${this.app_service.apiUrlPrograms}/sendfax`;\n      return this.http.post(addSendFaxUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    send_transmission(transmission_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const sendurl = `${this.app_service.apiUrlTransmission}/${transmission_id}/send`;\n      return this.http.post(sendurl, '', options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    handleError(error) {\n      console.error('An error occurred', error); // for demo purposes only\n\n      return Promise.reject(error.message || error);\n    }\n\n  }\n\n  SendFaxService.ɵfac = function SendFaxService_Factory(t) {\n    return new (t || SendFaxService)(i0.ɵɵinject(i1.Http), i0.ɵɵinject(i2.AppService));\n  };\n\n  SendFaxService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SendFaxService,\n    factory: SendFaxService.ɵfac\n  });\n  return SendFaxService;\n})();","map":null,"metadata":{},"sourceType":"module"}