{"ast":null,"code":"import { Http } from '@angular/http';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nexport let AppService = /*#__PURE__*/(() => {\n  class AppService {\n    constructor(http, router, _location) {\n      this.http = http;\n      this.router = router;\n      this._location = _location; // headers for uploading the file\n\n      this.upload_Header = [];\n      this.showMessages = {};\n      this.messages = [];\n      this.apiUrl = environment.API_URL;\n      this.apiUrlContacts = `${this.apiUrl}/contacts`;\n      this.apiUrlDocument = `${this.apiUrl}/documents`;\n      this.apiUrlText = `${this.apiUrl}/texts`;\n      this.apiUrlRecording = `${this.apiUrl}/recordings`;\n      this.apiUrlTemplate = `${this.apiUrl}/templates`;\n      this.apiUrlTransmission = `${this.apiUrl}/transmissions`;\n      this.apiUrlPrograms = `${this.apiUrl}/programs`;\n      this.apiUrlProviders = `${this.apiUrl}/providers`;\n      this.apiUrlUsers = `${this.apiUrl}/users`;\n      this.apiUrlGroups = `${this.apiUrl}/groups`;\n      this.apiUrlCampaigns = `${this.apiUrl}/campaigns`;\n      this.apiUrlDashboard = `${this.apiUrl}/statistics`;\n      this.apiUrlAccounts = `${this.apiUrl}/accounts`;\n      this.apiUrlDid = `${this.apiUrl}/dids`;\n      this.apiUrlRoles = `${this.apiUrl}/roles`;\n      this.upload_Header.push({\n        name: 'Authorization',\n        value: 'Bearer ' + JSON.parse(localStorage.getItem('auth_app_token')).value\n      });\n    }\n\n    createAuthorizationHeader(headers) {\n      let token = localStorage.getItem('auth_app_token');\n      headers.append('Authorization', ' Bearer ' + JSON.parse(token).value);\n      headers.append('Content-Type', 'application/json');\n      headers.append('Accept', 'application/json');\n    }\n\n    handleError(error) {\n      console.error('An error occurred', error); // for demo purposes only\n\n      if (error.status === 0 || error.status === 500) {\n        this.router.navigate(['pages/miscellaneous/404']);\n      }\n\n      if (error.status === 401) {\n        this.router.navigate(['auth/login']);\n      }\n\n      if (error.status === 403) {\n        this._location.back();\n      }\n\n      if (error.status === 404) {\n        this.def = JSON.parse(error._body);\n        this.err_code = this.def.error.code; // this.err_code = \"403\";\n\n        this.err_message = this.def.error.message;\n        this.abc = this.err_code + ', ' + this.err_message;\n        this.errors = this.abc;\n      }\n\n      return Promise.reject(error.message || error);\n    }\n\n    downloadError(error) {\n      console.error('An error occurred', error);\n      this.errors = error.status + ' ' + error.statusText;\n      return Promise.reject(error.message || error);\n    }\n\n  }\n\n  AppService.ɵfac = function AppService_Factory(t) {\n    return new (t || AppService)(i0.ɵɵinject(i1.Http), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Location));\n  };\n\n  AppService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppService,\n    factory: AppService.ɵfac\n  });\n  return AppService;\n})();","map":null,"metadata":{},"sourceType":"module"}