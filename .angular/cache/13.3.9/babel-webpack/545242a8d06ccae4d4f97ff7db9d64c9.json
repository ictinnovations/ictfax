{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, Directive, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nconst NB_SECURITY_OPTIONS_TOKEN = new InjectionToken('Nebular Security Options');\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nconst shallowObjectClone = o => Object.assign({}, o);\n\nconst shallowArrayClone = a => Object.assign([], a);\n\nconst popParent = abilities => {\n  const parent = abilities['parent'];\n  delete abilities['parent'];\n  return parent;\n};\n/**\n * Common acl service.\n */\n\n\nlet NbAclService = /*#__PURE__*/(() => {\n  class NbAclService {\n    constructor(settings = {}) {\n      this.settings = settings;\n      this.state = {};\n\n      if (settings.accessControl) {\n        this.setAccessControl(settings.accessControl);\n      }\n    }\n    /**\n     * Set/Reset ACL list\n     * @param {NbAccessControl} list\n     */\n\n\n    setAccessControl(list) {\n      for (const [role, value] of Object.entries(list)) {\n        const abilities = shallowObjectClone(value);\n        const parent = popParent(abilities);\n        this.register(role, parent, abilities);\n      }\n    }\n    /**\n     * Register a new role with a list of abilities (permission/resources combinations)\n     * @param {string} role\n     * @param {string} parent\n     * @param {[permission: string]: string|string[]} abilities\n     */\n\n\n    register(role, parent = null, abilities = {}) {\n      this.validateRole(role);\n      this.state[role] = {\n        parent: parent\n      };\n\n      for (const [permission, value] of Object.entries(abilities)) {\n        const resources = typeof value === 'string' ? [value] : value;\n        this.allow(role, permission, shallowArrayClone(resources));\n      }\n    }\n    /**\n     * Allow a permission for specific resources to a role\n     * @param {string} role\n     * @param {string} permission\n     * @param {string | string[]} resource\n     */\n\n\n    allow(role, permission, resource) {\n      this.validateRole(role);\n\n      if (!this.getRole(role)) {\n        this.register(role, null, {});\n      }\n\n      resource = typeof resource === 'string' ? [resource] : resource;\n      let resources = shallowArrayClone(this.getRoleResources(role, permission));\n      resources = resources.concat(resource);\n      this.state[role][permission] = resources.filter((item, pos) => resources.indexOf(item) === pos);\n    }\n    /**\n     * Check whether the role has a permission to a resource\n     * @param {string} role\n     * @param {string} permission\n     * @param {string} resource\n     * @returns {boolean}\n     */\n\n\n    can(role, permission, resource) {\n      this.validateResource(resource);\n      const parentRole = this.getRoleParent(role);\n      const parentCan = parentRole && this.can(this.getRoleParent(role), permission, resource);\n      return parentCan || this.exactCan(role, permission, resource);\n    }\n\n    getRole(role) {\n      return this.state[role];\n    }\n\n    validateRole(role) {\n      if (!role) {\n        throw new Error('NbAclService: role name cannot be empty');\n      }\n    }\n\n    validateResource(resource) {\n      if (!resource || [NbAclService.ANY_RESOURCE].includes(resource)) {\n        throw new Error(`NbAclService: cannot use empty or bulk '*' resource placeholder with 'can' method`);\n      }\n    }\n\n    exactCan(role, permission, resource) {\n      const resources = this.getRoleResources(role, permission);\n      return resources.includes(resource) || resources.includes(NbAclService.ANY_RESOURCE);\n    }\n\n    getRoleResources(role, permission) {\n      return this.getRoleAbilities(role)[permission] || [];\n    }\n\n    getRoleAbilities(role) {\n      const abilities = shallowObjectClone(this.state[role] || {});\n      popParent(shallowObjectClone(this.state[role] || {}));\n      return abilities;\n    }\n\n    getRoleParent(role) {\n      return this.state[role] ? this.state[role]['parent'] : null;\n    }\n\n  }\n\n  NbAclService.ANY_RESOURCE = '*';\n\n  NbAclService.ɵfac = function NbAclService_Factory(t) {\n    return new (t || NbAclService)(i0.ɵɵinject(NB_SECURITY_OPTIONS_TOKEN, 8));\n  };\n\n  NbAclService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NbAclService,\n    factory: NbAclService.ɵfac\n  });\n  return NbAclService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass NbRoleProvider {}\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\n/**\n * Access checker service.\n *\n * Injects `NbRoleProvider` to determine current user role, and checks access permissions using `NbAclService`\n */\n\n\nlet NbAccessChecker = /*#__PURE__*/(() => {\n  class NbAccessChecker {\n    constructor(roleProvider, acl) {\n      this.roleProvider = roleProvider;\n      this.acl = acl;\n    }\n    /**\n     * Checks whether access is granted or not\n     *\n     * @param {string} permission\n     * @param {string} resource\n     * @returns {Observable<boolean>}\n     */\n\n\n    isGranted(permission, resource) {\n      return this.roleProvider.getRole().pipe(map(role => Array.isArray(role) ? role : [role]), map(roles => {\n        return roles.some(role => this.acl.can(role, permission, resource));\n      }));\n    }\n\n  }\n\n  NbAccessChecker.ɵfac = function NbAccessChecker_Factory(t) {\n    return new (t || NbAccessChecker)(i0.ɵɵinject(NbRoleProvider), i0.ɵɵinject(NbAclService));\n  };\n\n  NbAccessChecker.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NbAccessChecker,\n    factory: NbAccessChecker.ɵfac\n  });\n  return NbAccessChecker;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NbIsGrantedDirective = /*#__PURE__*/(() => {\n  class NbIsGrantedDirective {\n    constructor(templateRef, viewContainer, accessChecker) {\n      this.templateRef = templateRef;\n      this.viewContainer = viewContainer;\n      this.accessChecker = accessChecker;\n      this.destroy$ = new Subject();\n      this.hasView = false;\n    }\n\n    set nbIsGranted([permission, resource]) {\n      this.accessChecker.isGranted(permission, resource).pipe(takeUntil(this.destroy$)).subscribe(can => {\n        if (can && !this.hasView) {\n          this.viewContainer.createEmbeddedView(this.templateRef);\n          this.hasView = true;\n        } else if (!can && this.hasView) {\n          this.viewContainer.clear();\n          this.hasView = false;\n        }\n      });\n    }\n\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n\n  }\n\n  NbIsGrantedDirective.ɵfac = function NbIsGrantedDirective_Factory(t) {\n    return new (t || NbIsGrantedDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(NbAccessChecker));\n  };\n\n  NbIsGrantedDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NbIsGrantedDirective,\n    selectors: [[\"\", \"nbIsGranted\", \"\"]],\n    inputs: {\n      nbIsGranted: \"nbIsGranted\"\n    }\n  });\n  return NbIsGrantedDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NbSecurityModule = /*#__PURE__*/(() => {\n  class NbSecurityModule {\n    static forRoot(nbSecurityOptions) {\n      return {\n        ngModule: NbSecurityModule,\n        providers: [{\n          provide: NB_SECURITY_OPTIONS_TOKEN,\n          useValue: nbSecurityOptions\n        }, NbAclService, NbAccessChecker]\n      };\n    }\n\n  }\n\n  NbSecurityModule.ɵfac = function NbSecurityModule_Factory(t) {\n    return new (t || NbSecurityModule)();\n  };\n\n  NbSecurityModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NbSecurityModule\n  });\n  NbSecurityModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return NbSecurityModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NB_SECURITY_OPTIONS_TOKEN, NbAccessChecker, NbAclService, NbIsGrantedDirective, NbRoleProvider, NbSecurityModule };","map":null,"metadata":{},"sourceType":"module"}