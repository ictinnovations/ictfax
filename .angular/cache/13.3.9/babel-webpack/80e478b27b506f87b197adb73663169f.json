{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, Directive, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nconst NB_SECURITY_OPTIONS_TOKEN = new InjectionToken('Nebular Security Options');\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nconst shallowObjectClone = o => Object.assign({}, o);\n\nconst shallowArrayClone = a => Object.assign([], a);\n\nconst popParent = abilities => {\n  const parent = abilities['parent'];\n  delete abilities['parent'];\n  return parent;\n};\n/**\n * Common acl service.\n */\n\n\nclass NbAclService {\n  constructor(settings = {}) {\n    this.settings = settings;\n    this.state = {};\n\n    if (settings.accessControl) {\n      this.setAccessControl(settings.accessControl);\n    }\n  }\n  /**\n   * Set/Reset ACL list\n   * @param {NbAccessControl} list\n   */\n\n\n  setAccessControl(list) {\n    for (const [role, value] of Object.entries(list)) {\n      const abilities = shallowObjectClone(value);\n      const parent = popParent(abilities);\n      this.register(role, parent, abilities);\n    }\n  }\n  /**\n   * Register a new role with a list of abilities (permission/resources combinations)\n   * @param {string} role\n   * @param {string} parent\n   * @param {[permission: string]: string|string[]} abilities\n   */\n\n\n  register(role, parent = null, abilities = {}) {\n    this.validateRole(role);\n    this.state[role] = {\n      parent: parent\n    };\n\n    for (const [permission, value] of Object.entries(abilities)) {\n      const resources = typeof value === 'string' ? [value] : value;\n      this.allow(role, permission, shallowArrayClone(resources));\n    }\n  }\n  /**\n   * Allow a permission for specific resources to a role\n   * @param {string} role\n   * @param {string} permission\n   * @param {string | string[]} resource\n   */\n\n\n  allow(role, permission, resource) {\n    this.validateRole(role);\n\n    if (!this.getRole(role)) {\n      this.register(role, null, {});\n    }\n\n    resource = typeof resource === 'string' ? [resource] : resource;\n    let resources = shallowArrayClone(this.getRoleResources(role, permission));\n    resources = resources.concat(resource);\n    this.state[role][permission] = resources.filter((item, pos) => resources.indexOf(item) === pos);\n  }\n  /**\n   * Check whether the role has a permission to a resource\n   * @param {string} role\n   * @param {string} permission\n   * @param {string} resource\n   * @returns {boolean}\n   */\n\n\n  can(role, permission, resource) {\n    this.validateResource(resource);\n    const parentRole = this.getRoleParent(role);\n    const parentCan = parentRole && this.can(this.getRoleParent(role), permission, resource);\n    return parentCan || this.exactCan(role, permission, resource);\n  }\n\n  getRole(role) {\n    return this.state[role];\n  }\n\n  validateRole(role) {\n    if (!role) {\n      throw new Error('NbAclService: role name cannot be empty');\n    }\n  }\n\n  validateResource(resource) {\n    if (!resource || [NbAclService.ANY_RESOURCE].includes(resource)) {\n      throw new Error(`NbAclService: cannot use empty or bulk '*' resource placeholder with 'can' method`);\n    }\n  }\n\n  exactCan(role, permission, resource) {\n    const resources = this.getRoleResources(role, permission);\n    return resources.includes(resource) || resources.includes(NbAclService.ANY_RESOURCE);\n  }\n\n  getRoleResources(role, permission) {\n    return this.getRoleAbilities(role)[permission] || [];\n  }\n\n  getRoleAbilities(role) {\n    const abilities = shallowObjectClone(this.state[role] || {});\n    popParent(shallowObjectClone(this.state[role] || {}));\n    return abilities;\n  }\n\n  getRoleParent(role) {\n    return this.state[role] ? this.state[role]['parent'] : null;\n  }\n\n}\n\nNbAclService.ANY_RESOURCE = '*';\n\nNbAclService.ɵfac = function NbAclService_Factory(t) {\n  return new (t || NbAclService)(i0.ɵɵinject(NB_SECURITY_OPTIONS_TOKEN, 8));\n};\n\nNbAclService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NbAclService,\n  factory: NbAclService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NbAclService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [NB_SECURITY_OPTIONS_TOKEN]\n      }]\n    }];\n  }, null);\n})();\n\nclass NbRoleProvider {}\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\n/**\n * Access checker service.\n *\n * Injects `NbRoleProvider` to determine current user role, and checks access permissions using `NbAclService`\n */\n\n\nclass NbAccessChecker {\n  constructor(roleProvider, acl) {\n    this.roleProvider = roleProvider;\n    this.acl = acl;\n  }\n  /**\n   * Checks whether access is granted or not\n   *\n   * @param {string} permission\n   * @param {string} resource\n   * @returns {Observable<boolean>}\n   */\n\n\n  isGranted(permission, resource) {\n    return this.roleProvider.getRole().pipe(map(role => Array.isArray(role) ? role : [role]), map(roles => {\n      return roles.some(role => this.acl.can(role, permission, resource));\n    }));\n  }\n\n}\n\nNbAccessChecker.ɵfac = function NbAccessChecker_Factory(t) {\n  return new (t || NbAccessChecker)(i0.ɵɵinject(NbRoleProvider), i0.ɵɵinject(NbAclService));\n};\n\nNbAccessChecker.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NbAccessChecker,\n  factory: NbAccessChecker.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NbAccessChecker, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: NbRoleProvider\n    }, {\n      type: NbAclService\n    }];\n  }, null);\n})();\n\nclass NbIsGrantedDirective {\n  constructor(templateRef, viewContainer, accessChecker) {\n    this.templateRef = templateRef;\n    this.viewContainer = viewContainer;\n    this.accessChecker = accessChecker;\n    this.destroy$ = new Subject();\n    this.hasView = false;\n  }\n\n  set nbIsGranted([permission, resource]) {\n    this.accessChecker.isGranted(permission, resource).pipe(takeUntil(this.destroy$)).subscribe(can => {\n      if (can && !this.hasView) {\n        this.viewContainer.createEmbeddedView(this.templateRef);\n        this.hasView = true;\n      } else if (!can && this.hasView) {\n        this.viewContainer.clear();\n        this.hasView = false;\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n}\n\nNbIsGrantedDirective.ɵfac = function NbIsGrantedDirective_Factory(t) {\n  return new (t || NbIsGrantedDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(NbAccessChecker));\n};\n\nNbIsGrantedDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NbIsGrantedDirective,\n  selectors: [[\"\", \"nbIsGranted\", \"\"]],\n  inputs: {\n    nbIsGranted: \"nbIsGranted\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NbIsGrantedDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nbIsGranted]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: NbAccessChecker\n    }];\n  }, {\n    nbIsGranted: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NbSecurityModule {\n  static forRoot(nbSecurityOptions) {\n    return {\n      ngModule: NbSecurityModule,\n      providers: [{\n        provide: NB_SECURITY_OPTIONS_TOKEN,\n        useValue: nbSecurityOptions\n      }, NbAclService, NbAccessChecker]\n    };\n  }\n\n}\n\nNbSecurityModule.ɵfac = function NbSecurityModule_Factory(t) {\n  return new (t || NbSecurityModule)();\n};\n\nNbSecurityModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NbSecurityModule\n});\nNbSecurityModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NbSecurityModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NbIsGrantedDirective],\n      exports: [NbIsGrantedDirective]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NB_SECURITY_OPTIONS_TOKEN, NbAccessChecker, NbAclService, NbIsGrantedDirective, NbRoleProvider, NbSecurityModule };","map":{"version":3,"sources":["D:/angular_update/ictfax/node_modules/@nebular/security/fesm2015/nebular-security.mjs"],"names":["i0","InjectionToken","Injectable","Optional","Inject","Directive","Input","NgModule","CommonModule","map","takeUntil","Subject","NB_SECURITY_OPTIONS_TOKEN","shallowObjectClone","o","Object","assign","shallowArrayClone","a","popParent","abilities","parent","NbAclService","constructor","settings","state","accessControl","setAccessControl","list","role","value","entries","register","validateRole","permission","resources","allow","resource","getRole","getRoleResources","concat","filter","item","pos","indexOf","can","validateResource","parentRole","getRoleParent","parentCan","exactCan","Error","ANY_RESOURCE","includes","getRoleAbilities","ɵfac","ɵprov","type","undefined","decorators","args","NbRoleProvider","NbAccessChecker","roleProvider","acl","isGranted","pipe","Array","isArray","roles","some","NbIsGrantedDirective","templateRef","viewContainer","accessChecker","destroy$","hasView","nbIsGranted","subscribe","createEmbeddedView","clear","ngOnDestroy","next","complete","TemplateRef","ViewContainerRef","ɵdir","selector","NbSecurityModule","forRoot","nbSecurityOptions","ngModule","providers","provide","useValue","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, Directive, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nconst NB_SECURITY_OPTIONS_TOKEN = new InjectionToken('Nebular Security Options');\n\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\nconst shallowObjectClone = (o) => Object.assign({}, o);\nconst shallowArrayClone = (a) => Object.assign([], a);\nconst popParent = (abilities) => {\n    const parent = abilities['parent'];\n    delete abilities['parent'];\n    return parent;\n};\n/**\n * Common acl service.\n */\nclass NbAclService {\n    constructor(settings = {}) {\n        this.settings = settings;\n        this.state = {};\n        if (settings.accessControl) {\n            this.setAccessControl(settings.accessControl);\n        }\n    }\n    /**\n     * Set/Reset ACL list\n     * @param {NbAccessControl} list\n     */\n    setAccessControl(list) {\n        for (const [role, value] of Object.entries(list)) {\n            const abilities = shallowObjectClone(value);\n            const parent = popParent(abilities);\n            this.register(role, parent, abilities);\n        }\n    }\n    /**\n     * Register a new role with a list of abilities (permission/resources combinations)\n     * @param {string} role\n     * @param {string} parent\n     * @param {[permission: string]: string|string[]} abilities\n     */\n    register(role, parent = null, abilities = {}) {\n        this.validateRole(role);\n        this.state[role] = {\n            parent: parent,\n        };\n        for (const [permission, value] of Object.entries(abilities)) {\n            const resources = typeof value === 'string' ? [value] : value;\n            this.allow(role, permission, shallowArrayClone(resources));\n        }\n    }\n    /**\n     * Allow a permission for specific resources to a role\n     * @param {string} role\n     * @param {string} permission\n     * @param {string | string[]} resource\n     */\n    allow(role, permission, resource) {\n        this.validateRole(role);\n        if (!this.getRole(role)) {\n            this.register(role, null, {});\n        }\n        resource = typeof resource === 'string' ? [resource] : resource;\n        let resources = shallowArrayClone(this.getRoleResources(role, permission));\n        resources = resources.concat(resource);\n        this.state[role][permission] = resources\n            .filter((item, pos) => resources.indexOf(item) === pos);\n    }\n    /**\n     * Check whether the role has a permission to a resource\n     * @param {string} role\n     * @param {string} permission\n     * @param {string} resource\n     * @returns {boolean}\n     */\n    can(role, permission, resource) {\n        this.validateResource(resource);\n        const parentRole = this.getRoleParent(role);\n        const parentCan = parentRole && this.can(this.getRoleParent(role), permission, resource);\n        return parentCan || this.exactCan(role, permission, resource);\n    }\n    getRole(role) {\n        return this.state[role];\n    }\n    validateRole(role) {\n        if (!role) {\n            throw new Error('NbAclService: role name cannot be empty');\n        }\n    }\n    validateResource(resource) {\n        if (!resource || [NbAclService.ANY_RESOURCE].includes(resource)) {\n            throw new Error(`NbAclService: cannot use empty or bulk '*' resource placeholder with 'can' method`);\n        }\n    }\n    exactCan(role, permission, resource) {\n        const resources = this.getRoleResources(role, permission);\n        return resources.includes(resource) || resources.includes(NbAclService.ANY_RESOURCE);\n    }\n    getRoleResources(role, permission) {\n        return this.getRoleAbilities(role)[permission] || [];\n    }\n    getRoleAbilities(role) {\n        const abilities = shallowObjectClone(this.state[role] || {});\n        popParent(shallowObjectClone(this.state[role] || {}));\n        return abilities;\n    }\n    getRoleParent(role) {\n        return this.state[role] ? this.state[role]['parent'] : null;\n    }\n}\nNbAclService.ANY_RESOURCE = '*';\nNbAclService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NbAclService, deps: [{ token: NB_SECURITY_OPTIONS_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nNbAclService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NbAclService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NbAclService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [NB_SECURITY_OPTIONS_TOKEN]\n                    }] }];\n    } });\n\nclass NbRoleProvider {\n}\n\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n/**\n * Access checker service.\n *\n * Injects `NbRoleProvider` to determine current user role, and checks access permissions using `NbAclService`\n */\nclass NbAccessChecker {\n    constructor(roleProvider, acl) {\n        this.roleProvider = roleProvider;\n        this.acl = acl;\n    }\n    /**\n     * Checks whether access is granted or not\n     *\n     * @param {string} permission\n     * @param {string} resource\n     * @returns {Observable<boolean>}\n     */\n    isGranted(permission, resource) {\n        return this.roleProvider.getRole()\n            .pipe(map((role) => Array.isArray(role) ? role : [role]), map((roles) => {\n            return roles.some(role => this.acl.can(role, permission, resource));\n        }));\n    }\n}\nNbAccessChecker.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NbAccessChecker, deps: [{ token: NbRoleProvider }, { token: NbAclService }], target: i0.ɵɵFactoryTarget.Injectable });\nNbAccessChecker.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NbAccessChecker });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NbAccessChecker, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: NbRoleProvider }, { type: NbAclService }]; } });\n\nclass NbIsGrantedDirective {\n    constructor(templateRef, viewContainer, accessChecker) {\n        this.templateRef = templateRef;\n        this.viewContainer = viewContainer;\n        this.accessChecker = accessChecker;\n        this.destroy$ = new Subject();\n        this.hasView = false;\n    }\n    set nbIsGranted([permission, resource]) {\n        this.accessChecker.isGranted(permission, resource)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((can) => {\n            if (can && !this.hasView) {\n                this.viewContainer.createEmbeddedView(this.templateRef);\n                this.hasView = true;\n            }\n            else if (!can && this.hasView) {\n                this.viewContainer.clear();\n                this.hasView = false;\n            }\n        });\n    }\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\nNbIsGrantedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NbIsGrantedDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: NbAccessChecker }], target: i0.ɵɵFactoryTarget.Directive });\nNbIsGrantedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: NbIsGrantedDirective, selector: \"[nbIsGranted]\", inputs: { nbIsGranted: \"nbIsGranted\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NbIsGrantedDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[nbIsGranted]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: NbAccessChecker }]; }, propDecorators: { nbIsGranted: [{\n                type: Input\n            }] } });\n\nclass NbSecurityModule {\n    static forRoot(nbSecurityOptions) {\n        return {\n            ngModule: NbSecurityModule,\n            providers: [\n                { provide: NB_SECURITY_OPTIONS_TOKEN, useValue: nbSecurityOptions },\n                NbAclService,\n                NbAccessChecker,\n            ],\n        };\n    }\n}\nNbSecurityModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NbSecurityModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNbSecurityModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NbSecurityModule, declarations: [NbIsGrantedDirective], imports: [CommonModule], exports: [NbIsGrantedDirective] });\nNbSecurityModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NbSecurityModule, imports: [[\n            CommonModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NbSecurityModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                    ],\n                    declarations: [\n                        NbIsGrantedDirective,\n                    ],\n                    exports: [\n                        NbIsGrantedDirective,\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NB_SECURITY_OPTIONS_TOKEN, NbAccessChecker, NbAclService, NbIsGrantedDirective, NbRoleProvider, NbSecurityModule };\n"]},"metadata":{},"sourceType":"module"}