{"ast":null,"code":"import { Headers } from '@angular/http';\nimport { Http, RequestOptions } from '@angular/http';\nimport { Provider } from './provider';\nimport { AppService } from '../../../app/app.service';\nimport 'rxjs/add/operator/toPromise';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"../../../app/app.service\";\nexport let ProviderService = /*#__PURE__*/(() => {\n  class ProviderService {\n    constructor(http, app_service) {\n      this.http = http;\n      this.app_service = app_service;\n      this.aProvider = [];\n      this.provider_id = null;\n      this.provider = new Provider();\n    }\n\n    get_ProviderList() {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      return this.http.get(this.app_service.apiUrlProviders, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    get_ProviderData(provider_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const url5 = `${this.app_service.apiUrlProviders}/${provider_id}`;\n      return this.http.get(url5, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    add_Provider(provider) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(provider);\n      const addUrl = `${this.app_service.apiUrlProviders}`;\n      return this.http.post(addUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    update_Provider(provider) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const body = JSON.stringify(provider);\n      const updateUrl = `${this.app_service.apiUrlProviders}/${provider.provider_id}`;\n      return this.http.put(updateUrl, body, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    delete_Provider(provider_id) {\n      const headers = new Headers();\n      this.app_service.createAuthorizationHeader(headers);\n      const options = new RequestOptions({\n        headers: headers\n      });\n      const deleteUrl = `${this.app_service.apiUrlProviders}/${provider_id}`;\n      return this.http.delete(deleteUrl, options).toPromise().then(response => response.json()).catch(response => this.app_service.handleError(response));\n    }\n\n    handleError(error) {\n      console.error('An error occurred', error); // for demo purposes only\n\n      return Promise.reject(error.message || error);\n    }\n\n  }\n\n  ProviderService.ɵfac = function ProviderService_Factory(t) {\n    return new (t || ProviderService)(i0.ɵɵinject(i1.Http), i0.ɵɵinject(i2.AppService));\n  };\n\n  ProviderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProviderService,\n    factory: ProviderService.ɵfac\n  });\n  return ProviderService;\n})();","map":null,"metadata":{},"sourceType":"module"}