{"ast":null,"code":"import * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Directive, Optional, Inject, ContentChildren, ContentChild, Input, forwardRef, EventEmitter, Output, ViewChild, Attribute, NgModule } from '@angular/core';\nimport * as i1 from '@angular/material/core';\nimport { mixinDisabled, mixinDisableRipple, setLines, MatLine, MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\nimport { takeUntil, startWith } from 'rxjs/operators';\nimport * as i3 from '@angular/cdk/a11y';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { hasModifierKey, A, ENTER, SPACE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatDividerModule } from '@angular/material/divider';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatList.\n\n/** @docs-private */\n\nconst _c0 = [\"*\"];\nconst _c1 = \".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}button.mat-list-item,button.mat-list-option{padding:0;width:100%;background:none;color:inherit;border:none;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] button.mat-list-item,[dir=rtl] button.mat-list-option{text-align:right}button.mat-list-item::-moz-focus-inner,button.mat-list-option::-moz-focus-inner{border:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px;z-index:1}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-single-selected-option):not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\";\nconst _c2 = [[[\"\", \"mat-list-avatar\", \"\"], [\"\", \"mat-list-icon\", \"\"], [\"\", \"matListAvatar\", \"\"], [\"\", \"matListIcon\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c3 = [\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c4 = [\"text\"];\n\nfunction MatListOption_mat_pseudo_checkbox_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-pseudo-checkbox\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"state\", ctx_r0.selected ? \"checked\" : \"unchecked\")(\"disabled\", ctx_r0.disabled);\n  }\n}\n\nconst _c5 = [\"*\", [[\"\", \"mat-list-avatar\", \"\"], [\"\", \"mat-list-icon\", \"\"], [\"\", \"matListAvatar\", \"\"], [\"\", \"matListIcon\", \"\"]]];\nconst _c6 = [\"*\", \"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\"];\n\nconst _MatListBase = /*#__PURE__*/mixinDisabled( /*#__PURE__*/mixinDisableRipple(class {})); // Boilerplate for applying mixins to MatListItem.\n\n/** @docs-private */\n\n\nconst _MatListItemMixinBase = /*#__PURE__*/mixinDisableRipple(class {});\n/**\n * Injection token that can be used to inject instances of `MatList`. It serves as\n * alternative token to the actual `MatList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\n\n\nconst MAT_LIST = /*#__PURE__*/new InjectionToken('MatList');\n/**\n * Injection token that can be used to inject instances of `MatNavList`. It serves as\n * alternative token to the actual `MatNavList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\n\nconst MAT_NAV_LIST = /*#__PURE__*/new InjectionToken('MatNavList');\nlet MatNavList = /*#__PURE__*/(() => {\n  class MatNavList extends _MatListBase {\n    constructor() {\n      super(...arguments);\n      /** Emits when the state of the list changes. */\n\n      this._stateChanges = new Subject();\n    }\n\n    ngOnChanges() {\n      this._stateChanges.next();\n    }\n\n    ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n\n  }\n\n  MatNavList.ɵfac = /* @__PURE__ */function () {\n    let ɵMatNavList_BaseFactory;\n    return function MatNavList_Factory(t) {\n      return (ɵMatNavList_BaseFactory || (ɵMatNavList_BaseFactory = i0.ɵɵgetInheritedFactory(MatNavList)))(t || MatNavList);\n    };\n  }();\n\n  MatNavList.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatNavList,\n    selectors: [[\"mat-nav-list\"]],\n    hostAttrs: [\"role\", \"navigation\", 1, \"mat-nav-list\", \"mat-list-base\"],\n    inputs: {\n      disableRipple: \"disableRipple\",\n      disabled: \"disabled\"\n    },\n    exportAs: [\"matNavList\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAT_NAV_LIST,\n      useExisting: MatNavList\n    }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatNavList_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}button.mat-list-item,button.mat-list-option{padding:0;width:100%;background:none;color:inherit;border:none;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] button.mat-list-item,[dir=rtl] button.mat-list-option{text-align:right}button.mat-list-item::-moz-focus-inner,button.mat-list-option::-moz-focus-inner{border:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{display:block;top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px;z-index:1}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-single-selected-option):not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatNavList;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MatList = /*#__PURE__*/(() => {\n  class MatList extends _MatListBase {\n    constructor(_elementRef) {\n      super();\n      this._elementRef = _elementRef;\n      /** Emits when the state of the list changes. */\n\n      this._stateChanges = new Subject();\n\n      if (this._getListType() === 'action-list') {\n        _elementRef.nativeElement.classList.add('mat-action-list');\n      }\n    }\n\n    _getListType() {\n      const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n\n      return null;\n    }\n\n    ngOnChanges() {\n      this._stateChanges.next();\n    }\n\n    ngOnDestroy() {\n      this._stateChanges.complete();\n    }\n\n  }\n\n  MatList.ɵfac = function MatList_Factory(t) {\n    return new (t || MatList)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  MatList.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatList,\n    selectors: [[\"mat-list\"], [\"mat-action-list\"]],\n    hostAttrs: [1, \"mat-list\", \"mat-list-base\"],\n    inputs: {\n      disableRipple: \"disableRipple\",\n      disabled: \"disabled\"\n    },\n    exportAs: [\"matList\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAT_LIST,\n      useExisting: MatList\n    }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatList_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    styles: [_c1],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatList;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n\n\nlet MatListAvatarCssMatStyler = /*#__PURE__*/(() => {\n  class MatListAvatarCssMatStyler {}\n\n  MatListAvatarCssMatStyler.ɵfac = function MatListAvatarCssMatStyler_Factory(t) {\n    return new (t || MatListAvatarCssMatStyler)();\n  };\n\n  MatListAvatarCssMatStyler.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatListAvatarCssMatStyler,\n    selectors: [[\"\", \"mat-list-avatar\", \"\"], [\"\", \"matListAvatar\", \"\"]],\n    hostAttrs: [1, \"mat-list-avatar\"]\n  });\n  return MatListAvatarCssMatStyler;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n\n\nlet MatListIconCssMatStyler = /*#__PURE__*/(() => {\n  class MatListIconCssMatStyler {}\n\n  MatListIconCssMatStyler.ɵfac = function MatListIconCssMatStyler_Factory(t) {\n    return new (t || MatListIconCssMatStyler)();\n  };\n\n  MatListIconCssMatStyler.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatListIconCssMatStyler,\n    selectors: [[\"\", \"mat-list-icon\", \"\"], [\"\", \"matListIcon\", \"\"]],\n    hostAttrs: [1, \"mat-list-icon\"]\n  });\n  return MatListIconCssMatStyler;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n\n\nlet MatListSubheaderCssMatStyler = /*#__PURE__*/(() => {\n  class MatListSubheaderCssMatStyler {}\n\n  MatListSubheaderCssMatStyler.ɵfac = function MatListSubheaderCssMatStyler_Factory(t) {\n    return new (t || MatListSubheaderCssMatStyler)();\n  };\n\n  MatListSubheaderCssMatStyler.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatListSubheaderCssMatStyler,\n    selectors: [[\"\", \"mat-subheader\", \"\"], [\"\", \"matSubheader\", \"\"]],\n    hostAttrs: [1, \"mat-subheader\"]\n  });\n  return MatListSubheaderCssMatStyler;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** An item within a Material Design list. */\n\n\nlet MatListItem = /*#__PURE__*/(() => {\n  class MatListItem extends _MatListItemMixinBase {\n    constructor(_element, _changeDetectorRef, navList, list) {\n      super();\n      this._element = _element;\n      this._isInteractiveList = false;\n      this._destroyed = new Subject();\n      this._disabled = false;\n      this._isInteractiveList = !!(navList || list && list._getListType() === 'action-list');\n      this._list = navList || list; // If no type attribute is specified for <button>, set it to \"button\".\n      // If a type attribute is already specified, do nothing.\n\n      const element = this._getHostElement();\n\n      if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n        element.setAttribute('type', 'button');\n      }\n\n      if (this._list) {\n        // React to changes in the state of the parent list since\n        // some of the item's properties depend on it (e.g. `disableRipple`).\n        this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n          _changeDetectorRef.markForCheck();\n        });\n      }\n    }\n    /** Whether the option is disabled. */\n\n\n    get disabled() {\n      return this._disabled || !!(this._list && this._list.disabled);\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n\n    ngAfterContentInit() {\n      setLines(this._lines, this._element);\n    }\n\n    ngOnDestroy() {\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /** Whether this list item should show a ripple effect when clicked. */\n\n\n    _isRippleDisabled() {\n      return !this._isInteractiveList || this.disableRipple || !!(this._list && this._list.disableRipple);\n    }\n    /** Retrieves the DOM element of the component host. */\n\n\n    _getHostElement() {\n      return this._element.nativeElement;\n    }\n\n  }\n\n  MatListItem.ɵfac = function MatListItem_Factory(t) {\n    return new (t || MatListItem)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_NAV_LIST, 8), i0.ɵɵdirectiveInject(MAT_LIST, 8));\n  };\n\n  MatListItem.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatListItem,\n    selectors: [[\"mat-list-item\"], [\"a\", \"mat-list-item\", \"\"], [\"button\", \"mat-list-item\", \"\"]],\n    contentQueries: function MatListItem_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatListAvatarCssMatStyler, 5);\n        i0.ɵɵcontentQuery(dirIndex, MatListIconCssMatStyler, 5);\n        i0.ɵɵcontentQuery(dirIndex, MatLine, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._avatar = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._icon = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._lines = _t);\n      }\n    },\n    hostAttrs: [1, \"mat-list-item\", \"mat-focus-indicator\"],\n    hostVars: 6,\n    hostBindings: function MatListItem_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-list-item-disabled\", ctx.disabled)(\"mat-list-item-avatar\", ctx._avatar || ctx._icon)(\"mat-list-item-with-avatar\", ctx._avatar || ctx._icon);\n      }\n    },\n    inputs: {\n      disableRipple: \"disableRipple\",\n      disabled: \"disabled\"\n    },\n    exportAs: [\"matListItem\"],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c3,\n    decls: 6,\n    vars: 2,\n    consts: [[1, \"mat-list-item-content\"], [\"mat-ripple\", \"\", 1, \"mat-list-item-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"], [1, \"mat-list-text\"]],\n    template: function MatListItem_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c2);\n        i0.ɵɵelementStart(0, \"span\", 0);\n        i0.ɵɵelement(1, \"span\", 1);\n        i0.ɵɵprojection(2);\n        i0.ɵɵelementStart(3, \"span\", 2);\n        i0.ɵɵprojection(4, 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵprojection(5, 2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx._isRippleDisabled());\n      }\n    },\n    directives: [i1.MatRipple],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatListItem;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst _MatSelectionListBase = /*#__PURE__*/mixinDisableRipple(class {});\n\nconst _MatListOptionBase = /*#__PURE__*/mixinDisableRipple(class {});\n/** @docs-private */\n\n\nconst MAT_SELECTION_LIST_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatSelectionList),\n  multi: true\n};\n/** Change event that is being fired whenever the selected state of an option changes. */\n\nclass MatSelectionListChange {\n  constructor(\n  /** Reference to the selection list that emitted the event. */\n  source,\n  /**\n   * Reference to the option that has been changed.\n   * @deprecated Use `options` instead, because some events may change more than one option.\n   * @breaking-change 12.0.0\n   */\n  option,\n  /** Reference to the options that have been changed. */\n  options) {\n    this.source = source;\n    this.option = option;\n    this.options = options;\n  }\n\n}\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n\n\nlet MatListOption = /*#__PURE__*/(() => {\n  class MatListOption extends _MatListOptionBase {\n    constructor(_element, _changeDetector,\n    /** @docs-private */\n    selectionList) {\n      super();\n      this._element = _element;\n      this._changeDetector = _changeDetector;\n      this.selectionList = selectionList;\n      this._selected = false;\n      this._disabled = false;\n      this._hasFocus = false;\n      /**\n       * Emits when the selected state of the option has changed.\n       * Use to facilitate two-data binding to the `selected` property.\n       * @docs-private\n       */\n\n      this.selectedChange = new EventEmitter();\n      /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n\n      this.checkboxPosition = 'after';\n      /**\n       * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n       * in the first cycle.\n       */\n\n      this._inputsInitialized = false;\n    }\n    /** Theme color of the list option. This sets the color of the checkbox. */\n\n\n    get color() {\n      return this._color || this.selectionList.color;\n    }\n\n    set color(newValue) {\n      this._color = newValue;\n    }\n    /** Value of the option */\n\n\n    get value() {\n      return this._value;\n    }\n\n    set value(newValue) {\n      if (this.selected && !this.selectionList.compareWith(newValue, this.value) && this._inputsInitialized) {\n        this.selected = false;\n      }\n\n      this._value = newValue;\n    }\n    /** Whether the option is disabled. */\n\n\n    get disabled() {\n      return this._disabled || this.selectionList && this.selectionList.disabled;\n    }\n\n    set disabled(value) {\n      const newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._disabled) {\n        this._disabled = newValue;\n\n        this._changeDetector.markForCheck();\n      }\n    }\n    /** Whether the option is selected. */\n\n\n    get selected() {\n      return this.selectionList.selectedOptions.isSelected(this);\n    }\n\n    set selected(value) {\n      const isSelected = coerceBooleanProperty(value);\n\n      if (isSelected !== this._selected) {\n        this._setSelected(isSelected);\n\n        if (isSelected || this.selectionList.multiple) {\n          this.selectionList._reportValueChange();\n        }\n      }\n    }\n\n    ngOnInit() {\n      const list = this.selectionList;\n\n      if (list._value && list._value.some(value => list.compareWith(this._value, value))) {\n        this._setSelected(true);\n      }\n\n      const wasSelected = this._selected; // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n\n      Promise.resolve().then(() => {\n        if (this._selected || wasSelected) {\n          this.selected = true;\n\n          this._changeDetector.markForCheck();\n        }\n      });\n      this._inputsInitialized = true;\n    }\n\n    ngAfterContentInit() {\n      setLines(this._lines, this._element);\n    }\n\n    ngOnDestroy() {\n      if (this.selected) {\n        // We have to delay this until the next tick in order\n        // to avoid changed after checked errors.\n        Promise.resolve().then(() => {\n          this.selected = false;\n        });\n      }\n\n      const hadFocus = this._hasFocus;\n\n      const newActiveItem = this.selectionList._removeOptionFromList(this); // Only move focus if this option was focused at the time it was destroyed.\n\n\n      if (hadFocus && newActiveItem) {\n        newActiveItem.focus();\n      }\n    }\n    /** Toggles the selection state of the option. */\n\n\n    toggle() {\n      this.selected = !this.selected;\n    }\n    /** Allows for programmatic focusing of the option. */\n\n\n    focus() {\n      this._element.nativeElement.focus();\n    }\n    /**\n     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n     * @docs-private\n     */\n\n\n    getLabel() {\n      return this._text ? this._text.nativeElement.textContent || '' : '';\n    }\n    /** Whether this list item should show a ripple effect when clicked. */\n\n\n    _isRippleDisabled() {\n      return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n    }\n\n    _handleClick() {\n      if (!this.disabled && (this.selectionList.multiple || !this.selected)) {\n        this.toggle(); // Emit a change event if the selected state of the option changed through user interaction.\n\n        this.selectionList._emitChangeEvent([this]);\n      }\n    }\n\n    _handleFocus() {\n      this.selectionList._setFocusedOption(this);\n\n      this._hasFocus = true;\n    }\n\n    _handleBlur() {\n      this.selectionList._onTouched();\n\n      this._hasFocus = false;\n    }\n    /** Retrieves the DOM element of the component host. */\n\n\n    _getHostElement() {\n      return this._element.nativeElement;\n    }\n    /** Sets the selected state of the option. Returns whether the value has changed. */\n\n\n    _setSelected(selected) {\n      if (selected === this._selected) {\n        return false;\n      }\n\n      this._selected = selected;\n\n      if (selected) {\n        this.selectionList.selectedOptions.select(this);\n      } else {\n        this.selectionList.selectedOptions.deselect(this);\n      }\n\n      this.selectedChange.emit(selected);\n\n      this._changeDetector.markForCheck();\n\n      return true;\n    }\n    /**\n     * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n     * used to trigger an update of the list option if the disabled state of the selection list\n     * changed.\n     */\n\n\n    _markForCheck() {\n      this._changeDetector.markForCheck();\n    }\n\n  }\n\n  MatListOption.ɵfac = function MatListOption_Factory(t) {\n    return new (t || MatListOption)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(forwardRef(() => MatSelectionList)));\n  };\n\n  MatListOption.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatListOption,\n    selectors: [[\"mat-list-option\"]],\n    contentQueries: function MatListOption_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatListAvatarCssMatStyler, 5);\n        i0.ɵɵcontentQuery(dirIndex, MatListIconCssMatStyler, 5);\n        i0.ɵɵcontentQuery(dirIndex, MatLine, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._avatar = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._icon = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._lines = _t);\n      }\n    },\n    viewQuery: function MatListOption_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c4, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._text = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"option\", 1, \"mat-list-item\", \"mat-list-option\", \"mat-focus-indicator\"],\n    hostVars: 15,\n    hostBindings: function MatListOption_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focus\", function MatListOption_focus_HostBindingHandler() {\n          return ctx._handleFocus();\n        })(\"blur\", function MatListOption_blur_HostBindingHandler() {\n          return ctx._handleBlur();\n        })(\"click\", function MatListOption_click_HostBindingHandler() {\n          return ctx._handleClick();\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-selected\", ctx.selected)(\"aria-disabled\", ctx.disabled)(\"tabindex\", -1);\n        i0.ɵɵclassProp(\"mat-list-item-disabled\", ctx.disabled)(\"mat-list-item-with-avatar\", ctx._avatar || ctx._icon)(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color !== \"primary\" && ctx.color !== \"warn\")(\"mat-warn\", ctx.color === \"warn\")(\"mat-list-single-selected-option\", ctx.selected && !ctx.selectionList.multiple);\n      }\n    },\n    inputs: {\n      disableRipple: \"disableRipple\",\n      checkboxPosition: \"checkboxPosition\",\n      color: \"color\",\n      value: \"value\",\n      disabled: \"disabled\",\n      selected: \"selected\"\n    },\n    outputs: {\n      selectedChange: \"selectedChange\"\n    },\n    exportAs: [\"matListOption\"],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c6,\n    decls: 7,\n    vars: 5,\n    consts: [[1, \"mat-list-item-content\"], [\"mat-ripple\", \"\", 1, \"mat-list-item-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"], [3, \"state\", \"disabled\", 4, \"ngIf\"], [1, \"mat-list-text\"], [\"text\", \"\"], [3, \"state\", \"disabled\"]],\n    template: function MatListOption_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c5);\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"div\", 1);\n        i0.ɵɵtemplate(2, MatListOption_mat_pseudo_checkbox_2_Template, 1, 2, \"mat-pseudo-checkbox\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3, 4);\n        i0.ɵɵprojection(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵprojection(6, 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-list-item-content-reverse\", ctx.checkboxPosition == \"after\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"matRippleTrigger\", ctx._getHostElement())(\"matRippleDisabled\", ctx._isRippleDisabled());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectionList.multiple);\n      }\n    },\n    directives: [i1.MatPseudoCheckbox, i1.MatRipple, i2.NgIf],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatListOption;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n\n\nlet MatSelectionList = /*#__PURE__*/(() => {\n  class MatSelectionList extends _MatSelectionListBase {\n    constructor(_element, // @breaking-change 11.0.0 Remove `tabIndex` parameter.\n    tabIndex, _changeDetector, // @breaking-change 11.0.0 `_focusMonitor` parameter to become required.\n    _focusMonitor) {\n      super();\n      this._element = _element;\n      this._changeDetector = _changeDetector;\n      this._focusMonitor = _focusMonitor;\n      this._multiple = true;\n      this._contentInitialized = false;\n      /** Emits a change event whenever the selected state of an option changes. */\n\n      this.selectionChange = new EventEmitter();\n      /**\n       * Tabindex of the selection list.\n       * @breaking-change 11.0.0 Remove `tabIndex` input.\n       */\n\n      this.tabIndex = 0;\n      /** Theme color of the selection list. This sets the checkbox color for all list options. */\n\n      this.color = 'accent';\n      /**\n       * Function used for comparing an option against the selected value when determining which\n       * options should appear as selected. The first argument is the value of an options. The second\n       * one is a value from the selected value. A boolean must be returned.\n       */\n\n      this.compareWith = (a1, a2) => a1 === a2;\n\n      this._disabled = false;\n      /** The currently selected options. */\n\n      this.selectedOptions = new SelectionModel(this._multiple);\n      /** The tabindex of the selection list. */\n\n      this._tabIndex = -1;\n      /** View to model callback that should be called whenever the selected options change. */\n\n      this._onChange = _ => {};\n      /** Emits when the list has been destroyed. */\n\n\n      this._destroyed = new Subject();\n      /** View to model callback that should be called if the list or its options lost focus. */\n\n      this._onTouched = () => {};\n    }\n    /** Whether the selection list is disabled. */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value); // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n      // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n      // changed its state. Since we know that a change to `disabled` property of the list affects\n      // the state of the options, we manually mark each option for check.\n\n      this._markOptionsForCheck();\n    }\n    /** Whether selection is limited to one or multiple items (default multiple). */\n\n\n    get multiple() {\n      return this._multiple;\n    }\n\n    set multiple(value) {\n      const newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._multiple) {\n        if (this._contentInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw new Error('Cannot change `multiple` mode of mat-selection-list after initialization.');\n        }\n\n        this._multiple = newValue;\n        this.selectedOptions = new SelectionModel(this._multiple, this.selectedOptions.selected);\n      }\n    }\n\n    ngAfterContentInit() {\n      var _a;\n\n      this._contentInitialized = true;\n      this._keyManager = new FocusKeyManager(this.options).withWrap().withTypeAhead().withHomeAndEnd() // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false).withAllowedModifierKeys(['shiftKey']);\n\n      if (this._value) {\n        this._setOptionsFromValues(this._value);\n      } // If the user attempts to tab out of the selection list, allow focus to escape.\n\n\n      this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._allowFocusEscape();\n      }); // When the number of options change, update the tabindex of the selection list.\n\n\n      this.options.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n        this._updateTabIndex();\n      }); // Sync external changes to the model back to the options.\n\n      this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe(event => {\n        if (event.added) {\n          for (let item of event.added) {\n            item.selected = true;\n          }\n        }\n\n        if (event.removed) {\n          for (let item of event.removed) {\n            item.selected = false;\n          }\n        }\n      }); // @breaking-change 11.0.0 Remove null assertion once _focusMonitor is required.\n\n      (_a = this._focusMonitor) === null || _a === void 0 ? void 0 : _a.monitor(this._element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n        var _a;\n\n        if (origin === 'keyboard' || origin === 'program') {\n          let toFocus = 0;\n\n          for (let i = 0; i < this.options.length; i++) {\n            if ((_a = this.options.get(i)) === null || _a === void 0 ? void 0 : _a.selected) {\n              toFocus = i;\n              break;\n            }\n          }\n\n          this._keyManager.setActiveItem(toFocus);\n        }\n      });\n    }\n\n    ngOnChanges(changes) {\n      const disableRippleChanges = changes['disableRipple'];\n      const colorChanges = changes['color'];\n\n      if (disableRippleChanges && !disableRippleChanges.firstChange || colorChanges && !colorChanges.firstChange) {\n        this._markOptionsForCheck();\n      }\n    }\n\n    ngOnDestroy() {\n      var _a; // @breaking-change 11.0.0 Remove null assertion once _focusMonitor is required.\n\n\n      (_a = this._focusMonitor) === null || _a === void 0 ? void 0 : _a.stopMonitoring(this._element);\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._isDestroyed = true;\n    }\n    /** Focuses the selection list. */\n\n\n    focus(options) {\n      this._element.nativeElement.focus(options);\n    }\n    /** Selects all of the options. Returns the options that changed as a result. */\n\n\n    selectAll() {\n      return this._setAllOptionsSelected(true);\n    }\n    /** Deselects all of the options. Returns the options that changed as a result. */\n\n\n    deselectAll() {\n      return this._setAllOptionsSelected(false);\n    }\n    /** Sets the focused option of the selection-list. */\n\n\n    _setFocusedOption(option) {\n      this._keyManager.updateActiveItem(option);\n    }\n    /**\n     * Removes an option from the selection list and updates the active item.\n     * @returns Currently-active item.\n     */\n\n\n    _removeOptionFromList(option) {\n      const optionIndex = this._getOptionIndex(option);\n\n      if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n        // Check whether the option is the last item\n        if (optionIndex > 0) {\n          this._keyManager.updateActiveItem(optionIndex - 1);\n        } else if (optionIndex === 0 && this.options.length > 1) {\n          this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n        }\n      }\n\n      return this._keyManager.activeItem;\n    }\n    /** Passes relevant key presses to our key manager. */\n\n\n    _keydown(event) {\n      const keyCode = event.keyCode;\n      const manager = this._keyManager;\n      const previousFocusIndex = manager.activeItemIndex;\n      const hasModifier = hasModifierKey(event);\n\n      switch (keyCode) {\n        case SPACE:\n        case ENTER:\n          if (!hasModifier && !manager.isTyping()) {\n            this._toggleFocusedOption(); // Always prevent space from scrolling the page since the list has focus\n\n\n            event.preventDefault();\n          }\n\n          break;\n\n        default:\n          // The \"A\" key gets special treatment, because it's used for the \"select all\" functionality.\n          if (keyCode === A && this.multiple && hasModifierKey(event, 'ctrlKey') && !manager.isTyping()) {\n            const shouldSelect = this.options.some(option => !option.disabled && !option.selected);\n\n            this._setAllOptionsSelected(shouldSelect, true, true);\n\n            event.preventDefault();\n          } else {\n            manager.onKeydown(event);\n          }\n\n      }\n\n      if (this.multiple && (keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey && manager.activeItemIndex !== previousFocusIndex) {\n        this._toggleFocusedOption();\n      }\n    }\n    /** Reports a value change to the ControlValueAccessor */\n\n\n    _reportValueChange() {\n      // Stop reporting value changes after the list has been destroyed. This avoids\n      // cases where the list might wrongly reset its value once it is removed, but\n      // the form control is still live.\n      if (this.options && !this._isDestroyed) {\n        const value = this._getSelectedOptionValues();\n\n        this._onChange(value);\n\n        this._value = value;\n      }\n    }\n    /** Emits a change event if the selected state of an option changed. */\n\n\n    _emitChangeEvent(options) {\n      this.selectionChange.emit(new MatSelectionListChange(this, options[0], options));\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n\n    writeValue(values) {\n      this._value = values;\n\n      if (this.options) {\n        this._setOptionsFromValues(values || []);\n      }\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n\n    registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /** Sets the selected options based on the specified values. */\n\n\n    _setOptionsFromValues(values) {\n      this.options.forEach(option => option._setSelected(false));\n      values.forEach(value => {\n        const correspondingOption = this.options.find(option => {\n          // Skip options that are already in the model. This allows us to handle cases\n          // where the same primitive value is selected multiple times.\n          return option.selected ? false : this.compareWith(option.value, value);\n        });\n\n        if (correspondingOption) {\n          correspondingOption._setSelected(true);\n        }\n      });\n    }\n    /** Returns the values of the selected options. */\n\n\n    _getSelectedOptionValues() {\n      return this.options.filter(option => option.selected).map(option => option.value);\n    }\n    /** Toggles the state of the currently focused option if enabled. */\n\n\n    _toggleFocusedOption() {\n      let focusedIndex = this._keyManager.activeItemIndex;\n\n      if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n        let focusedOption = this.options.toArray()[focusedIndex];\n\n        if (focusedOption && !focusedOption.disabled && (this._multiple || !focusedOption.selected)) {\n          focusedOption.toggle(); // Emit a change event because the focused option changed its state through user\n          // interaction.\n\n          this._emitChangeEvent([focusedOption]);\n        }\n      }\n    }\n    /**\n     * Sets the selected state on all of the options\n     * and emits an event if anything changed.\n     */\n\n\n    _setAllOptionsSelected(isSelected, skipDisabled, isUserInput) {\n      // Keep track of whether anything changed, because we only want to\n      // emit the changed event when something actually changed.\n      const changedOptions = [];\n      this.options.forEach(option => {\n        if ((!skipDisabled || !option.disabled) && option._setSelected(isSelected)) {\n          changedOptions.push(option);\n        }\n      });\n\n      if (changedOptions.length) {\n        this._reportValueChange();\n\n        if (isUserInput) {\n          this._emitChangeEvent(changedOptions);\n        }\n      }\n\n      return changedOptions;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n\n\n    _isValidIndex(index) {\n      return index >= 0 && index < this.options.length;\n    }\n    /** Returns the index of the specified list option. */\n\n\n    _getOptionIndex(option) {\n      return this.options.toArray().indexOf(option);\n    }\n    /** Marks all the options to be checked in the next change detection run. */\n\n\n    _markOptionsForCheck() {\n      if (this.options) {\n        this.options.forEach(option => option._markForCheck());\n      }\n    }\n    /**\n     * Removes the tabindex from the selection list and resets it back afterwards, allowing the user\n     * to tab out of it. This prevents the list from capturing focus and redirecting it back within\n     * the list, creating a focus trap if it user tries to tab away.\n     */\n\n\n    _allowFocusEscape() {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = 0;\n\n        this._changeDetector.markForCheck();\n      });\n    }\n    /** Updates the tabindex based upon if the selection list is empty. */\n\n\n    _updateTabIndex() {\n      this._tabIndex = this.options.length === 0 ? -1 : 0;\n    }\n\n  }\n\n  MatSelectionList.ɵfac = function MatSelectionList_Factory(t) {\n    return new (t || MatSelectionList)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.FocusMonitor));\n  };\n\n  MatSelectionList.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatSelectionList,\n    selectors: [[\"mat-selection-list\"]],\n    contentQueries: function MatSelectionList_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MatListOption, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"listbox\", 1, \"mat-selection-list\", \"mat-list-base\"],\n    hostVars: 3,\n    hostBindings: function MatSelectionList_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function MatSelectionList_keydown_HostBindingHandler($event) {\n          return ctx._keydown($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-multiselectable\", ctx.multiple)(\"aria-disabled\", ctx.disabled.toString())(\"tabindex\", ctx._tabIndex);\n      }\n    },\n    inputs: {\n      disableRipple: \"disableRipple\",\n      tabIndex: \"tabIndex\",\n      color: \"color\",\n      compareWith: \"compareWith\",\n      disabled: \"disabled\",\n      multiple: \"multiple\"\n    },\n    outputs: {\n      selectionChange: \"selectionChange\"\n    },\n    exportAs: [\"matSelectionList\"],\n    features: [i0.ɵɵProvidersFeature([MAT_SELECTION_LIST_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function MatSelectionList_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    styles: [_c1],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MatSelectionList;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nlet MatListModule = /*#__PURE__*/(() => {\n  class MatListModule {}\n\n  MatListModule.ɵfac = function MatListModule_Factory(t) {\n    return new (t || MatListModule)();\n  };\n\n  MatListModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatListModule\n  });\n  MatListModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule], MatLineModule, MatCommonModule, MatPseudoCheckboxModule, MatDividerModule]\n  });\n  return MatListModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_LIST, MAT_NAV_LIST, MAT_SELECTION_LIST_VALUE_ACCESSOR, MatList, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListItem, MatListModule, MatListOption, MatListSubheaderCssMatStyler, MatNavList, MatSelectionList, MatSelectionListChange }; //# sourceMappingURL=list.mjs.map","map":null,"metadata":{},"sourceType":"module"}