{"ast":null,"code":"import { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { merge } from 'rxjs';\nexport class ContactDataSource extends DataSource {\n  constructor(contactDatabase, _sort, _paginator) {\n    super();\n    this.contactDatabase = contactDatabase;\n    this._sort = _sort;\n    this._paginator = _paginator;\n    this._filterChange = new BehaviorSubject('');\n    this.filteredData = [];\n    this.renderedData = [];\n\n    this._filterChange.subscribe(() => this._paginator.pageIndex = 0);\n  }\n\n  get filter() {\n    return this._filterChange.value;\n  }\n\n  set filter(filter) {\n    this._filterChange.next(filter);\n  }\n\n  connect() {\n    const displayDataChanges = [this.contactDatabase.dataChange, this._paginator.page, this._filterChange, this._sort.sortChange];\n    return merge(...displayDataChanges).map(() => {\n      // Filter data\n      this.filteredData = this.contactDatabase.data.slice().filter(item => {\n        if (item.first_name == null && item.last_name == null && item.email == null && item.phone == null) {\n          return;\n        }\n\n        let searchStr = (item.first_name + item.last_name + item.email + item.phone).toLowerCase();\n        return searchStr.indexOf(this.filter.toLowerCase()) != -1;\n      }); // Sort filtered data\n\n      const sortedData = this.getSortedData(this.filteredData.slice()); // Grab the page's slice of the filtered sorted data.\n\n      const startIndex = this._paginator.pageIndex * this._paginator.pageSize;\n      this.renderedData = sortedData.splice(startIndex, this._paginator.pageSize);\n      return this.renderedData;\n    });\n  }\n\n  disconnect() {}\n\n  getSortedData(data) {\n    if (!this._sort.active || this._sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      let propertyA = '';\n      let propertyB = '';\n\n      switch (this._sort.active) {\n        case 'ID':\n          [propertyA, propertyB] = [a.contact_id, b.contact_id];\n          break;\n\n        case 'firstName':\n          [propertyA, propertyB] = [a.first_name, b.first_name];\n          break;\n\n        case 'lastName':\n          [propertyA, propertyB] = [a.last_name, b.last_name];\n          break;\n\n        case 'Phone':\n          [propertyA, propertyB] = [a.phone, b.phone];\n          break;\n\n        case 'Email':\n          [propertyA, propertyB] = [a.email, b.email];\n          break;\n      }\n\n      const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n      const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n      return (valueA < valueB ? -1 : 1) * (this._sort.direction === 'asc' ? 1 : -1);\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}