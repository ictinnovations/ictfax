{"ast":null,"code":"/**\n * @license ng2-completer\n * MIT license\n */\nimport { EventEmitter, Injectable, Output, Directive, HostListener, Host, ElementRef, NgZone, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef, Renderer2, Component, forwardRef, ViewChild, NgModule } from '@angular/core';\nimport { Subject, Observable, timer } from 'rxjs';\nimport { catchError, map, take } from 'rxjs/operators';\nimport { __decorate, __metadata, __param } from 'tslib';\nimport { HttpClient } from '@angular/common/http';\nimport { NgModel, NG_VALUE_ACCESSOR, FormControl, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/common';\n\nfunction CompleterListItemCmp_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 2);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const part_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", part_r1.isMatch ? ctx_r0.matchClass : null);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(part_r1.text);\n  }\n}\n\nconst _c0 = function (a0, a1) {\n  return {\n    \"completer-title\": a0,\n    \"completer-description\": a1\n  };\n};\n\nconst _c1 = [\"ctrInput\"];\n\nfunction CompleterCmp_div_3_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 10);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r7._textSearching);\n  }\n}\n\nfunction CompleterCmp_div_3_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 11);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r8._textNoResults);\n  }\n}\n\nfunction CompleterCmp_div_3_div_1_div_3_div_2_img_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"img\", 21);\n  }\n\n  if (rf & 2) {\n    const item_r10 = ɵngcc0.ɵɵnextContext(2).$implicit;\n    ɵngcc0.ɵɵpropertyInterpolate(\"src\", item_r10.image, ɵngcc0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction CompleterCmp_div_3_div_1_div_3_div_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 22);\n  }\n}\n\nfunction CompleterCmp_div_3_div_1_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 18);\n    ɵngcc0.ɵɵtemplate(1, CompleterCmp_div_3_div_1_div_3_div_2_img_1_Template, 1, 1, \"img\", 19);\n    ɵngcc0.ɵɵtemplate(2, CompleterCmp_div_3_div_1_div_3_div_2_div_2_Template, 1, 0, \"div\", 20);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r10 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", item_r10.image != \"\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", item_r10.image === \"\");\n  }\n}\n\nfunction CompleterCmp_div_3_div_1_div_3_completer_list_item_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"completer-list-item\", 23);\n  }\n\n  if (rf & 2) {\n    const item_r10 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r13 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"text\", item_r10.description)(\"matchClass\", ctx_r13.matchClass)(\"searchStr\", ctx_r13.searchStr)(\"type\", \"description\");\n  }\n}\n\nconst _c2 = function (a0) {\n  return {\n    \"completer-item-text-image\": a0\n  };\n};\n\nfunction CompleterCmp_div_3_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12)(1, \"div\", 13);\n    ɵngcc0.ɵɵtemplate(2, CompleterCmp_div_3_div_1_div_3_div_2_Template, 3, 2, \"div\", 14);\n    ɵngcc0.ɵɵelementStart(3, \"div\", 15);\n    ɵngcc0.ɵɵelement(4, \"completer-list-item\", 16);\n    ɵngcc0.ɵɵtemplate(5, CompleterCmp_div_3_div_1_div_3_completer_list_item_5_Template, 1, 4, \"completer-list-item\", 17);\n    ɵngcc0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const item_r10 = ctx.$implicit;\n    const rowIndex_r11 = ctx.index;\n    const ctx_r9 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ctrRow\", rowIndex_r11)(\"dataItem\", item_r10);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", item_r10.image || item_r10.image === \"\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(9, _c2, item_r10.image || item_r10.image === \"\"));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"text\", item_r10.title)(\"matchClass\", ctx_r9.matchClass)(\"searchStr\", ctx_r9.searchStr)(\"type\", \"title\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", item_r10.description && item_r10.description != \"\");\n  }\n}\n\nfunction CompleterCmp_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 6);\n    ɵngcc0.ɵɵtemplate(1, CompleterCmp_div_3_div_1_div_1_Template, 2, 1, \"div\", 7);\n    ɵngcc0.ɵɵtemplate(2, CompleterCmp_div_3_div_1_div_2_Template, 2, 1, \"div\", 8);\n    ɵngcc0.ɵɵtemplate(3, CompleterCmp_div_3_div_1_div_3_Template, 6, 11, \"div\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r19 = ɵngcc0.ɵɵnextContext();\n    const searchActive_r3 = ctx_r19.searching;\n    const items_r2 = ctx_r19.results;\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", searchActive_r3 && ctx_r6.displaySearching);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !searchActive_r3 && (!items_r2 || (items_r2 == null ? null : items_r2.length) === 0));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", items_r2);\n  }\n}\n\nfunction CompleterCmp_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 4);\n    ɵngcc0.ɵɵtemplate(1, CompleterCmp_div_3_div_1_Template, 4, 3, \"div\", 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const items_r2 = ctx.results;\n    const searchActive_r3 = ctx.searching;\n    const isInitialized_r4 = ctx.searchInitialized;\n    const isOpen_r5 = ctx.isOpen;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", isInitialized_r4 && isOpen_r5 && ((items_r2 == null ? null : items_r2.length) > 0 || ctx_r1.displayNoResults && !searchActive_r3 || searchActive_r3 && ctx_r1.displaySearching));\n  }\n}\n\nconst MAX_CHARS = 524288; // the default max length per the html maxlength attribute\n\nconst MIN_SEARCH_LENGTH = 3;\nconst PAUSE = 10;\nconst TEXT_SEARCHING = \"Searching...\";\nconst TEXT_NO_RESULTS = \"No results found\";\nconst CLEAR_TIMEOUT = 50;\n\nfunction isNil(value) {\n  return typeof value === \"undefined\" || value === null;\n}\n\nclass CompleterBaseData extends Subject {\n  constructor() {\n    super();\n    this._searchFields = null;\n    this._titleField = null;\n    this._descriptionField = undefined;\n    this._imageField = undefined;\n  }\n\n  cancel() {\n    return;\n  }\n\n  searchFields(searchFields) {\n    this._searchFields = searchFields;\n    return this;\n  }\n\n  titleField(titleField) {\n    this._titleField = titleField;\n    return this;\n  }\n\n  descriptionField(descriptionField) {\n    this._descriptionField = descriptionField;\n    return this;\n  }\n\n  imageField(imageField) {\n    this._imageField = imageField;\n    return this;\n  }\n\n  convertToItem(data) {\n    let image = null;\n    let formattedText;\n    let formattedDesc = null;\n\n    if (this._titleField) {\n      formattedText = this.extractTitle(data);\n    } else {\n      formattedText = data;\n    }\n\n    if (typeof formattedText !== \"string\") {\n      formattedText = JSON.stringify(formattedText);\n    }\n\n    if (this._descriptionField) {\n      formattedDesc = this.extractValue(data, this._descriptionField);\n    }\n\n    if (this._imageField) {\n      image = this.extractValue(data, this._imageField);\n    }\n\n    if (isNil(formattedText)) {\n      return null;\n    }\n\n    return {\n      description: formattedDesc,\n      image,\n      originalObject: data,\n      title: formattedText\n    };\n  }\n\n  extractMatches(data, term) {\n    let matches = [];\n    const searchFields = this._searchFields ? this._searchFields.split(\",\") : null;\n\n    if (this._searchFields !== null && this._searchFields !== undefined && term !== \"\") {\n      matches = data.filter(item => {\n        const values = searchFields ? this.extractBySearchFields(searchFields, item) : [item];\n        return values.some(value => value.toString().toLowerCase().indexOf(term.toString().toLowerCase()) >= 0);\n      });\n    } else {\n      matches = data;\n    }\n\n    return matches;\n  }\n\n  extractTitle(item) {\n    // split title fields and run extractValue for each and join with ' '\n    if (!this._titleField) {\n      return \"\";\n    }\n\n    return this._titleField.split(\",\").map(field => {\n      return this.extractValue(item, field);\n    }).reduce((acc, titlePart) => acc ? `${acc} ${titlePart}` : titlePart);\n  }\n\n  extractValue(obj, key) {\n    let keys;\n    let result;\n\n    if (key) {\n      keys = key.split(\".\");\n      result = obj;\n\n      for (key of keys) {\n        if (result) {\n          result = result[key];\n        }\n      }\n    } else {\n      result = obj;\n    }\n\n    return result;\n  }\n\n  processResults(matches) {\n    let i;\n    const results = [];\n\n    if (matches && matches.length > 0) {\n      for (i = 0; i < matches.length; i++) {\n        const item = this.convertToItem(matches[i]);\n\n        if (item) {\n          results.push(item);\n        }\n      }\n    }\n\n    return results;\n  }\n\n  extractBySearchFields(searchFields, item) {\n    return searchFields.map(searchField => this.extractValue(item, searchField)).filter(value => !!value);\n  }\n\n}\n\nclass LocalData extends CompleterBaseData {\n  constructor() {\n    super();\n    this.dataSourceChange = new EventEmitter();\n    this._data = [];\n    this.savedTerm = null;\n  }\n\n  data(data) {\n    if (data instanceof Observable) {\n      const data$ = data;\n      data$.pipe(catchError(() => [])).subscribe(res => {\n        this._data = res;\n\n        if (this.savedTerm) {\n          this.search(this.savedTerm);\n        }\n\n        this.dataSourceChange.emit();\n      });\n    } else {\n      this._data = data;\n    }\n\n    this.dataSourceChange.emit();\n    return this;\n  }\n\n  search(term) {\n    if (!this._data) {\n      this.savedTerm = term;\n    } else {\n      this.savedTerm = null;\n      const matches = this.extractMatches(this._data, term);\n      this.next(this.processResults(matches));\n    }\n  }\n\n  convertToItem(data) {\n    return super.convertToItem(data);\n  }\n\n}\n\nclass RemoteData extends CompleterBaseData {\n  constructor(http) {\n    super();\n    this.http = http;\n    this.dataSourceChange = new EventEmitter();\n    this._remoteUrl = null;\n    this.remoteSearch = null;\n    this._urlFormater = null;\n    this._dataField = null;\n  }\n\n  remoteUrl(remoteUrl) {\n    this._remoteUrl = remoteUrl;\n    this.dataSourceChange.emit();\n    return this;\n  }\n\n  urlFormater(urlFormater) {\n    this._urlFormater = urlFormater;\n  }\n\n  dataField(dataField) {\n    this._dataField = dataField;\n  }\n\n  requestOptions(requestOptions) {\n    this._requestOptions = requestOptions;\n  }\n\n  search(term) {\n    this.cancel(); // let params = {};\n\n    let url = \"\";\n\n    if (this._urlFormater) {\n      url = this._urlFormater(term);\n    } else {\n      url = this._remoteUrl + encodeURIComponent(term);\n    }\n\n    this.remoteSearch = this.http.get(url, Object.assign({}, this._requestOptions)).pipe(map(data => {\n      const matches = this.extractValue(data, this._dataField);\n      return this.extractMatches(matches, term);\n    }), catchError(() => [])).subscribe(matches => {\n      const results = this.processResults(matches);\n      this.next(results);\n    });\n  }\n\n  cancel() {\n    if (this.remoteSearch) {\n      this.remoteSearch.unsubscribe();\n    }\n  }\n\n  convertToItem(data) {\n    return super.convertToItem(data);\n  }\n\n}\n\nlet LocalDataFactory = class LocalDataFactory {\n  create() {\n    return new LocalData();\n  }\n\n};\n\nLocalDataFactory.ɵfac = function LocalDataFactory_Factory(t) {\n  return new (t || LocalDataFactory)();\n};\n\nLocalDataFactory.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: LocalDataFactory,\n  factory: function (t) {\n    return LocalDataFactory.ɵfac(t);\n  }\n});\nlet RemoteDataFactory = class RemoteDataFactory {\n  constructor(http) {\n    this.http = http;\n  }\n\n  create() {\n    return new RemoteData(this.http);\n  }\n\n};\n\nRemoteDataFactory.ɵfac = function RemoteDataFactory_Factory(t) {\n  return new (t || RemoteDataFactory)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient));\n};\n\nRemoteDataFactory.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: RemoteDataFactory,\n  factory: function (t) {\n    return RemoteDataFactory.ɵfac(t);\n  }\n});\nRemoteDataFactory = __decorate([__metadata(\"design:paramtypes\", [HttpClient])], RemoteDataFactory);\nlet CompleterService = class CompleterService {\n  constructor(localDataFactory, // Using any instead of () => LocalData because of AoT errors\n  remoteDataFactory // Using any instead of () => LocalData because of AoT errors\n  ) {\n    this.localDataFactory = localDataFactory;\n    this.remoteDataFactory = remoteDataFactory;\n  }\n\n  local(data, searchFields = \"\", titleField = \"\") {\n    const localData = this.localDataFactory.create();\n    return localData.data(data).searchFields(searchFields).titleField(titleField);\n  }\n\n  remote(url, searchFields = \"\", titleField = \"\") {\n    const remoteData = this.remoteDataFactory.create();\n    return remoteData.remoteUrl(url).searchFields(searchFields).titleField(titleField);\n  }\n\n};\n\nCompleterService.ɵfac = function CompleterService_Factory(t) {\n  return new (t || CompleterService)(ɵngcc0.ɵɵinject(LocalDataFactory), ɵngcc0.ɵɵinject(RemoteDataFactory // Using any instead of () => LocalData because of AoT errors\n  ));\n};\n\nCompleterService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: CompleterService,\n  factory: function (t) {\n    return CompleterService.ɵfac(t);\n  }\n});\nCompleterService = __decorate([__metadata(\"design:paramtypes\", [LocalDataFactory, RemoteDataFactory // Using any instead of () => LocalData because of AoT errors\n])], CompleterService);\nlet CtrCompleter = class CtrCompleter {\n  constructor() {\n    this.selected = new EventEmitter();\n    this.highlighted = new EventEmitter();\n    this.opened = new EventEmitter();\n    this.dataSourceChange = new EventEmitter();\n    this.list = null;\n    this.dropdown = null;\n    this._hasHighlighted = false;\n    this._hasSelected = false;\n    this._cancelBlur = false;\n    this._isOpen = false;\n    this._autoHighlightIndex = null;\n  }\n\n  registerList(list) {\n    this.list = list;\n  }\n\n  registerDropdown(dropdown) {\n    this.dropdown = dropdown;\n  }\n\n  onHighlighted(item) {\n    this.highlighted.emit(item);\n    this._hasHighlighted = !!item;\n  }\n\n  onSelected(item, clearList = true) {\n    this.selected.emit(item);\n\n    if (item) {\n      this._hasSelected = true;\n    }\n\n    if (clearList) {\n      this.clear();\n    }\n  }\n\n  onDataSourceChange() {\n    if (this.hasSelected) {\n      this.selected.emit(null);\n      this._hasSelected = false;\n    }\n\n    this.dataSourceChange.emit();\n  }\n\n  search(term) {\n    if (this._hasSelected) {\n      this.selected.emit(null);\n      this._hasSelected = false;\n    }\n\n    if (this.list) {\n      this.list.search(term);\n    }\n  }\n\n  clear() {\n    this._hasHighlighted = false;\n    this.isOpen = false;\n\n    if (this.dropdown) {\n      this.dropdown.clear();\n    }\n\n    if (this.list) {\n      this.list.clear();\n    }\n  }\n\n  selectCurrent() {\n    if (this.dropdown) {\n      this.dropdown.selectCurrent();\n    }\n  }\n\n  nextRow() {\n    if (this.dropdown) {\n      this.dropdown.nextRow();\n    }\n  }\n\n  prevRow() {\n    if (this.dropdown) {\n      this.dropdown.prevRow();\n    }\n  }\n\n  hasHighlighted() {\n    return this._hasHighlighted;\n  }\n\n  cancelBlur(cancel) {\n    this._cancelBlur = cancel;\n  }\n\n  isCancelBlur() {\n    return this._cancelBlur;\n  }\n\n  open() {\n    if (!this._isOpen && !!this.list) {\n      this.isOpen = true;\n      this.list.open();\n    }\n  }\n\n  get isOpen() {\n    return this._isOpen;\n  }\n\n  set isOpen(open) {\n    this._isOpen = open;\n    this.opened.emit(this._isOpen);\n\n    if (this.list) {\n      this.list.isOpen(open);\n    }\n  }\n\n  get autoHighlightIndex() {\n    return this._autoHighlightIndex;\n  }\n\n  set autoHighlightIndex(index) {\n    this._autoHighlightIndex = index;\n\n    if (this.dropdown) {\n      this.dropdown.highlightRow(this._autoHighlightIndex);\n    }\n  }\n\n  get hasSelected() {\n    return this._hasSelected;\n  }\n\n};\n\nCtrCompleter.ɵfac = function CtrCompleter_Factory(t) {\n  return new (t || CtrCompleter)();\n};\n\nCtrCompleter.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CtrCompleter,\n  selectors: [[\"\", \"ctrCompleter\", \"\"]],\n  outputs: {\n    selected: \"selected\",\n    highlighted: \"highlighted\",\n    opened: \"opened\",\n    dataSourceChange: \"dataSourceChange\"\n  }\n});\n\n__decorate([Output(), __metadata(\"design:type\", Object)], CtrCompleter.prototype, \"selected\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], CtrCompleter.prototype, \"highlighted\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], CtrCompleter.prototype, \"opened\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], CtrCompleter.prototype, \"dataSourceChange\", void 0);\n\nclass CtrRowItem {\n  constructor(row, index) {\n    this.row = row;\n    this.index = index;\n  }\n\n}\n\nlet CtrDropdown = class CtrDropdown {\n  constructor(completer, el, zone) {\n    this.completer = completer;\n    this.el = el;\n    this.zone = zone;\n    this.rows = [];\n    this.isScrollOn = false;\n    this._rowMouseDown = false;\n    this.completer.registerDropdown(this);\n  }\n\n  ngOnDestroy() {\n    this.completer.registerDropdown(null);\n  }\n\n  ngAfterViewInit() {\n    const css = getComputedStyle(this.el.nativeElement);\n    const autoHighlightIndex = this.completer.autoHighlightIndex;\n    this.isScrollOn = !!css.maxHeight && css.overflowY === \"auto\";\n\n    if (autoHighlightIndex) {\n      this.zone.run(() => {\n        this.highlightRow(autoHighlightIndex);\n      });\n    }\n  }\n\n  onMouseDown(event) {\n    // Support for canceling blur on IE (issue #158)\n    if (!this._rowMouseDown) {\n      this.completer.cancelBlur(true);\n      this.zone.run(() => {\n        this.completer.cancelBlur(false);\n      });\n    } else {\n      this._rowMouseDown = false;\n    }\n  }\n\n  registerRow(row) {\n    const arrIndex = this.rows.findIndex(_row => _row.index === row.index);\n\n    if (arrIndex >= 0) {\n      this.rows[arrIndex] = row;\n    } else {\n      this.rows.push(row);\n    }\n  }\n\n  unregisterRow(rowIndex) {\n    const arrIndex = this.rows.findIndex(_row => _row.index === rowIndex);\n    this.rows.splice(arrIndex, 1);\n\n    if (this.currHighlighted && rowIndex === this.currHighlighted.index) {\n      this.highlightRow(null);\n    }\n  }\n\n  highlightRow(index) {\n    const highlighted = this.rows.find(row => row.index === index);\n\n    if (isNil(index) || index < 0) {\n      if (this.currHighlighted) {\n        this.currHighlighted.row.setHighlighted(false);\n      }\n\n      this.currHighlighted = undefined;\n      this.completer.onHighlighted(null);\n      return;\n    }\n\n    if (!highlighted) {\n      return;\n    }\n\n    if (this.currHighlighted) {\n      this.currHighlighted.row.setHighlighted(false);\n    }\n\n    this.currHighlighted = highlighted;\n    this.currHighlighted.row.setHighlighted(true);\n    this.completer.onHighlighted(this.currHighlighted.row.getDataItem());\n\n    if (this.isScrollOn && this.currHighlighted) {\n      const rowTop = this.dropdownRowTop();\n\n      if (!rowTop) {\n        return;\n      }\n\n      if (rowTop < 0) {\n        this.dropdownScrollTopTo(rowTop - 1);\n      } else {\n        const row = this.currHighlighted.row.getNativeElement();\n\n        if (this.dropdownHeight() < row.getBoundingClientRect().bottom) {\n          this.dropdownScrollTopTo(this.dropdownRowOffsetHeight(row));\n\n          if (this.el.nativeElement.getBoundingClientRect().bottom - this.dropdownRowOffsetHeight(row) < row.getBoundingClientRect().top) {\n            this.dropdownScrollTopTo(row.getBoundingClientRect().top - (this.el.nativeElement.getBoundingClientRect().top + parseInt(getComputedStyle(this.el.nativeElement).paddingTop, 10)));\n          }\n        }\n      }\n    }\n  }\n\n  clear() {\n    this.rows = [];\n  }\n\n  onSelected(item) {\n    this.completer.onSelected(item);\n  }\n\n  rowMouseDown() {\n    this._rowMouseDown = true;\n  }\n\n  selectCurrent() {\n    if (!!this.currHighlighted && !!this.currHighlighted.row) {\n      this.onSelected(this.currHighlighted.row.getDataItem());\n    } else if (this.rows.length > 0) {\n      this.onSelected(this.rows[0].row.getDataItem());\n    }\n  }\n\n  nextRow() {\n    let nextRowIndex = 0;\n\n    if (this.currHighlighted) {\n      nextRowIndex = this.currHighlighted.index + 1;\n    }\n\n    this.highlightRow(nextRowIndex);\n  }\n\n  prevRow() {\n    let nextRowIndex = -1;\n\n    if (this.currHighlighted) {\n      nextRowIndex = this.currHighlighted.index - 1;\n    }\n\n    this.highlightRow(nextRowIndex);\n  }\n\n  dropdownScrollTopTo(offset) {\n    this.el.nativeElement.scrollTop = this.el.nativeElement.scrollTop + offset;\n  }\n\n  dropdownRowTop() {\n    if (!this.currHighlighted) {\n      return;\n    }\n\n    return this.currHighlighted.row.getNativeElement().getBoundingClientRect().top - (this.el.nativeElement.getBoundingClientRect().top + parseInt(getComputedStyle(this.el.nativeElement).paddingTop, 10));\n  }\n\n  dropdownHeight() {\n    return this.el.nativeElement.getBoundingClientRect().top + parseInt(getComputedStyle(this.el.nativeElement).maxHeight, 10);\n  }\n\n  dropdownRowOffsetHeight(row) {\n    const css = getComputedStyle(row.parentElement);\n    return row.parentElement.offsetHeight + parseInt(css.marginTop, 10) + parseInt(css.marginBottom, 10);\n  }\n\n};\n\nCtrDropdown.ɵfac = function CtrDropdown_Factory(t) {\n  return new (t || CtrDropdown)(ɵngcc0.ɵɵdirectiveInject(CtrCompleter, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCtrDropdown.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CtrDropdown,\n  selectors: [[\"\", \"ctrDropdown\", \"\"]],\n  hostBindings: function CtrDropdown_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"mousedown\", function CtrDropdown_mousedown_HostBindingHandler($event) {\n        return ctx.onMouseDown($event);\n      });\n    }\n  }\n});\n\n__decorate([HostListener(\"mousedown\", [\"$event\"]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CtrDropdown.prototype, \"onMouseDown\", null);\n\nCtrDropdown = __decorate([__param(0, Host()), __metadata(\"design:paramtypes\", [CtrCompleter, ElementRef, NgZone])], CtrDropdown); // keyboard events\n\nconst KEY_DW = 40;\nconst KEY_RT = 39;\nconst KEY_UP = 38;\nconst KEY_LF = 37;\nconst KEY_ES = 27;\nconst KEY_EN = 13;\nconst KEY_TAB = 9;\nconst KEY_BK = 8;\nconst KEY_SH = 16;\nconst KEY_CL = 20;\nconst KEY_F1 = 112;\nconst KEY_F12 = 123;\nlet CtrInput = class CtrInput {\n  constructor(completer, ngModel, el) {\n    this.completer = completer;\n    this.ngModel = ngModel;\n    this.el = el;\n    this.clearSelected = false;\n    this.clearUnselected = false;\n    this.overrideSuggested = false;\n    this.fillHighlighted = true;\n    this.openOnFocus = false;\n    this.openOnClick = false;\n    this.selectOnClick = false;\n    this.selectOnFocus = false;\n    this.ngModelChange = new EventEmitter();\n    this._searchStr = \"\";\n    this._displayStr = \"\";\n    this.blurTimer = null;\n    this.completer.selected.subscribe(item => {\n      if (!item) {\n        return;\n      }\n\n      if (this.clearSelected) {\n        this.searchStr = \"\";\n      } else {\n        this.searchStr = item.title;\n      }\n\n      this.ngModelChange.emit(this.searchStr);\n    });\n    this.completer.highlighted.subscribe(item => {\n      if (this.fillHighlighted) {\n        if (item) {\n          this._displayStr = item.title;\n          this.ngModelChange.emit(item.title);\n        } else {\n          this._displayStr = this.searchStr;\n          this.ngModelChange.emit(this.searchStr);\n        }\n      }\n    });\n    this.completer.dataSourceChange.subscribe(() => {\n      this.completer.search(this.searchStr);\n    });\n\n    if (this.ngModel.valueChanges) {\n      this.ngModel.valueChanges.subscribe(value => {\n        if (!isNil(value) && this._displayStr !== value) {\n          if (this.searchStr !== value) {\n            this.completer.search(value);\n          }\n\n          this.searchStr = value;\n        }\n      });\n    }\n  }\n\n  keyupHandler(event) {\n    if (event.keyCode === KEY_LF || event.keyCode === KEY_RT || event.keyCode === KEY_TAB) {\n      // do nothing\n      return;\n    }\n\n    if (event.keyCode === KEY_UP || event.keyCode === KEY_EN) {\n      event.preventDefault();\n    } else if (event.keyCode === KEY_DW) {\n      event.preventDefault();\n      this.completer.search(this.searchStr);\n    } else if (event.keyCode === KEY_ES) {\n      if (this.completer.isOpen) {\n        this.restoreSearchValue();\n        this.completer.clear();\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    }\n  }\n\n  pasteHandler(event) {\n    this.completer.open();\n  }\n\n  keydownHandler(event) {\n    const keyCode = event.keyCode || event.which;\n\n    if (keyCode === KEY_EN) {\n      if (this.completer.hasHighlighted()) {\n        event.preventDefault();\n      }\n\n      this.handleSelection();\n    } else if (keyCode === KEY_DW) {\n      event.preventDefault();\n      this.completer.open();\n      this.completer.nextRow();\n    } else if (keyCode === KEY_UP) {\n      event.preventDefault();\n      this.completer.prevRow();\n    } else if (keyCode === KEY_TAB) {\n      this.handleSelection();\n    } else if (keyCode === KEY_BK) {\n      this.completer.open();\n    } else if (keyCode === KEY_ES) {\n      // This is very specific to IE10/11 #272\n      // without this, IE clears the input text\n      event.preventDefault();\n\n      if (this.completer.isOpen) {\n        event.stopPropagation();\n      }\n    } else {\n      if (keyCode !== 0 && keyCode !== KEY_SH && keyCode !== KEY_CL && (keyCode <= KEY_F1 || keyCode >= KEY_F12) && !event.ctrlKey && !event.metaKey && !event.altKey) {\n        this.completer.open();\n      }\n    }\n  }\n\n  onBlur(event) {\n    // Check if we need to cancel Blur for IE\n    if (this.completer.isCancelBlur()) {\n      setTimeout(() => {\n        // get the focus back\n        this.el.nativeElement.focus();\n      }, 0);\n      return;\n    }\n\n    if (this.completer.isOpen) {\n      this.blurTimer = timer(200).pipe(take(1)).subscribe(() => this.doBlur());\n    }\n  }\n\n  onfocus() {\n    if (this.blurTimer) {\n      this.blurTimer.unsubscribe();\n      this.blurTimer = null;\n    }\n\n    if (this.selectOnFocus) {\n      this.el.nativeElement.select();\n    }\n\n    if (this.openOnFocus) {\n      this.completer.open();\n    }\n  }\n\n  onClick(event) {\n    if (this.selectOnClick) {\n      this.el.nativeElement.select();\n    }\n\n    if (this.openOnClick) {\n      if (this.completer.isOpen) {\n        this.completer.clear();\n      } else {\n        this.completer.open();\n      }\n    }\n  }\n\n  get searchStr() {\n    return this._searchStr;\n  }\n\n  set searchStr(term) {\n    this._searchStr = term;\n    this._displayStr = term;\n  }\n\n  handleSelection() {\n    if (this.completer.hasHighlighted()) {\n      this._searchStr = \"\";\n      this.completer.selectCurrent();\n    } else if (this.overrideSuggested) {\n      this.completer.onSelected({\n        title: this.searchStr,\n        originalObject: null\n      });\n    } else {\n      if (this.clearUnselected && !this.completer.hasSelected) {\n        this.searchStr = \"\";\n        this.ngModelChange.emit(this.searchStr);\n      }\n\n      this.completer.clear();\n    }\n  }\n\n  restoreSearchValue() {\n    if (this.fillHighlighted) {\n      if (this._displayStr !== this.searchStr) {\n        this._displayStr = this.searchStr;\n        this.ngModelChange.emit(this.searchStr);\n      }\n    }\n  }\n\n  doBlur() {\n    if (this.blurTimer) {\n      this.blurTimer.unsubscribe();\n      this.blurTimer = null;\n    }\n\n    if (this.overrideSuggested) {\n      this.completer.onSelected({\n        title: this.searchStr,\n        originalObject: null\n      });\n    } else {\n      if (this.clearUnselected && !this.completer.hasSelected) {\n        this.searchStr = \"\";\n        this.ngModelChange.emit(this.searchStr);\n      } else {\n        this.restoreSearchValue();\n      }\n    }\n\n    this.completer.clear();\n  }\n\n};\n\nCtrInput.ɵfac = function CtrInput_Factory(t) {\n  return new (t || CtrInput)(ɵngcc0.ɵɵdirectiveInject(CtrCompleter, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgModel), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n};\n\nCtrInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CtrInput,\n  selectors: [[\"\", \"ctrInput\", \"\"]],\n  hostBindings: function CtrInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keyup\", function CtrInput_keyup_HostBindingHandler($event) {\n        return ctx.keyupHandler($event);\n      })(\"paste\", function CtrInput_paste_HostBindingHandler($event) {\n        return ctx.pasteHandler($event);\n      })(\"keydown\", function CtrInput_keydown_HostBindingHandler($event) {\n        return ctx.keydownHandler($event);\n      })(\"blur\", function CtrInput_blur_HostBindingHandler($event) {\n        return ctx.onBlur($event);\n      })(\"focus\", function CtrInput_focus_HostBindingHandler() {\n        return ctx.onfocus();\n      })(\"click\", function CtrInput_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n  },\n  inputs: {\n    clearSelected: \"clearSelected\",\n    clearUnselected: \"clearUnselected\",\n    overrideSuggested: \"overrideSuggested\",\n    fillHighlighted: \"fillHighlighted\",\n    openOnFocus: \"openOnFocus\",\n    openOnClick: \"openOnClick\",\n    selectOnClick: \"selectOnClick\",\n    selectOnFocus: \"selectOnFocus\"\n  },\n  outputs: {\n    ngModelChange: \"ngModelChange\"\n  }\n});\n\n__decorate([Input(\"clearSelected\"), __metadata(\"design:type\", Object)], CtrInput.prototype, \"clearSelected\", void 0);\n\n__decorate([Input(\"clearUnselected\"), __metadata(\"design:type\", Object)], CtrInput.prototype, \"clearUnselected\", void 0);\n\n__decorate([Input(\"overrideSuggested\"), __metadata(\"design:type\", Object)], CtrInput.prototype, \"overrideSuggested\", void 0);\n\n__decorate([Input(\"fillHighlighted\"), __metadata(\"design:type\", Object)], CtrInput.prototype, \"fillHighlighted\", void 0);\n\n__decorate([Input(\"openOnFocus\"), __metadata(\"design:type\", Object)], CtrInput.prototype, \"openOnFocus\", void 0);\n\n__decorate([Input(\"openOnClick\"), __metadata(\"design:type\", Object)], CtrInput.prototype, \"openOnClick\", void 0);\n\n__decorate([Input(\"selectOnClick\"), __metadata(\"design:type\", Object)], CtrInput.prototype, \"selectOnClick\", void 0);\n\n__decorate([Input(\"selectOnFocus\"), __metadata(\"design:type\", Object)], CtrInput.prototype, \"selectOnFocus\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], CtrInput.prototype, \"ngModelChange\", void 0);\n\n__decorate([HostListener(\"keyup\", [\"$event\"]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CtrInput.prototype, \"keyupHandler\", null);\n\n__decorate([HostListener(\"paste\", [\"$event\"]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CtrInput.prototype, \"pasteHandler\", null);\n\n__decorate([HostListener(\"keydown\", [\"$event\"]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CtrInput.prototype, \"keydownHandler\", null);\n\n__decorate([HostListener(\"blur\", [\"$event\"]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CtrInput.prototype, \"onBlur\", null);\n\n__decorate([HostListener(\"focus\", []), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], CtrInput.prototype, \"onfocus\", null);\n\n__decorate([HostListener(\"click\", [\"$event\"]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CtrInput.prototype, \"onClick\", null);\n\nCtrInput = __decorate([__param(0, Host()), __metadata(\"design:paramtypes\", [CtrCompleter, NgModel, ElementRef])], CtrInput);\n\nclass CtrListContext {\n  constructor(results, searching, searchInitialized, isOpen) {\n    this.results = results;\n    this.searching = searching;\n    this.searchInitialized = searchInitialized;\n    this.isOpen = isOpen;\n  }\n\n}\n\nlet CtrList = class CtrList {\n  constructor(completer, templateRef, viewContainer, cd, zone) {\n    this.completer = completer;\n    this.templateRef = templateRef;\n    this.viewContainer = viewContainer;\n    this.cd = cd;\n    this.zone = zone;\n    this.ctrListMinSearchLength = MIN_SEARCH_LENGTH;\n    this.ctrListPause = PAUSE;\n    this.ctrListAutoMatch = false;\n    this.ctrListAutoHighlight = false;\n    this.ctrListDisplaySearching = true;\n    this._dataService = null; // private results: CompleterItem[] = [];\n\n    this.term = null; // private searching = false;\n\n    this.searchTimer = null;\n    this.clearTimer = null;\n    this.ctx = new CtrListContext([], false, false, false);\n    this._initialValue = null;\n    this.viewRef = null;\n  }\n\n  ngOnInit() {\n    this.completer.registerList(this);\n    this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef, new CtrListContext([], false, false, false));\n  }\n\n  set dataService(newService) {\n    this._dataService = newService;\n    this.dataServiceSubscribe();\n  }\n\n  set initialValue(value) {\n    if (this._dataService && typeof this._dataService.convertToItem === \"function\") {\n      this.zone.run(() => {\n        const initialItem = this._dataService && this._dataService.convertToItem(value);\n\n        if (initialItem) {\n          this.completer.onSelected(initialItem, false);\n        }\n      });\n    } else if (!this._dataService) {\n      this._initialValue = value;\n    }\n  }\n\n  search(term) {\n    if (!isNil(term) && term.length >= this.ctrListMinSearchLength && this.term !== term) {\n      if (this.searchTimer) {\n        this.searchTimer.unsubscribe();\n        this.searchTimer = null;\n      }\n\n      if (!this.ctx.searching) {\n        if (this.ctrListDisplaySearching) {\n          this.ctx.results = [];\n        }\n\n        this.ctx.searching = true;\n        this.ctx.searchInitialized = true;\n        this.refreshTemplate();\n      }\n\n      if (this.clearTimer) {\n        this.clearTimer.unsubscribe();\n      }\n\n      this.searchTimer = timer(this.ctrListPause).pipe(take(1)).subscribe(() => {\n        this.searchTimerComplete(term);\n      });\n    } else if (!isNil(term) && term.length < this.ctrListMinSearchLength) {\n      this.clear();\n      this.term = \"\";\n    }\n  }\n\n  clear() {\n    if (this.searchTimer) {\n      this.searchTimer.unsubscribe();\n    }\n\n    this.clearTimer = timer(CLEAR_TIMEOUT).pipe(take(1)).subscribe(() => {\n      this._clear();\n    });\n  }\n\n  open() {\n    if (!this.ctx.searchInitialized) {\n      this.search(\"\");\n    }\n\n    this.refreshTemplate();\n  }\n\n  isOpen(open) {\n    this.ctx.isOpen = open;\n  }\n\n  _clear() {\n    if (this.searchTimer) {\n      this.searchTimer.unsubscribe();\n      this.searchTimer = null;\n    }\n\n    if (this.dataService) {\n      this.dataService.cancel();\n    }\n\n    this.viewContainer.clear();\n    this.viewRef = null;\n  }\n\n  searchTimerComplete(term) {\n    // Begin the search\n    if (isNil(term) || term.length < this.ctrListMinSearchLength) {\n      this.ctx.searching = false;\n      return;\n    }\n\n    this.term = term;\n\n    if (this._dataService) {\n      this._dataService.search(term);\n    }\n  }\n\n  refreshTemplate() {\n    // create the template if it doesn't exist\n    if (!this.viewRef) {\n      this.viewRef = this.viewContainer.createEmbeddedView(this.templateRef, this.ctx);\n    } else if (!this.viewRef.destroyed) {\n      // refresh the template\n      this.viewRef.context.isOpen = this.ctx.isOpen;\n      this.viewRef.context.results = this.ctx.results;\n      this.viewRef.context.searching = this.ctx.searching;\n      this.viewRef.context.searchInitialized = this.ctx.searchInitialized;\n      this.viewRef.detectChanges();\n    }\n\n    this.cd.markForCheck();\n  }\n\n  getBestMatchIndex() {\n    if (!this.ctx.results || !this.term) {\n      return null;\n    } // First try to find the exact term\n\n\n    let bestMatch = this.ctx.results.findIndex(item => item.title.toLowerCase() === this.term.toLocaleLowerCase()); // If not try to find the first item that starts with the term\n\n    if (bestMatch < 0) {\n      bestMatch = this.ctx.results.findIndex(item => item.title.toLowerCase().startsWith(this.term.toLocaleLowerCase()));\n    } // If not try to find the first item that includes the term\n\n\n    if (bestMatch < 0) {\n      bestMatch = this.ctx.results.findIndex(item => item.title.toLowerCase().includes(this.term.toLocaleLowerCase()));\n    }\n\n    return bestMatch < 0 ? null : bestMatch;\n  }\n\n  dataServiceSubscribe() {\n    if (this._dataService) {\n      this._dataService.subscribe(results => {\n        this.ctx.searchInitialized = true;\n        this.ctx.searching = false;\n        this.ctx.results = results;\n\n        if (this.ctrListAutoMatch && results && results.length === 1 && results[0].title && !isNil(this.term) && results[0].title.toLocaleLowerCase() === this.term.toLocaleLowerCase()) {\n          // Do automatch\n          this.completer.onSelected(results[0]);\n          return;\n        }\n\n        this.refreshTemplate();\n\n        if (this.ctrListAutoHighlight) {\n          this.completer.autoHighlightIndex = this.getBestMatchIndex();\n        }\n      }, error => {\n        // tslint:disable-next-line:no-console\n        console.error(error); // tslint:disable-next-line:no-console\n\n        console.error(\"Unexpected error in dataService: errors should be handled by the dataService Observable\");\n        return [];\n      });\n\n      if (this._dataService.dataSourceChange) {\n        this._dataService.dataSourceChange.subscribe(() => {\n          this.term = null;\n          this.ctx.searchInitialized = false;\n          this.ctx.searching = false;\n          this.ctx.results = [];\n          this.refreshTemplate();\n          this.completer.onDataSourceChange();\n        });\n      }\n    }\n  }\n\n};\n\nCtrList.ɵfac = function CtrList_Factory(t) {\n  return new (t || CtrList)(ɵngcc0.ɵɵdirectiveInject(CtrCompleter, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCtrList.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CtrList,\n  selectors: [[\"\", \"ctrList\", \"\"]],\n  inputs: {\n    ctrListMinSearchLength: \"ctrListMinSearchLength\",\n    ctrListPause: \"ctrListPause\",\n    ctrListAutoMatch: \"ctrListAutoMatch\",\n    ctrListAutoHighlight: \"ctrListAutoHighlight\",\n    ctrListDisplaySearching: \"ctrListDisplaySearching\",\n    dataService: [\"ctrList\", \"dataService\"],\n    initialValue: [\"ctrListInitialValue\", \"initialValue\"]\n  }\n});\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CtrList.prototype, \"ctrListMinSearchLength\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CtrList.prototype, \"ctrListPause\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CtrList.prototype, \"ctrListAutoMatch\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CtrList.prototype, \"ctrListAutoHighlight\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CtrList.prototype, \"ctrListDisplaySearching\", void 0);\n\n__decorate([Input(\"ctrList\"), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], CtrList.prototype, \"dataService\", null);\n\n__decorate([Input(\"ctrListInitialValue\"), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], CtrList.prototype, \"initialValue\", null);\n\nCtrList = __decorate([__param(0, Host()), __metadata(\"design:paramtypes\", [CtrCompleter, TemplateRef, ViewContainerRef, ChangeDetectorRef, NgZone])], CtrList);\nlet CtrRow = class CtrRow {\n  constructor(el, renderer, dropdown) {\n    this.el = el;\n    this.renderer = renderer;\n    this.dropdown = dropdown;\n    this.selected = false;\n    this._rowIndex = 0;\n    this._item = null;\n  }\n\n  ngOnDestroy() {\n    if (this._rowIndex) {\n      this.dropdown.unregisterRow(this._rowIndex);\n    }\n  }\n\n  set ctrRow(index) {\n    this._rowIndex = index;\n    this.dropdown.registerRow(new CtrRowItem(this, this._rowIndex));\n  }\n\n  set dataItem(item) {\n    this._item = item;\n  }\n\n  onClick(event) {\n    this.dropdown.onSelected(this._item);\n  }\n\n  onMouseEnter(event) {\n    this.dropdown.highlightRow(this._rowIndex);\n  }\n\n  onMouseDown(event) {\n    this.dropdown.rowMouseDown();\n  }\n\n  setHighlighted(selected) {\n    this.selected = selected;\n\n    if (this.selected) {\n      this.renderer.addClass(this.el.nativeElement, \"completer-selected-row\");\n    } else {\n      this.renderer.removeClass(this.el.nativeElement, \"completer-selected-row\");\n    }\n  }\n\n  getNativeElement() {\n    return this.el.nativeElement;\n  }\n\n  getDataItem() {\n    return this._item;\n  }\n\n};\n\nCtrRow.ɵfac = function CtrRow_Factory(t) {\n  return new (t || CtrRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(CtrDropdown, 1));\n};\n\nCtrRow.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CtrRow,\n  selectors: [[\"\", \"ctrRow\", \"\"]],\n  hostBindings: function CtrRow_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function CtrRow_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"mouseenter\", function CtrRow_mouseenter_HostBindingHandler($event) {\n        return ctx.onMouseEnter($event);\n      })(\"mousedown\", function CtrRow_mousedown_HostBindingHandler($event) {\n        return ctx.onMouseDown($event);\n      });\n    }\n  },\n  inputs: {\n    ctrRow: \"ctrRow\",\n    dataItem: \"dataItem\"\n  }\n});\n\n__decorate([Input(), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], CtrRow.prototype, \"ctrRow\", null);\n\n__decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], CtrRow.prototype, \"dataItem\", null);\n\n__decorate([HostListener(\"click\", [\"$event\"]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CtrRow.prototype, \"onClick\", null);\n\n__decorate([HostListener(\"mouseenter\", [\"$event\"]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CtrRow.prototype, \"onMouseEnter\", null);\n\n__decorate([HostListener(\"mousedown\", [\"$event\"]), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CtrRow.prototype, \"onMouseDown\", null);\n\nCtrRow = __decorate([__param(2, Host()), __metadata(\"design:paramtypes\", [ElementRef, Renderer2, CtrDropdown])], CtrRow);\nlet CompleterListItemCmp = class CompleterListItemCmp {\n  constructor() {\n    this.text = \"\";\n    this.searchStr = \"\";\n    this.matchClass = \"\";\n    this.type = \"\";\n    this.parts = [];\n  }\n\n  ngOnInit() {\n    if (!this.searchStr) {\n      this.parts.push({\n        isMatch: false,\n        text: this.text\n      });\n      return;\n    }\n\n    const matchStr = this.text.toLowerCase();\n    let matchPos = matchStr.indexOf(this.searchStr.toLowerCase());\n    let startIndex = 0;\n\n    while (matchPos >= 0) {\n      const matchText = this.text.slice(matchPos, matchPos + this.searchStr.length);\n\n      if (matchPos === 0) {\n        this.parts.push({\n          isMatch: true,\n          text: matchText\n        });\n        startIndex += this.searchStr.length;\n      } else if (matchPos > 0) {\n        const matchPart = this.text.slice(startIndex, matchPos);\n        this.parts.push({\n          isMatch: false,\n          text: matchPart\n        });\n        this.parts.push({\n          isMatch: true,\n          text: matchText\n        });\n        startIndex += this.searchStr.length + matchPart.length;\n      }\n\n      matchPos = matchStr.indexOf(this.searchStr.toLowerCase(), startIndex);\n    }\n\n    if (startIndex < this.text.length) {\n      this.parts.push({\n        isMatch: false,\n        text: this.text.slice(startIndex, this.text.length)\n      });\n    }\n  }\n\n};\n\nCompleterListItemCmp.ɵfac = function CompleterListItemCmp_Factory(t) {\n  return new (t || CompleterListItemCmp)();\n};\n\nCompleterListItemCmp.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CompleterListItemCmp,\n  selectors: [[\"completer-list-item\"]],\n  inputs: {\n    text: \"text\",\n    searchStr: \"searchStr\",\n    matchClass: \"matchClass\",\n    type: \"type\"\n  },\n  decls: 2,\n  vars: 5,\n  consts: [[1, \"completer-list-item-holder\", 3, \"ngClass\"], [\"class\", \"completer-list-item\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"completer-list-item\", 3, \"ngClass\"]],\n  template: function CompleterListItemCmp_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n      ɵngcc0.ɵɵtemplate(1, CompleterListItemCmp_span_1_Template, 2, 2, \"span\", 1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(2, _c0, ctx.type === \"title\", ctx.type === \"description\"));\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.parts);\n    }\n  },\n  directives: [ɵngcc3.NgClass, ɵngcc3.NgForOf],\n  encapsulation: 2\n});\n\n__decorate([Input(), __metadata(\"design:type\", String)], CompleterListItemCmp.prototype, \"text\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], CompleterListItemCmp.prototype, \"searchStr\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], CompleterListItemCmp.prototype, \"matchClass\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], CompleterListItemCmp.prototype, \"type\", void 0);\n\nconst noop = () => {\n  return;\n};\n\nconst COMPLETER_CONTROL_VALUE_ACCESSOR = {\n  multi: true,\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CompleterCmp)\n};\nlet CompleterCmp = class CompleterCmp {\n  constructor(completerService, cdr) {\n    this.completerService = completerService;\n    this.cdr = cdr;\n    this.inputName = \"\";\n    this.inputId = \"\";\n    this.pause = PAUSE;\n    this.minSearchLength = MIN_SEARCH_LENGTH;\n    this.maxChars = MAX_CHARS;\n    this.overrideSuggested = false;\n    this.clearSelected = false;\n    this.clearUnselected = false;\n    this.fillHighlighted = true;\n    this.placeholder = \"\";\n    this.autoMatch = false;\n    this.disableInput = false;\n    this.autofocus = false;\n    this.openOnFocus = false;\n    this.openOnClick = false;\n    this.selectOnClick = false;\n    this.selectOnFocus = false;\n    this.autoHighlight = false;\n    this.selected = new EventEmitter();\n    this.highlighted = new EventEmitter();\n    this.blurEvent = new EventEmitter();\n    this.click = new EventEmitter();\n    this.focusEvent = new EventEmitter();\n    this.opened = new EventEmitter();\n    this.keyup = new EventEmitter();\n    this.keydown = new EventEmitter();\n    this.control = new FormControl(\"\");\n    this.displaySearching = true;\n    this.displayNoResults = true;\n    this._textNoResults = TEXT_NO_RESULTS;\n    this._textSearching = TEXT_SEARCHING;\n    this._onTouchedCallback = noop;\n    this._onChangeCallback = noop;\n    this._focus = false;\n    this._open = false;\n    this._searchStr = \"\";\n  }\n\n  get value() {\n    return this.searchStr;\n  }\n\n  set value(v) {\n    if (v !== this.searchStr) {\n      this.searchStr = v;\n    } // Propagate the change in any case\n\n\n    this._onChangeCallback(v);\n  }\n\n  get searchStr() {\n    return this._searchStr;\n  }\n\n  set searchStr(value) {\n    if (typeof value === \"string\" || isNil(value)) {\n      this._searchStr = value;\n    } else {\n      this._searchStr = JSON.stringify(value);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.autofocus) {\n      this._focus = true;\n    }\n\n    if (!this.completer) {\n      return;\n    }\n\n    this.completer.selected.subscribe(item => {\n      this.selected.emit(item);\n    });\n    this.completer.highlighted.subscribe(item => {\n      this.highlighted.emit(item);\n    });\n    this.completer.opened.subscribe(isOpen => {\n      this._open = isOpen;\n      this.opened.emit(isOpen);\n    });\n  }\n\n  ngAfterViewChecked() {\n    if (this._focus) {\n      setTimeout(() => {\n        if (!!this.ctrInput) {\n          this.ctrInput.nativeElement.focus();\n          this._focus = false;\n        }\n      }, 0);\n    }\n  }\n\n  onTouched() {\n    this._onTouchedCallback();\n  }\n\n  writeValue(value) {\n    this.searchStr = value;\n  }\n\n  registerOnChange(fn) {\n    this._onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn) {\n    this._onTouchedCallback = fn;\n  }\n\n  setDisabledState(isDisabled) {\n    this.disableInput = isDisabled;\n  }\n\n  set datasource(source) {\n    if (source) {\n      if (source instanceof Array) {\n        this.dataService = this.completerService.local(source);\n      } else if (typeof source === \"string\") {\n        this.dataService = this.completerService.remote(source);\n      } else {\n        this.dataService = source;\n      }\n    }\n  }\n\n  set textNoResults(text) {\n    if (this._textNoResults !== text) {\n      this._textNoResults = text;\n      this.displayNoResults = !!this._textNoResults && this._textNoResults !== \"false\";\n    }\n  }\n\n  set textSearching(text) {\n    if (this._textSearching !== text) {\n      this._textSearching = text;\n      this.displaySearching = !!this._textSearching && this._textSearching !== \"false\";\n    }\n  }\n\n  onBlur() {\n    this.blurEvent.emit();\n    this.onTouched();\n    this.cdr.detectChanges();\n  }\n\n  onFocus() {\n    this.focusEvent.emit();\n    this.onTouched();\n  }\n\n  onClick(event) {\n    this.click.emit(event);\n    this.onTouched();\n  }\n\n  onKeyup(event) {\n    this.keyup.emit(event);\n    event.stopPropagation();\n  }\n\n  onKeydown(event) {\n    this.keydown.emit(event);\n    event.stopPropagation();\n  }\n\n  onChange(value) {\n    this.value = value;\n  }\n\n  open() {\n    if (!this.completer) {\n      return;\n    }\n\n    this.completer.open();\n  }\n\n  close() {\n    if (!this.completer) {\n      return;\n    }\n\n    this.completer.clear();\n  }\n\n  focus() {\n    if (this.ctrInput) {\n      this.ctrInput.nativeElement.focus();\n    } else {\n      this._focus = true;\n    }\n  }\n\n  blur() {\n    if (this.ctrInput) {\n      this.ctrInput.nativeElement.blur();\n    } else {\n      this._focus = false;\n    }\n  }\n\n  isOpen() {\n    return this._open;\n  }\n\n};\n\nCompleterCmp.ɵfac = function CompleterCmp_Factory(t) {\n  return new (t || CompleterCmp)(ɵngcc0.ɵɵdirectiveInject(CompleterService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\nCompleterCmp.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: CompleterCmp,\n  selectors: [[\"ng2-completer\"]],\n  viewQuery: function CompleterCmp_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(CtrCompleter, 5);\n      ɵngcc0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.completer = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ctrInput = _t.first);\n    }\n  },\n  inputs: {\n    inputName: \"inputName\",\n    inputId: \"inputId\",\n    pause: \"pause\",\n    minSearchLength: \"minSearchLength\",\n    maxChars: \"maxChars\",\n    overrideSuggested: \"overrideSuggested\",\n    clearSelected: \"clearSelected\",\n    clearUnselected: \"clearUnselected\",\n    fillHighlighted: \"fillHighlighted\",\n    placeholder: \"placeholder\",\n    autoMatch: \"autoMatch\",\n    disableInput: \"disableInput\",\n    autofocus: \"autofocus\",\n    openOnFocus: \"openOnFocus\",\n    openOnClick: \"openOnClick\",\n    selectOnClick: \"selectOnClick\",\n    selectOnFocus: \"selectOnFocus\",\n    autoHighlight: \"autoHighlight\",\n    datasource: \"datasource\",\n    dataService: \"dataService\",\n    textNoResults: \"textNoResults\",\n    textSearching: \"textSearching\",\n    matchClass: \"matchClass\",\n    fieldTabindex: \"fieldTabindex\",\n    inputClass: \"inputClass\",\n    initialValue: \"initialValue\"\n  },\n  outputs: {\n    selected: \"selected\",\n    highlighted: \"highlighted\",\n    blurEvent: \"blur\",\n    click: \"click\",\n    focusEvent: \"focus\",\n    opened: \"opened\",\n    keyup: \"keyup\",\n    keydown: \"keydown\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([COMPLETER_CONTROL_VALUE_ACCESSOR])],\n  decls: 4,\n  vars: 23,\n  consts: [[\"ctrCompleter\", \"\", 1, \"completer-holder\"], [\"type\", \"search\", \"ctrInput\", \"\", \"autocomplete\", \"off\", \"autocorrect\", \"off\", \"autocapitalize\", \"off\", 1, \"completer-input\", 3, \"ngClass\", \"ngModel\", \"placeholder\", \"tabindex\", \"disabled\", \"clearSelected\", \"clearUnselected\", \"overrideSuggested\", \"openOnFocus\", \"fillHighlighted\", \"openOnClick\", \"selectOnClick\", \"selectOnFocus\", \"ngModelChange\", \"blur\", \"focus\", \"keyup\", \"keydown\", \"click\"], [\"ctrInput\", \"\"], [\"class\", \"completer-dropdown-holder\", 4, \"ctrList\", \"ctrListMinSearchLength\", \"ctrListPause\", \"ctrListAutoMatch\", \"ctrListInitialValue\", \"ctrListAutoHighlight\", \"ctrListDisplaySearching\"], [1, \"completer-dropdown-holder\"], [\"class\", \"completer-dropdown\", \"ctrDropdown\", \"\", 4, \"ngIf\"], [\"ctrDropdown\", \"\", 1, \"completer-dropdown\"], [\"class\", \"completer-searching\", 4, \"ngIf\"], [\"class\", \"completer-no-results\", 4, \"ngIf\"], [\"class\", \"completer-row-wrapper\", 4, \"ngFor\", \"ngForOf\"], [1, \"completer-searching\"], [1, \"completer-no-results\"], [1, \"completer-row-wrapper\"], [1, \"completer-row\", 3, \"ctrRow\", \"dataItem\"], [\"class\", \"completer-image-holder\", 4, \"ngIf\"], [1, \"completer-item-text\", 3, \"ngClass\"], [1, \"completer-title\", 3, \"text\", \"matchClass\", \"searchStr\", \"type\"], [\"class\", \"completer-description\", 3, \"text\", \"matchClass\", \"searchStr\", \"type\", 4, \"ngIf\"], [1, \"completer-image-holder\"], [\"class\", \"completer-image\", 3, \"src\", 4, \"ngIf\"], [\"class\", \"completer-image-default\", 4, \"ngIf\"], [1, \"completer-image\", 3, \"src\"], [1, \"completer-image-default\"], [1, \"completer-description\", 3, \"text\", \"matchClass\", \"searchStr\", \"type\"]],\n  template: function CompleterCmp_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"input\", 1, 2);\n      ɵngcc0.ɵɵlistener(\"ngModelChange\", function CompleterCmp_Template_input_ngModelChange_1_listener($event) {\n        return ctx.searchStr = $event;\n      })(\"ngModelChange\", function CompleterCmp_Template_input_ngModelChange_1_listener($event) {\n        return ctx.onChange($event);\n      })(\"blur\", function CompleterCmp_Template_input_blur_1_listener() {\n        return ctx.onBlur();\n      })(\"focus\", function CompleterCmp_Template_input_focus_1_listener() {\n        return ctx.onFocus();\n      })(\"keyup\", function CompleterCmp_Template_input_keyup_1_listener($event) {\n        return ctx.onKeyup($event);\n      })(\"keydown\", function CompleterCmp_Template_input_keydown_1_listener($event) {\n        return ctx.onKeydown($event);\n      })(\"click\", function CompleterCmp_Template_input_click_1_listener($event) {\n        return ctx.onClick($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵtemplate(3, CompleterCmp_div_3_Template, 2, 1, \"div\", 3);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.inputClass)(\"ngModel\", ctx.searchStr)(\"placeholder\", ctx.placeholder)(\"tabindex\", ctx.fieldTabindex)(\"disabled\", ctx.disableInput)(\"clearSelected\", ctx.clearSelected)(\"clearUnselected\", ctx.clearUnselected)(\"overrideSuggested\", ctx.overrideSuggested)(\"openOnFocus\", ctx.openOnFocus)(\"fillHighlighted\", ctx.fillHighlighted)(\"openOnClick\", ctx.openOnClick)(\"selectOnClick\", ctx.selectOnClick)(\"selectOnFocus\", ctx.selectOnFocus);\n      ɵngcc0.ɵɵattribute(\"id\", ctx.inputId.length > 0 ? ctx.inputId : null)(\"name\", ctx.inputName)(\"maxlength\", ctx.maxChars);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵproperty(\"ctrList\", ctx.dataService)(\"ctrListMinSearchLength\", ctx.minSearchLength)(\"ctrListPause\", ctx.pause)(\"ctrListAutoMatch\", ctx.autoMatch)(\"ctrListInitialValue\", ctx.initialValue)(\"ctrListAutoHighlight\", ctx.autoHighlight)(\"ctrListDisplaySearching\", ctx.displaySearching);\n    }\n  },\n  directives: [CtrCompleter, ɵngcc2.DefaultValueAccessor, CtrInput, ɵngcc3.NgClass, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc2.MaxLengthValidator, CtrList, ɵngcc3.NgIf, CtrDropdown, ɵngcc3.NgForOf, CtrRow, CompleterListItemCmp],\n  styles: [\".completer-dropdown[_ngcontent-%COMP%] {\\n        border-color: #ececec;\\n        border-width: 1px;\\n        border-style: solid;\\n        border-radius: 2px;\\n        width: 250px;\\n        padding: 6px;\\n        cursor: pointer;\\n        z-index: 9999;\\n        position: absolute;\\n        margin-top: -6px;\\n        background-color: #ffffff;\\n    }\\n\\n    .completer-row[_ngcontent-%COMP%] {\\n        padding: 5px;\\n        color: #000000;\\n        margin-bottom: 4px;\\n        clear: both;\\n        display: inline-block;\\n        width: 103%;\\n    }\\n\\n    .completer-selected-row[_ngcontent-%COMP%] {\\n        background-color: lightblue;\\n        color: #ffffff;\\n    }\\n\\n    .completer-description[_ngcontent-%COMP%] {\\n        font-size: 14px;\\n    }\\n\\n    .completer-image-default[_ngcontent-%COMP%] {\\n        width: 16px;\\n        height: 16px;\\n        background-image: url(\\\"demo/res/img/default.png\\\");\\n    }\\n\\n    .completer-image-holder[_ngcontent-%COMP%] {\\n        float: left;\\n        width: 10%;\\n    }\\n    .completer-item-text-image[_ngcontent-%COMP%] {\\n        float: right;\\n        width: 90%;\\n    }\"]\n});\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"dataService\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"inputName\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], CompleterCmp.prototype, \"inputId\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"pause\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"minSearchLength\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"maxChars\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"overrideSuggested\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"clearSelected\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"clearUnselected\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"fillHighlighted\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"placeholder\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"matchClass\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"fieldTabindex\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"autoMatch\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"disableInput\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"inputClass\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"autofocus\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"openOnFocus\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"openOnClick\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"selectOnClick\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"selectOnFocus\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"initialValue\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"autoHighlight\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"selected\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"highlighted\", void 0);\n\n__decorate([Output(\"blur\"), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"blurEvent\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"click\", void 0);\n\n__decorate([Output(\"focus\"), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"focusEvent\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"opened\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], CompleterCmp.prototype, \"keyup\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], CompleterCmp.prototype, \"keydown\", void 0);\n\n__decorate([ViewChild(CtrCompleter, {\n  static: false\n}), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"completer\", void 0);\n\n__decorate([ViewChild(\"ctrInput\", {\n  static: false\n}), __metadata(\"design:type\", Object)], CompleterCmp.prototype, \"ctrInput\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], CompleterCmp.prototype, \"datasource\", null);\n\n__decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], CompleterCmp.prototype, \"textNoResults\", null);\n\n__decorate([Input(), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], CompleterCmp.prototype, \"textSearching\", null);\n\nCompleterCmp = __decorate([__metadata(\"design:paramtypes\", [CompleterService, ChangeDetectorRef])], CompleterCmp);\nvar Ng2CompleterModule_1;\nconst providers = [CompleterService, LocalDataFactory, RemoteDataFactory];\nlet Ng2CompleterModule = Ng2CompleterModule_1 = class Ng2CompleterModule {\n  static forRoot() {\n    return {\n      ngModule: Ng2CompleterModule_1,\n      providers\n    };\n  }\n\n  static forChild() {\n    return {\n      ngModule: Ng2CompleterModule_1,\n      providers\n    };\n  }\n\n};\n\nNg2CompleterModule.ɵfac = function Ng2CompleterModule_Factory(t) {\n  return new (t || Ng2CompleterModule)();\n};\n\nNg2CompleterModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: Ng2CompleterModule\n});\nNg2CompleterModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: providers,\n  imports: [[CommonModule, FormsModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Ng2CompleterModule, {\n    declarations: function () {\n      return [CompleterListItemCmp, CtrCompleter, CtrDropdown, CtrInput, CtrList, CtrRow, CompleterCmp];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule];\n    },\n    exports: function () {\n      return [CompleterListItemCmp, CtrCompleter, CtrDropdown, CtrInput, CtrList, CtrRow, CompleterCmp];\n    }\n  });\n})();\n\nexport { CompleterCmp, CompleterListItemCmp, CompleterService, CtrCompleter, CtrDropdown, CtrInput, CtrList, CtrRow, LocalData, LocalDataFactory, Ng2CompleterModule, RemoteData, RemoteDataFactory, CtrListContext as ɵa, CompleterBaseData as ɵb }; //# sourceMappingURL=ng2-completer.js.map","map":null,"metadata":{},"sourceType":"module"}